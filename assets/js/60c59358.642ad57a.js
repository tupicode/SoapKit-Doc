"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[4354],{1970:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/ui-integration","title":"UI Integration Examples","description":"Learn how to create reactive UI systems using SoapKit\'s data binding capabilities.","source":"@site/docs/examples/ui-integration.md","sourceDirName":"examples","slug":"/examples/ui-integration","permalink":"/SoapKit-Doc/docs/examples/ui-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/ui-integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Inventory System Example","permalink":"/SoapKit-Doc/docs/examples/inventory-system"},"next":{"title":"State Management Example","permalink":"/SoapKit-Doc/docs/examples/state-management"}}');var i=a(4848),l=a(8453);const r={},s="UI Integration Examples",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic UI Data Binding",id:"basic-ui-data-binding",level:2},{value:"Health Bar Integration",id:"health-bar-integration",level:3},{value:"Menu System Integration",id:"menu-system-integration",level:3},{value:"Advanced UI Patterns",id:"advanced-ui-patterns",level:2},{value:"Settings Panel with Data Binding",id:"settings-panel-with-data-binding",level:3},{value:"Reactive List UI",id:"reactive-list-ui",level:3},{value:"Animations and Transitions",id:"animations-and-transitions",level:2},{value:"Animated UI Updates",id:"animated-ui-updates",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Clean UI Architecture",id:"clean-ui-architecture",level:3},{value:"Common Patterns",id:"common-patterns",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ui-integration-examples",children:"UI Integration Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Learn how to create reactive UI systems using SoapKit's data binding capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This guide shows you how to build responsive user interfaces that automatically update when game state changes, using SoapKit's variable and event systems for clean separation between UI and game logic."}),"\n",(0,i.jsx)(n.h2,{id:"basic-ui-data-binding",children:"Basic UI Data Binding"}),"\n",(0,i.jsx)(n.h3,{id:"health-bar-integration",children:"Health Bar Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\n\npublic class HealthBarUI : MonoBehaviour\n{\n    [Header("Health Variables")]\n    [SerializeField] private IntVariable currentHealth;\n    [SerializeField] private IntVariable maxHealth;\n    \n    [Header("Health Events")]\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private GameEvent onPlayerDeath;\n    \n    [Header("UI Components")]\n    [SerializeField] private Slider healthSlider;\n    [SerializeField] private TextMeshProUGUI healthText;\n    [SerializeField] private Image healthFill;\n    [SerializeField] private Gradient healthColorGradient;\n    \n    private void OnEnable()\n    {\n        // Bind to variable changes\n        currentHealth.OnValueChanged += UpdateHealthDisplay;\n        maxHealth.OnValueChanged += UpdateMaxHealth;\n        \n        // Bind to events\n        onHealthChanged.AddListener(OnHealthChanged);\n        onPlayerDeath.AddListener(OnPlayerDeath);\n    }\n    \n    private void OnDisable()\n    {\n        currentHealth.OnValueChanged -= UpdateHealthDisplay;\n        maxHealth.OnValueChanged -= UpdateMaxHealth;\n        \n        onHealthChanged.RemoveListener(OnHealthChanged);\n        onPlayerDeath.RemoveListener(OnPlayerDeath);\n    }\n    \n    private void Start()\n    {\n        InitializeHealthDisplay();\n    }\n    \n    private void InitializeHealthDisplay()\n    {\n        healthSlider.maxValue = maxHealth.Value;\n        UpdateHealthDisplay(currentHealth.Value);\n    }\n    \n    private void UpdateHealthDisplay(int newHealth)\n    {\n        healthSlider.value = newHealth;\n        healthText.text = $"{newHealth}/{maxHealth.Value}";\n        \n        // Update color based on health percentage\n        float healthPercentage = (float)newHealth / maxHealth.Value;\n        healthFill.color = healthColorGradient.Evaluate(healthPercentage);\n    }\n    \n    private void UpdateMaxHealth(int newMaxHealth)\n    {\n        healthSlider.maxValue = newMaxHealth;\n        UpdateHealthDisplay(currentHealth.Value);\n    }\n    \n    private void OnHealthChanged(int healthChange)\n    {\n        // Show floating damage/heal text\n        if (healthChange < 0)\n        {\n            ShowFloatingText($"-{Mathf.Abs(healthChange)}", Color.red);\n        }\n        else if (healthChange > 0)\n        {\n            ShowFloatingText($"+{healthChange}", Color.green);\n        }\n    }\n    \n    private void OnPlayerDeath()\n    {\n        // Show death screen or game over UI\n        ShowDeathScreen();\n    }\n    \n    private void ShowFloatingText(string text, Color color)\n    {\n        // Implementation for floating damage text\n        // This could use a separate FloatingTextManager\n    }\n    \n    private void ShowDeathScreen()\n    {\n        // Implementation for death screen\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"menu-system-integration",children:"Menu System Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\n\npublic class GameMenuManager : MonoBehaviour\n{\n    [Header("Game State")]\n    [SerializeField] private BoolVariable isGamePaused;\n    [SerializeField] private BoolVariable isMenuOpen;\n    [SerializeField] private StringVariable currentMenuState;\n    \n    [Header("Menu Events")]\n    [SerializeField] private StringGameEvent onMenuChanged;\n    [SerializeField] private BoolGameEvent onPauseToggle;\n    \n    [Header("Menu Panels")]\n    [SerializeField] private GameObject mainMenuPanel;\n    [SerializeField] private GameObject optionsPanel;\n    [SerializeField] private GameObject inventoryPanel;\n    [SerializeField] private GameObject pauseOverlay;\n    \n    private void OnEnable()\n    {\n        // Subscribe to state changes\n        isGamePaused.OnValueChanged += UpdatePauseUI;\n        isMenuOpen.OnValueChanged += UpdateMenuVisibility;\n        currentMenuState.OnValueChanged += UpdateActiveMenu;\n        \n        // Subscribe to events\n        onMenuChanged.AddListener(ChangeMenu);\n        onPauseToggle.AddListener(HandlePauseToggle);\n    }\n    \n    private void OnDisable()\n    {\n        isGamePaused.OnValueChanged -= UpdatePauseUI;\n        isMenuOpen.OnValueChanged -= UpdateMenuVisibility;\n        currentMenuState.OnValueChanged -= UpdateActiveMenu;\n        \n        onMenuChanged.RemoveListener(ChangeMenu);\n        onPauseToggle.RemoveListener(HandlePauseToggle);\n    }\n    \n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Escape))\n        {\n            TogglePauseMenu();\n        }\n        \n        if (Input.GetKeyDown(KeyCode.I))\n        {\n            ToggleInventoryMenu();\n        }\n    }\n    \n    private void UpdatePauseUI(bool isPaused)\n    {\n        pauseOverlay.SetActive(isPaused);\n        Time.timeScale = isPaused ? 0f : 1f;\n    }\n    \n    private void UpdateMenuVisibility(bool isVisible)\n    {\n        // Enable/disable UI canvas or specific panels\n        if (!isVisible)\n        {\n            CloseAllMenus();\n        }\n    }\n    \n    private void UpdateActiveMenu(string menuName)\n    {\n        CloseAllMenus();\n        \n        switch (menuName.ToLower())\n        {\n            case "main":\n                mainMenuPanel.SetActive(true);\n                break;\n            case "options":\n                optionsPanel.SetActive(true);\n                break;\n            case "inventory":\n                inventoryPanel.SetActive(true);\n                break;\n        }\n    }\n    \n    private void ChangeMenu(string newMenu)\n    {\n        currentMenuState.SetValue(newMenu);\n        isMenuOpen.SetValue(!string.IsNullOrEmpty(newMenu));\n    }\n    \n    private void HandlePauseToggle(bool isPaused)\n    {\n        if (isPaused)\n        {\n            ChangeMenu("main");\n        }\n        else\n        {\n            ChangeMenu("");\n        }\n    }\n    \n    private void TogglePauseMenu()\n    {\n        bool newPauseState = !isGamePaused.Value;\n        isGamePaused.SetValue(newPauseState);\n        onPauseToggle.Raise(newPauseState);\n    }\n    \n    private void ToggleInventoryMenu()\n    {\n        string targetMenu = currentMenuState.Value == "inventory" ? "" : "inventory";\n        onMenuChanged.Raise(targetMenu);\n    }\n    \n    private void CloseAllMenus()\n    {\n        mainMenuPanel.SetActive(false);\n        optionsPanel.SetActive(false);\n        inventoryPanel.SetActive(false);\n    }\n    \n    // UI Button callbacks\n    public void OnResumeClicked()\n    {\n        isGamePaused.SetValue(false);\n        onPauseToggle.Raise(false);\n    }\n    \n    public void OnOptionsClicked()\n    {\n        onMenuChanged.Raise("options");\n    }\n    \n    public void OnQuitClicked()\n    {\n        Application.Quit();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-ui-patterns",children:"Advanced UI Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"settings-panel-with-data-binding",children:"Settings Panel with Data Binding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\n\npublic class SettingsPanel : MonoBehaviour\n{\n    [Header("Audio Settings")]\n    [SerializeField] private FloatVariable masterVolume;\n    [SerializeField] private FloatVariable musicVolume;\n    [SerializeField] private FloatVariable sfxVolume;\n    \n    [Header("Graphics Settings")]\n    [SerializeField] private BoolVariable isFullscreen;\n    [SerializeField] private IntVariable qualityLevel;\n    [SerializeField] private BoolVariable vSyncEnabled;\n    \n    [Header("Gameplay Settings")]\n    [SerializeField] private FloatVariable mouseSensitivity;\n    [SerializeField] private BoolVariable invertY;\n    \n    [Header("UI Controls")]\n    [SerializeField] private Slider masterVolumeSlider;\n    [SerializeField] private Slider musicVolumeSlider;\n    [SerializeField] private Slider sfxVolumeSlider;\n    [SerializeField] private Toggle fullscreenToggle;\n    [SerializeField] private TMP_Dropdown qualityDropdown;\n    [SerializeField] private Toggle vsyncToggle;\n    [SerializeField] private Slider sensitivitySlider;\n    [SerializeField] private Toggle invertYToggle;\n    \n    private void OnEnable()\n    {\n        BindUIToVariables();\n        InitializeUIValues();\n    }\n    \n    private void OnDisable()\n    {\n        UnbindUIFromVariables();\n    }\n    \n    private void BindUIToVariables()\n    {\n        // Audio bindings\n        masterVolumeSlider.onValueChanged.AddListener(OnMasterVolumeChanged);\n        musicVolumeSlider.onValueChanged.AddListener(OnMusicVolumeChanged);\n        sfxVolumeSlider.onValueChanged.AddListener(OnSFXVolumeChanged);\n        \n        // Graphics bindings\n        fullscreenToggle.onValueChanged.AddListener(OnFullscreenChanged);\n        qualityDropdown.onValueChanged.AddListener(OnQualityChanged);\n        vsyncToggle.onValueChanged.AddListener(OnVSyncChanged);\n        \n        // Gameplay bindings\n        sensitivitySlider.onValueChanged.AddListener(OnSensitivityChanged);\n        invertYToggle.onValueChanged.AddListener(OnInvertYChanged);\n        \n        // Variable change listeners\n        masterVolume.OnValueChanged += UpdateMasterVolumeUI;\n        musicVolume.OnValueChanged += UpdateMusicVolumeUI;\n        sfxVolume.OnValueChanged += UpdateSFXVolumeUI;\n        isFullscreen.OnValueChanged += UpdateFullscreenUI;\n        qualityLevel.OnValueChanged += UpdateQualityUI;\n        vSyncEnabled.OnValueChanged += UpdateVSyncUI;\n        mouseSensitivity.OnValueChanged += UpdateSensitivityUI;\n        invertY.OnValueChanged += UpdateInvertYUI;\n    }\n    \n    private void UnbindUIFromVariables()\n    {\n        // Remove UI listeners\n        masterVolumeSlider.onValueChanged.RemoveListener(OnMasterVolumeChanged);\n        musicVolumeSlider.onValueChanged.RemoveListener(OnMusicVolumeChanged);\n        sfxVolumeSlider.onValueChanged.RemoveListener(OnSFXVolumeChanged);\n        fullscreenToggle.onValueChanged.RemoveListener(OnFullscreenChanged);\n        qualityDropdown.onValueChanged.RemoveListener(OnQualityChanged);\n        vsyncToggle.onValueChanged.RemoveListener(OnVSyncChanged);\n        sensitivitySlider.onValueChanged.RemoveListener(OnSensitivityChanged);\n        invertYToggle.onValueChanged.RemoveListener(OnInvertYChanged);\n        \n        // Remove variable change listeners\n        masterVolume.OnValueChanged -= UpdateMasterVolumeUI;\n        musicVolume.OnValueChanged -= UpdateMusicVolumeUI;\n        sfxVolume.OnValueChanged -= UpdateSFXVolumeUI;\n        isFullscreen.OnValueChanged -= UpdateFullscreenUI;\n        qualityLevel.OnValueChanged -= UpdateQualityUI;\n        vSyncEnabled.OnValueChanged -= UpdateVSyncUI;\n        mouseSensitivity.OnValueChanged -= UpdateSensitivityUI;\n        invertY.OnValueChanged -= UpdateInvertYUI;\n    }\n    \n    private void InitializeUIValues()\n    {\n        masterVolumeSlider.value = masterVolume.Value;\n        musicVolumeSlider.value = musicVolume.Value;\n        sfxVolumeSlider.value = sfxVolume.Value;\n        fullscreenToggle.isOn = isFullscreen.Value;\n        qualityDropdown.value = qualityLevel.Value;\n        vsyncToggle.isOn = vSyncEnabled.Value;\n        sensitivitySlider.value = mouseSensitivity.Value;\n        invertYToggle.isOn = invertY.Value;\n    }\n    \n    // UI to Variable callbacks\n    private void OnMasterVolumeChanged(float value) => masterVolume.SetValue(value);\n    private void OnMusicVolumeChanged(float value) => musicVolume.SetValue(value);\n    private void OnSFXVolumeChanged(float value) => sfxVolume.SetValue(value);\n    private void OnFullscreenChanged(bool value) => isFullscreen.SetValue(value);\n    private void OnQualityChanged(int value) => qualityLevel.SetValue(value);\n    private void OnVSyncChanged(bool value) => vSyncEnabled.SetValue(value);\n    private void OnSensitivityChanged(float value) => mouseSensitivity.SetValue(value);\n    private void OnInvertYChanged(bool value) => invertY.SetValue(value);\n    \n    // Variable to UI callbacks\n    private void UpdateMasterVolumeUI(float value) => masterVolumeSlider.value = value;\n    private void UpdateMusicVolumeUI(float value) => musicVolumeSlider.value = value;\n    private void UpdateSFXVolumeUI(float value) => sfxVolumeSlider.value = value;\n    private void UpdateFullscreenUI(bool value) => fullscreenToggle.isOn = value;\n    private void UpdateQualityUI(int value) => qualityDropdown.value = value;\n    private void UpdateVSyncUI(bool value) => vsyncToggle.isOn = value;\n    private void UpdateSensitivityUI(float value) => sensitivitySlider.value = value;\n    private void UpdateInvertYUI(bool value) => invertYToggle.isOn = value;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reactive-list-ui",children:"Reactive List UI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class QuestLogUI : MonoBehaviour\n{\n    [Header("Quest Events")]\n    [SerializeField] private QuestEvent onQuestAdded;\n    [SerializeField] private QuestEvent onQuestCompleted;\n    [SerializeField] private QuestEvent onQuestUpdated;\n    \n    [Header("UI References")]\n    [SerializeField] private Transform questListParent;\n    [SerializeField] private GameObject questItemPrefab;\n    \n    private Dictionary<string, QuestItemUI> activeQuestItems = new Dictionary<string, QuestItemUI>();\n    \n    private void OnEnable()\n    {\n        onQuestAdded.AddListener(AddQuestToUI);\n        onQuestCompleted.AddListener(RemoveQuestFromUI);\n        onQuestUpdated.AddListener(UpdateQuestInUI);\n    }\n    \n    private void OnDisable()\n    {\n        onQuestAdded.RemoveListener(AddQuestToUI);\n        onQuestCompleted.RemoveListener(RemoveQuestFromUI);\n        onQuestUpdated.RemoveListener(UpdateQuestInUI);\n    }\n    \n    private void AddQuestToUI(Quest quest)\n    {\n        if (activeQuestItems.ContainsKey(quest.id))\n            return;\n        \n        GameObject questItemObj = Instantiate(questItemPrefab, questListParent);\n        QuestItemUI questItemUI = questItemObj.GetComponent<QuestItemUI>();\n        \n        questItemUI.SetQuest(quest);\n        activeQuestItems[quest.id] = questItemUI;\n    }\n    \n    private void RemoveQuestFromUI(Quest quest)\n    {\n        if (activeQuestItems.TryGetValue(quest.id, out QuestItemUI questItem))\n        {\n            questItem.AnimateCompletion(() =>\n            {\n                Destroy(questItem.gameObject);\n                activeQuestItems.Remove(quest.id);\n            });\n        }\n    }\n    \n    private void UpdateQuestInUI(Quest quest)\n    {\n        if (activeQuestItems.TryGetValue(quest.id, out QuestItemUI questItem))\n        {\n            questItem.UpdateQuest(quest);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"animations-and-transitions",children:"Animations and Transitions"}),"\n",(0,i.jsx)(n.h3,{id:"animated-ui-updates",children:"Animated UI Updates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\nusing DG.Tweening; // Using DOTween for animations\n\npublic class AnimatedHealthBar : MonoBehaviour\n{\n    [Header("Health Variables")]\n    [SerializeField] private IntVariable currentHealth;\n    [SerializeField] private IntVariable maxHealth;\n    \n    [Header("UI Components")]\n    [SerializeField] private RectTransform healthBar;\n    [SerializeField] private CanvasGroup damageFlash;\n    \n    private Vector2 originalHealthBarSize;\n    private int lastHealth;\n    \n    private void Start()\n    {\n        originalHealthBarSize = healthBar.sizeDelta;\n        lastHealth = currentHealth.Value;\n    }\n    \n    private void OnEnable()\n    {\n        currentHealth.OnValueChanged += AnimateHealthChange;\n        maxHealth.OnValueChanged += UpdateMaxHealth;\n    }\n    \n    private void OnDisable()\n    {\n        currentHealth.OnValueChanged -= AnimateHealthChange;\n        maxHealth.OnValueChanged -= UpdateMaxHealth;\n    }\n    \n    private void AnimateHealthChange(int newHealth)\n    {\n        float healthPercentage = (float)newHealth / maxHealth.Value;\n        Vector2 targetSize = new Vector2(originalHealthBarSize.x * healthPercentage, originalHealthBarSize.y);\n        \n        // Animate health bar\n        healthBar.DOSizeDelta(targetSize, 0.5f)\n            .SetEase(Ease.OutQuart);\n        \n        // Flash effect on damage\n        if (newHealth < lastHealth)\n        {\n            damageFlash.DOFade(0.5f, 0.1f)\n                .OnComplete(() => damageFlash.DOFade(0f, 0.3f));\n        }\n        \n        lastHealth = newHealth;\n    }\n    \n    private void UpdateMaxHealth(int newMaxHealth)\n    {\n        AnimateHealthChange(currentHealth.Value);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"clean-ui-architecture",children:"Clean UI Architecture"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separation of Concerns"}),": Keep UI logic separate from game logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event-Driven Updates"}),": Use events for UI updates, not polling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent Binding"}),": Always pair OnEnable/OnDisable for event subscriptions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null Safety"}),": Check for null references in UI callbacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Minimize UI updates and use efficient data binding"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Good: Event-driven UI update\nprivate void OnEnable()\n{\n    playerScore.OnValueChanged += UpdateScoreDisplay;\n}\n\nprivate void OnDisable()  \n{\n    playerScore.OnValueChanged -= UpdateScoreDisplay;\n}\n\n// Bad: Polling in Update\nprivate void Update()\n{\n    if (scoreText.text != playerScore.Value.ToString())\n    {\n        scoreText.text = playerScore.Value.ToString();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,i.jsx)(n.p,{children:"This UI integration approach works seamlessly with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./health-system",children:"Health System"})," - For player status displays"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./inventory-system",children:"Inventory System"})," - For item management UI"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./state-management",children:"State Management"})," - For persistent UI settings"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"./state-management",children:"State Management"})," for UI persistence"]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"./health-system",children:"Health System"})," integration"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out ",(0,i.jsx)(n.a,{href:"./inventory-system",children:"Inventory System"})," UI patterns"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var t=a(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);