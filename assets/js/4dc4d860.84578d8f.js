"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[4984],{1018:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/health-system-diagram-75ce3fb6284594c3a29a6c77dc00cc8e.png"},4170:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"examples/health-system","title":"Complete Health System","description":"This comprehensive example demonstrates building a professional health system using SoapKit\'s full feature set. You\'ll learn how to create a scalable, debuggable health system that integrates seamlessly with UI, audio, effects, and other game systems.","source":"@site/docs/examples/health-system.md","sourceDirName":"examples","slug":"/examples/health-system","permalink":"/SoapKit-Doc/docs/examples/health-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/health-system.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Complete Health System","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Best Practices","permalink":"/SoapKit-Doc/docs/advanced/best-practices"},"next":{"title":"Inventory System Example","permalink":"/SoapKit-Doc/docs/examples/inventory-system"}}');var i=a(4848),l=a(8453);const r={title:"Complete Health System",sidebar_position:1},o="Complete Health System Example",s={},h=[{value:"System Overview",id:"system-overview",level:2},{value:"Assets Setup",id:"assets-setup",level:2},{value:"Variables",id:"variables",level:3},{value:"Events",id:"events",level:3},{value:"Core Health System",id:"core-health-system",level:2},{value:"UI Integration",id:"ui-integration",level:2},{value:"Audio Integration",id:"audio-integration",level:2},{value:"Debug Integration",id:"debug-integration",level:2},{value:"Scene Setup",id:"scene-setup",level:2},{value:"GameObject Hierarchy",id:"gameobject-hierarchy",level:3},{value:"Variable Assignment",id:"variable-assignment",level:3},{value:"Testing &amp; Validation",id:"testing--validation",level:2},{value:"Manual Testing Checklist",id:"manual-testing-checklist",level:3},{value:"Automated Tests",id:"automated-tests",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Optimization Tips",id:"optimization-tips",level:3},{value:"Extensions &amp; Variations",id:"extensions--variations",level:2},{value:"Armor System Integration",id:"armor-system-integration",level:3},{value:"Multiple Health Types",id:"multiple-health-types",level:3},{value:"Temporary Health Buffs",id:"temporary-health-buffs",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"complete-health-system-example",children:"Complete Health System Example"})}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive example demonstrates building a professional health system using SoapKit's full feature set. You'll learn how to create a scalable, debuggable health system that integrates seamlessly with UI, audio, effects, and other game systems."}),"\n",(0,i.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,i.jsx)(n.p,{children:"Our health system will include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Core Health Logic"})," - Damage, healing, death detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reactive UI"})," - Health bars, damage indicators, death screen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audio Integration"})," - Damage sounds, death music, healing effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Effects"})," - Damage particles, screen effects, healing animations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics"})," - Damage tracking, death statistics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Save/Load"})," - Persistent health state"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Health System Architecture",src:a(1018).A+"",width:"160",height:"160"})}),"\n",(0,i.jsx)(n.h2,{id:"assets-setup",children:"Assets Setup"}),"\n",(0,i.jsx)(n.p,{children:"First, let's create all the SoapKit assets we'll need:"}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Create > SoapKit > Variables > Int Variable\n- PlayerHealth (Initial: 100, Min: 0, Max: 100)\n- MaxHealth (Initial: 100, Min: 1, Max: 1000)\n- LastDamageAmount (Initial: 0, Min: 0, Max: 1000)\n\nCreate > SoapKit > Variables > Float Variable  \n- HealthPercentage (Initial: 1.0, Min: 0.0, Max: 1.0)\n- RegenRate (Initial: 2.0, Min: 0.0, Max: 50.0)\n- LastDamageTime (Initial: 0.0)\n\nCreate > SoapKit > Variables > Bool Variable\n- IsAlive (Initial: true)\n- IsRegenerating (Initial: false)\n- IsInvulnerable (Initial: false)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Create > SoapKit > Events > Int Event\n- OnHealthChanged\n- OnDamageTaken  \n- OnHealthHealed\n- OnMaxHealthChanged\n\nCreate > SoapKit > Events > Float Event\n- OnHealthPercentageChanged\n\nCreate > SoapKit > Events > Unit Event\n- OnPlayerDied\n- OnPlayerRevived\n- OnRegenStarted\n- OnRegenStopped\n\nCreate > SoapKit > Events > String Event\n- OnDamageType (for different damage effects)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"core-health-system",children:"Core Health System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthSystem.cs"',children:'using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthSystem : MonoBehaviour\n{\n    [Header("Health Variables")]\n    [SerializeField] private IntVariable currentHealth;\n    [SerializeField] private IntVariable maxHealth;\n    [SerializeField] private IntVariable lastDamageAmount;\n    [SerializeField] private FloatVariable healthPercentage;\n    [SerializeField] private FloatVariable regenRate;\n    [SerializeField] private FloatVariable lastDamageTime;\n    \n    [Header("State Variables")]\n    [SerializeField] private BoolVariable isAlive;\n    [SerializeField] private BoolVariable isRegenerating;\n    [SerializeField] private BoolVariable isInvulnerable;\n    \n    [Header("Health Events")]\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private IntGameEvent onDamageTaken;\n    [SerializeField] private IntGameEvent onHealthHealed;\n    [SerializeField] private IntGameEvent onMaxHealthChanged;\n    [SerializeField] private FloatGameEvent onHealthPercentageChanged;\n    \n    [Header("State Events")]\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    [SerializeField] private UnitGameEvent onPlayerRevived;\n    [SerializeField] private UnitGameEvent onRegenStarted;\n    [SerializeField] private UnitGameEvent onRegenStopped;\n    [SerializeField] private StringGameEvent onDamageType;\n    \n    [Header("Settings")]\n    [SerializeField] private float regenDelay = 3f;\n    [SerializeField] private bool enableAutoRegen = true;\n    [SerializeField] private float invulnerabilityDuration = 1f;\n    \n    private Coroutine regenCoroutine;\n    private Coroutine invulnerabilityCoroutine;\n    \n    void Start()\n    {\n        InitializeHealth();\n        SubscribeToEvents();\n    }\n    \n    void OnDestroy()\n    {\n        UnsubscribeFromEvents();\n    }\n    \n    #region Initialization\n    private void InitializeHealth()\n    {\n        // Set initial values\n        currentHealth.SetValue(maxHealth.Value);\n        UpdateHealthPercentage();\n        isAlive.SetValue(true);\n        isRegenerating.SetValue(false);\n        isInvulnerable.SetValue(false);\n        \n        // Raise initial events\n        onHealthChanged.Raise(currentHealth.Value);\n        onHealthPercentageChanged.Raise(healthPercentage.Value);\n    }\n    \n    private void SubscribeToEvents()\n    {\n        currentHealth.OnValueChanged += OnCurrentHealthChanged;\n        maxHealth.OnValueChanged += OnMaxHealthChanged;\n        isAlive.OnValueChanged += OnAliveStateChanged;\n    }\n    \n    private void UnsubscribeFromEvents()\n    {\n        if (currentHealth != null) currentHealth.OnValueChanged -= OnCurrentHealthChanged;\n        if (maxHealth != null) maxHealth.OnValueChanged -= OnMaxHealthChanged;\n        if (isAlive != null) isAlive.OnValueChanged -= OnAliveStateChanged;\n    }\n    #endregion\n    \n    #region Public Interface\n    public void TakeDamage(int damage, string damageType = "generic")\n    {\n        if (!isAlive.Value || isInvulnerable.Value || damage <= 0)\n            return;\n            \n        // Store damage info\n        lastDamageAmount.SetValue(damage);\n        lastDamageTime.SetValue(Time.time);\n        \n        // Apply damage\n        int newHealth = Mathf.Max(0, currentHealth.Value - damage);\n        currentHealth.SetValue(newHealth);\n        \n        // Raise events\n        onDamageTaken.Raise(damage);\n        onDamageType.Raise(damageType);\n        \n        // Handle death\n        if (newHealth <= 0)\n        {\n            Die();\n        }\n        else\n        {\n            // Start invulnerability frames\n            StartInvulnerability();\n            \n            // Reset regeneration\n            StopRegeneration();\n            if (enableAutoRegen)\n                StartRegeneration();\n        }\n    }\n    \n    public void Heal(int healAmount)\n    {\n        if (!isAlive.Value || healAmount <= 0)\n            return;\n            \n        int newHealth = Mathf.Min(maxHealth.Value, currentHealth.Value + healAmount);\n        int actualHealAmount = newHealth - currentHealth.Value;\n        \n        if (actualHealAmount > 0)\n        {\n            currentHealth.SetValue(newHealth);\n            onHealthHealed.Raise(actualHealAmount);\n        }\n    }\n    \n    public void SetMaxHealth(int newMaxHealth)\n    {\n        if (newMaxHealth <= 0) return;\n        \n        int oldMax = maxHealth.Value;\n        maxHealth.SetValue(newMaxHealth);\n        \n        // Adjust current health proportionally\n        float healthRatio = (float)currentHealth.Value / oldMax;\n        int newCurrentHealth = Mathf.RoundToInt(newMaxHealth * healthRatio);\n        currentHealth.SetValue(newCurrentHealth);\n        \n        onMaxHealthChanged.Raise(newMaxHealth);\n    }\n    \n    public void Revive(int reviveHealth = -1)\n    {\n        if (isAlive.Value) return;\n        \n        if (reviveHealth == -1)\n            reviveHealth = maxHealth.Value;\n            \n        currentHealth.SetValue(Mathf.Min(reviveHealth, maxHealth.Value));\n        isAlive.SetValue(true);\n        \n        onPlayerRevived.Raise();\n    }\n    \n    public void SetInvulnerable(bool invulnerable)\n    {\n        isInvulnerable.SetValue(invulnerable);\n    }\n    #endregion\n    \n    #region Private Methods\n    private void Die()\n    {\n        if (!isAlive.Value) return;\n        \n        isAlive.SetValue(false);\n        StopRegeneration();\n        \n        onPlayerDied.Raise();\n    }\n    \n    private void StartInvulnerability()\n    {\n        if (invulnerabilityCoroutine != null)\n            StopCoroutine(invulnerabilityCoroutine);\n            \n        invulnerabilityCoroutine = StartCoroutine(InvulnerabilityCoroutine());\n    }\n    \n    private System.Collections.IEnumerator InvulnerabilityCoroutine()\n    {\n        isInvulnerable.SetValue(true);\n        yield return new WaitForSeconds(invulnerabilityDuration);\n        isInvulnerable.SetValue(false);\n    }\n    \n    private void StartRegeneration()\n    {\n        if (regenCoroutine != null)\n            StopCoroutine(regenCoroutine);\n            \n        regenCoroutine = StartCoroutine(RegenerationCoroutine());\n    }\n    \n    private void StopRegeneration()\n    {\n        if (regenCoroutine != null)\n        {\n            StopCoroutine(regenCoroutine);\n            regenCoroutine = null;\n        }\n        \n        if (isRegenerating.Value)\n        {\n            isRegenerating.SetValue(false);\n            onRegenStopped.Raise();\n        }\n    }\n    \n    private System.Collections.IEnumerator RegenerationCoroutine()\n    {\n        yield return new WaitForSeconds(regenDelay);\n        \n        if (!isRegenerating.Value)\n        {\n            isRegenerating.SetValue(true);\n            onRegenStarted.Raise();\n        }\n        \n        while (currentHealth.Value < maxHealth.Value && isAlive.Value)\n        {\n            int healAmount = Mathf.RoundToInt(regenRate.Value * Time.deltaTime);\n            if (healAmount > 0)\n                Heal(healAmount);\n                \n            yield return null;\n        }\n        \n        StopRegeneration();\n    }\n    \n    private void UpdateHealthPercentage()\n    {\n        float percentage = maxHealth.Value > 0 ? (float)currentHealth.Value / maxHealth.Value : 0f;\n        healthPercentage.SetValue(percentage);\n    }\n    #endregion\n    \n    #region Event Handlers\n    private void OnCurrentHealthChanged(int newHealth)\n    {\n        UpdateHealthPercentage();\n        onHealthChanged.Raise(newHealth);\n    }\n    \n    private void OnMaxHealthChanged(int newMaxHealth)\n    {\n        UpdateHealthPercentage();\n    }\n    \n    private void OnAliveStateChanged(bool alive)\n    {\n        if (!alive)\n        {\n            // Stop all health-related processes when dead\n            StopRegeneration();\n            if (invulnerabilityCoroutine != null)\n            {\n                StopCoroutine(invulnerabilityCoroutine);\n                isInvulnerable.SetValue(false);\n            }\n        }\n    }\n    #endregion\n    \n    #region Public Properties (for debugging)\n    public int CurrentHealth => currentHealth.Value;\n    public int MaxHealth => maxHealth.Value;\n    public float HealthPercentage => healthPercentage.Value;\n    public bool IsAlive => isAlive.Value;\n    public bool IsRegenerating => isRegenerating.Value;\n    public bool IsInvulnerable => isInvulnerable.Value;\n    #endregion\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ui-integration",children:"UI Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthUI.cs"',children:'using UnityEngine;\nusing UnityEngine.UI;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthUI : MonoBehaviour\n{\n    [Header("Health Variables")]\n    [SerializeField] private IntVariable currentHealth;\n    [SerializeField] private IntVariable maxHealth;\n    [SerializeField] private FloatVariable healthPercentage;\n    [SerializeField] private BoolVariable isAlive;\n    [SerializeField] private BoolVariable isRegenerating;\n    \n    [Header("Health Events")]\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private IntGameEvent onDamageTaken;\n    [SerializeField] private IntGameEvent onHealthHealed;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    [SerializeField] private UnitGameEvent onRegenStarted;\n    [SerializeField] private UnitGameEvent onRegenStopped;\n    \n    [Header("UI References")]\n    [SerializeField] private Slider healthSlider;\n    [SerializeField] private Text healthText;\n    [SerializeField] private Text maxHealthText;\n    [SerializeField] private Image healthFill;\n    [SerializeField] private Image regenIndicator;\n    [SerializeField] private GameObject gameOverPanel;\n    [SerializeField] private CanvasGroup damageFlash;\n    [SerializeField] private CanvasGroup healFlash;\n    \n    [Header("UI Settings")]\n    [SerializeField] private Color healthyColor = Color.green;\n    [SerializeField] private Color warnColor = Color.yellow;\n    [SerializeField] private Color dangerColor = Color.red;\n    [SerializeField] private float flashDuration = 0.5f;\n    [SerializeField] private AnimationCurve healthBarAnimation = AnimationCurve.EaseInOut(0, 0, 1, 1);\n    \n    private Coroutine healthBarCoroutine;\n    private Coroutine damageFlashCoroutine;\n    private Coroutine healFlashCoroutine;\n    \n    void OnEnable()\n    {\n        SubscribeToEvents();\n        UpdateUI();\n    }\n    \n    void OnDisable()\n    {\n        UnsubscribeFromEvents();\n    }\n    \n    #region Event Subscription\n    private void SubscribeToEvents()\n    {\n        onHealthChanged.AddListener(OnHealthChanged);\n        onDamageTaken.AddListener(OnDamageTaken);\n        onHealthHealed.AddListener(OnHealthHealed);\n        onPlayerDied.AddListener(OnPlayerDied);\n        onRegenStarted.AddListener(OnRegenStarted);\n        onRegenStopped.AddListener(OnRegenStopped);\n    }\n    \n    private void UnsubscribeFromEvents()\n    {\n        if (onHealthChanged != null) onHealthChanged.RemoveListener(OnHealthChanged);\n        if (onDamageTaken != null) onDamageTaken.RemoveListener(OnDamageTaken);\n        if (onHealthHealed != null) onHealthHealed.RemoveListener(OnHealthHealed);\n        if (onPlayerDied != null) onPlayerDied.RemoveListener(OnPlayerDied);\n        if (onRegenStarted != null) onRegenStarted.RemoveListener(OnRegenStarted);\n        if (onRegenStopped != null) onRegenStopped.RemoveListener(OnRegenStopped);\n    }\n    #endregion\n    \n    #region Event Handlers\n    private void OnHealthChanged(int newHealth)\n    {\n        UpdateUI();\n        AnimateHealthBar();\n    }\n    \n    private void OnDamageTaken(int damage)\n    {\n        ShowDamageFlash();\n        // Could also show damage numbers here\n    }\n    \n    private void OnHealthHealed(int healAmount)\n    {\n        ShowHealFlash();\n        // Could also show heal numbers here\n    }\n    \n    private void OnPlayerDied()\n    {\n        ShowGameOverPanel();\n    }\n    \n    private void OnRegenStarted()\n    {\n        if (regenIndicator != null)\n            regenIndicator.gameObject.SetActive(true);\n    }\n    \n    private void OnRegenStopped()\n    {\n        if (regenIndicator != null)\n            regenIndicator.gameObject.SetActive(false);\n    }\n    #endregion\n    \n    #region UI Updates\n    private void UpdateUI()\n    {\n        // Update text\n        if (healthText != null)\n            healthText.text = currentHealth.Value.ToString();\n            \n        if (maxHealthText != null)\n            maxHealthText.text = $"/ {maxHealth.Value}";\n        \n        // Update health fill color\n        if (healthFill != null)\n        {\n            float percentage = healthPercentage.Value;\n            if (percentage > 0.6f)\n                healthFill.color = Color.Lerp(warnColor, healthyColor, (percentage - 0.6f) / 0.4f);\n            else if (percentage > 0.3f)\n                healthFill.color = Color.Lerp(dangerColor, warnColor, (percentage - 0.3f) / 0.3f);\n            else\n                healthFill.color = dangerColor;\n        }\n    }\n    \n    private void AnimateHealthBar()\n    {\n        if (healthSlider == null) return;\n        \n        if (healthBarCoroutine != null)\n            StopCoroutine(healthBarCoroutine);\n            \n        healthBarCoroutine = StartCoroutine(AnimateHealthBarCoroutine());\n    }\n    \n    private System.Collections.IEnumerator AnimateHealthBarCoroutine()\n    {\n        float startValue = healthSlider.value;\n        float targetValue = healthPercentage.Value;\n        float duration = 0.5f;\n        float elapsed = 0f;\n        \n        while (elapsed < duration)\n        {\n            elapsed += Time.deltaTime;\n            float t = elapsed / duration;\n            float easedT = healthBarAnimation.Evaluate(t);\n            \n            healthSlider.value = Mathf.Lerp(startValue, targetValue, easedT);\n            yield return null;\n        }\n        \n        healthSlider.value = targetValue;\n    }\n    \n    private void ShowDamageFlash()\n    {\n        if (damageFlash == null) return;\n        \n        if (damageFlashCoroutine != null)\n            StopCoroutine(damageFlashCoroutine);\n            \n        damageFlashCoroutine = StartCoroutine(FlashCoroutine(damageFlash, flashDuration));\n    }\n    \n    private void ShowHealFlash()\n    {\n        if (healFlash == null) return;\n        \n        if (healFlashCoroutine != null)\n            StopCoroutine(healFlashCoroutine);\n            \n        healFlashCoroutine = StartCoroutine(FlashCoroutine(healFlash, flashDuration));\n    }\n    \n    private System.Collections.IEnumerator FlashCoroutine(CanvasGroup flashGroup, float duration)\n    {\n        flashGroup.alpha = 1f;\n        float elapsed = 0f;\n        \n        while (elapsed < duration)\n        {\n            elapsed += Time.deltaTime;\n            flashGroup.alpha = Mathf.Lerp(1f, 0f, elapsed / duration);\n            yield return null;\n        }\n        \n        flashGroup.alpha = 0f;\n    }\n    \n    private void ShowGameOverPanel()\n    {\n        if (gameOverPanel != null)\n            gameOverPanel.SetActive(true);\n    }\n    #endregion\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"audio-integration",children:"Audio Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthAudioManager.cs"',children:'using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthAudioManager : MonoBehaviour\n{\n    [Header("Events")]\n    [SerializeField] private IntGameEvent onDamageTaken;\n    [SerializeField] private IntGameEvent onHealthHealed;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    [SerializeField] private StringGameEvent onDamageType;\n    [SerializeField] private FloatGameEvent onHealthPercentageChanged;\n    \n    [Header("Audio Sources")]\n    [SerializeField] private AudioSource sfxSource;\n    [SerializeField] private AudioSource musicSource;\n    [SerializeField] private AudioSource ambientSource;\n    \n    [Header("Health Sounds")]\n    [SerializeField] private AudioClip[] damageSounds;\n    [SerializeField] private AudioClip[] healSounds;\n    [SerializeField] private AudioClip deathSound;\n    [SerializeField] private AudioClip criticalHealthMusic;\n    [SerializeField] private AudioClip heartbeatSound;\n    \n    [Header("Damage Type Sounds")]\n    [SerializeField] private DamageTypeSound[] damageTypeSounds;\n    \n    [Header("Settings")]\n    [SerializeField] private float criticalHealthThreshold = 0.3f;\n    [SerializeField] private float heartbeatVolume = 0.5f;\n    \n    private bool isPlayingCriticalMusic = false;\n    private Coroutine heartbeatCoroutine;\n    \n    void OnEnable()\n    {\n        SubscribeToEvents();\n    }\n    \n    void OnDisable()\n    {\n        UnsubscribeFromEvents();\n    }\n    \n    #region Event Subscription\n    private void SubscribeToEvents()\n    {\n        onDamageTaken.AddListener(OnDamageTaken);\n        onHealthHealed.AddListener(OnHealthHealed);\n        onPlayerDied.AddListener(OnPlayerDied);\n        onDamageType.AddListener(OnDamageType);\n        onHealthPercentageChanged.AddListener(OnHealthPercentageChanged);\n    }\n    \n    private void UnsubscribeFromEvents()\n    {\n        if (onDamageTaken != null) onDamageTaken.RemoveListener(OnDamageTaken);\n        if (onHealthHealed != null) onHealthHealed.RemoveListener(OnHealthHealed);\n        if (onPlayerDied != null) onPlayerDied.RemoveListener(OnPlayerDied);\n        if (onDamageType != null) onDamageType.RemoveListener(OnDamageType);\n        if (onHealthPercentageChanged != null) onHealthPercentageChanged.RemoveListener(OnHealthPercentageChanged);\n    }\n    #endregion\n    \n    #region Event Handlers\n    private void OnDamageTaken(int damage)\n    {\n        if (damageSounds.Length > 0 && sfxSource != null)\n        {\n            var randomSound = damageSounds[Random.Range(0, damageSounds.Length)];\n            sfxSource.PlayOneShot(randomSound);\n        }\n    }\n    \n    private void OnHealthHealed(int healAmount)\n    {\n        if (healSounds.Length > 0 && sfxSource != null)\n        {\n            var randomSound = healSounds[Random.Range(0, healSounds.Length)];\n            sfxSource.PlayOneShot(randomSound);\n        }\n    }\n    \n    private void OnPlayerDied()\n    {\n        StopCriticalHealthAudio();\n        \n        if (deathSound != null && sfxSource != null)\n        {\n            sfxSource.PlayOneShot(deathSound);\n        }\n    }\n    \n    private void OnDamageType(string damageType)\n    {\n        var typeSound = System.Array.Find(damageTypeSounds, x => x.damageType == damageType);\n        if (typeSound != null && typeSound.sound != null && sfxSource != null)\n        {\n            sfxSource.PlayOneShot(typeSound.sound);\n        }\n    }\n    \n    private void OnHealthPercentageChanged(float percentage)\n    {\n        if (percentage <= criticalHealthThreshold)\n        {\n            StartCriticalHealthAudio();\n        }\n        else\n        {\n            StopCriticalHealthAudio();\n        }\n    }\n    #endregion\n    \n    #region Critical Health Audio\n    private void StartCriticalHealthAudio()\n    {\n        if (isPlayingCriticalMusic) return;\n        \n        isPlayingCriticalMusic = true;\n        \n        // Play critical health music\n        if (criticalHealthMusic != null && musicSource != null)\n        {\n            musicSource.clip = criticalHealthMusic;\n            musicSource.loop = true;\n            musicSource.Play();\n        }\n        \n        // Start heartbeat sound\n        if (heartbeatCoroutine != null)\n            StopCoroutine(heartbeatCoroutine);\n        heartbeatCoroutine = StartCoroutine(HeartbeatCoroutine());\n    }\n    \n    private void StopCriticalHealthAudio()\n    {\n        if (!isPlayingCriticalMusic) return;\n        \n        isPlayingCriticalMusic = false;\n        \n        // Stop critical music\n        if (musicSource != null && musicSource.clip == criticalHealthMusic)\n        {\n            musicSource.Stop();\n        }\n        \n        // Stop heartbeat\n        if (heartbeatCoroutine != null)\n        {\n            StopCoroutine(heartbeatCoroutine);\n            heartbeatCoroutine = null;\n        }\n    }\n    \n    private System.Collections.IEnumerator HeartbeatCoroutine()\n    {\n        while (isPlayingCriticalMusic)\n        {\n            if (heartbeatSound != null && ambientSource != null)\n            {\n                ambientSource.PlayOneShot(heartbeatSound, heartbeatVolume);\n            }\n            \n            yield return new WaitForSeconds(1.2f); // Heartbeat interval\n        }\n    }\n    #endregion\n}\n\n[System.Serializable]\npublic class DamageTypeSound\n{\n    public string damageType;\n    public AudioClip sound;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"debug-integration",children:"Debug Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthDebugger.cs"',children:'using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\n#if UNITY_EDITOR\nusing UnityEditor;\n#endif\n\npublic class HealthDebugger : MonoBehaviour\n{\n    [Header("References")]\n    [SerializeField] private HealthSystem healthSystem;\n    \n    [Header("Debug Variables")]\n    [SerializeField] private IntVariable debugDamageAmount;\n    [SerializeField] private IntVariable debugHealAmount;\n    [SerializeField] private StringVariable debugDamageType;\n    \n    [Header("Quick Test Values")]\n    [SerializeField] private int quickDamage = 25;\n    [SerializeField] private int quickHeal = 15;\n    [SerializeField] private string quickDamageType = "debug";\n    \n    void Update()\n    {\n        if (!Application.isPlaying) return;\n        \n        // Keyboard shortcuts for testing\n        if (Input.GetKeyDown(KeyCode.H))\n            TestHeal();\n            \n        if (Input.GetKeyDown(KeyCode.J))\n            TestDamage();\n            \n        if (Input.GetKeyDown(KeyCode.K))\n            TestKill();\n            \n        if (Input.GetKeyDown(KeyCode.L))\n            TestRevive();\n    }\n    \n    #region Public Debug Methods\n    [ContextMenu("Test Damage")]\n    public void TestDamage()\n    {\n        if (healthSystem != null)\n        {\n            int damage = debugDamageAmount != null ? debugDamageAmount.Value : quickDamage;\n            string damageType = debugDamageType != null ? debugDamageType.Value : quickDamageType;\n            \n            healthSystem.TakeDamage(damage, damageType);\n            Debug.Log($"Debug: Applied {damage} {damageType} damage");\n        }\n    }\n    \n    [ContextMenu("Test Heal")]\n    public void TestHeal()\n    {\n        if (healthSystem != null)\n        {\n            int heal = debugHealAmount != null ? debugHealAmount.Value : quickHeal;\n            \n            healthSystem.Heal(heal);\n            Debug.Log($"Debug: Applied {heal} healing");\n        }\n    }\n    \n    [ContextMenu("Test Kill")]\n    public void TestKill()\n    {\n        if (healthSystem != null)\n        {\n            healthSystem.TakeDamage(9999, "debug_kill");\n            Debug.Log("Debug: Killed player");\n        }\n    }\n    \n    [ContextMenu("Test Revive")]\n    public void TestRevive()\n    {\n        if (healthSystem != null)\n        {\n            healthSystem.Revive();\n            Debug.Log("Debug: Revived player");\n        }\n    }\n    \n    [ContextMenu("Test Invulnerability")]\n    public void TestInvulnerability()\n    {\n        if (healthSystem != null)\n        {\n            healthSystem.SetInvulnerable(!healthSystem.IsInvulnerable);\n            Debug.Log($"Debug: Invulnerability {(healthSystem.IsInvulnerable ? "enabled" : "disabled")}");\n        }\n    }\n    \n    [ContextMenu("Log Health Status")]\n    public void LogHealthStatus()\n    {\n        if (healthSystem != null)\n        {\n            Debug.Log($"Health Status: {healthSystem.CurrentHealth}/{healthSystem.MaxHealth} " +\n                     $"({healthSystem.HealthPercentage:P0}) - Alive: {healthSystem.IsAlive} - " +\n                     $"Regen: {healthSystem.IsRegenerating} - Invuln: {healthSystem.IsInvulnerable}");\n        }\n    }\n    #endregion\n    \n    #region Editor GUI\n    #if UNITY_EDITOR\n    void OnGUI()\n    {\n        if (!Application.isPlaying) return;\n        \n        GUILayout.BeginArea(new Rect(10, 10, 200, 300));\n        GUILayout.Label("Health System Debug", EditorStyles.boldLabel);\n        \n        if (healthSystem != null)\n        {\n            GUILayout.Label($"Health: {healthSystem.CurrentHealth}/{healthSystem.MaxHealth}");\n            GUILayout.Label($"Percentage: {healthSystem.HealthPercentage:P1}");\n            GUILayout.Label($"Alive: {healthSystem.IsAlive}");\n            GUILayout.Label($"Regenerating: {healthSystem.IsRegenerating}");\n            GUILayout.Label($"Invulnerable: {healthSystem.IsInvulnerable}");\n            \n            GUILayout.Space(10);\n            \n            if (GUILayout.Button("Damage 25"))\n                TestDamage();\n                \n            if (GUILayout.Button("Heal 15"))\n                TestHeal();\n                \n            if (GUILayout.Button("Kill"))\n                TestKill();\n                \n            if (GUILayout.Button("Revive"))\n                TestRevive();\n                \n            if (GUILayout.Button("Toggle Invuln"))\n                TestInvulnerability();\n        }\n        else\n        {\n            GUILayout.Label("No HealthSystem found!");\n        }\n        \n        GUILayout.EndArea();\n    }\n    #endif\n    #endregion\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"scene-setup",children:"Scene Setup"}),"\n",(0,i.jsx)(n.h3,{id:"gameobject-hierarchy",children:"GameObject Hierarchy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Player\n\u251c\u2500\u2500 HealthSystem (HealthSystem script)\n\u251c\u2500\u2500 HealthDebugger (HealthDebugger script)\n\u2514\u2500\u2500 Audio\n    \u251c\u2500\u2500 SFX (AudioSource for sound effects)\n    \u251c\u2500\u2500 Music (AudioSource for music)\n    \u2514\u2500\u2500 Ambient (AudioSource for ambient sounds like heartbeat)\n\nCanvas\n\u251c\u2500\u2500 HealthUI (HealthUI script)\n\u251c\u2500\u2500 HealthBar (UI Slider)\n\u251c\u2500\u2500 HealthText (UI Text)\n\u251c\u2500\u2500 DamageFlash (UI Image with CanvasGroup)\n\u251c\u2500\u2500 HealFlash (UI Image with CanvasGroup)\n\u2514\u2500\u2500 GameOverPanel (UI Panel)\n\nManagers\n\u2514\u2500\u2500 HealthAudioManager (HealthAudioManager script)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variable-assignment",children:"Variable Assignment"}),"\n",(0,i.jsx)(n.p,{children:"Connect all the ScriptableObject assets you created to the appropriate script fields in the inspector."}),"\n",(0,i.jsx)(n.h2,{id:"testing--validation",children:"Testing & Validation"}),"\n",(0,i.jsx)(n.h3,{id:"manual-testing-checklist",children:"Manual Testing Checklist"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Basic Functionality:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Player takes damage correctly"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Health UI updates in real-time"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Damage sounds play"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Player dies at 0 health"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Death UI appears"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Player can be revived"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Edge Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Damage while invulnerable is ignored"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Healing when at full health is ignored"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Negative damage values are handled"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Extremely large damage values work"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Regeneration stops when taking damage"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Regeneration starts after delay"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Integration Testing:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 All systems react to health events"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Debug window shows all variables updating"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 No memory leaks from event subscriptions"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Performance remains stable"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"automated-tests",children:"Automated Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthSystemTests.cs"',children:'using NUnit.Framework;\nusing UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\n[TestFixture]\npublic class HealthSystemTests\n{\n    private GameObject testObject;\n    private HealthSystem healthSystem;\n    private IntVariable health;\n    private IntVariable maxHealth;\n    private UnitGameEvent onDied;\n    \n    [SetUp]\n    public void Setup()\n    {\n        testObject = new GameObject("TestHealthSystem");\n        healthSystem = testObject.AddComponent<HealthSystem>();\n        \n        health = ScriptableObject.CreateInstance<IntVariable>();\n        maxHealth = ScriptableObject.CreateInstance<IntVariable>();\n        onDied = ScriptableObject.CreateInstance<UnitGameEvent>();\n        \n        health.SetValue(100);\n        maxHealth.SetValue(100);\n        \n        // Setup healthSystem with test variables\n        // (This requires exposing fields or using reflection)\n    }\n    \n    [TearDown]\n    public void Teardown()\n    {\n        if (testObject != null)\n            Object.DestroyImmediate(testObject);\n            \n        Object.DestroyImmediate(health);\n        Object.DestroyImmediate(maxHealth);\n        Object.DestroyImmediate(onDied);\n    }\n    \n    [Test]\n    public void TestBasicDamage()\n    {\n        // Arrange\n        int initialHealth = 100;\n        int damage = 25;\n        \n        // Act\n        healthSystem.TakeDamage(damage);\n        \n        // Assert\n        Assert.AreEqual(initialHealth - damage, health.Value);\n        Assert.IsTrue(healthSystem.IsAlive);\n    }\n    \n    [Test]\n    public void TestDeath()\n    {\n        // Arrange\n        bool playerDied = false;\n        onDied.AddListener(() => playerDied = true);\n        \n        // Act\n        healthSystem.TakeDamage(150); // More than max health\n        \n        // Assert\n        Assert.AreEqual(0, health.Value);\n        Assert.IsFalse(healthSystem.IsAlive);\n        Assert.IsTrue(playerDied);\n    }\n    \n    [Test]\n    public void TestHealing()\n    {\n        // Arrange\n        healthSystem.TakeDamage(50); // Health = 50\n        \n        // Act\n        healthSystem.Heal(25);\n        \n        // Assert\n        Assert.AreEqual(75, health.Value);\n    }\n    \n    [Test]\n    public void TestInvulnerability()\n    {\n        // Arrange\n        healthSystem.SetInvulnerable(true);\n        \n        // Act\n        healthSystem.TakeDamage(50);\n        \n        // Assert\n        Assert.AreEqual(100, health.Value); // No damage taken\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"optimization-tips",children:"Optimization Tips"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Frequency:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Only raise events when values actually change\nprivate void OnCurrentHealthChanged(int newHealth)\n{\n    if (newHealth != healthPercentage.Value)\n    {\n        UpdateHealthPercentage();\n        onHealthChanged.Raise(newHealth);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Memory Management:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Proper cleanup\nvoid OnDestroy()\n{\n    // Stop all coroutines\n    if (regenCoroutine != null)\n        StopCoroutine(regenCoroutine);\n        \n    // Unsubscribe from events\n    UnsubscribeFromEvents();\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"UI Performance:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Update UI only when needed\nprivate void OnHealthChanged(int newHealth)\n{\n    // Cache to avoid repeated calculations\n    if (newHealth != cachedHealthValue)\n    {\n        cachedHealthValue = newHealth;\n        UpdateUI();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"extensions--variations",children:"Extensions & Variations"}),"\n",(0,i.jsx)(n.h3,{id:"armor-system-integration",children:"Armor System Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public void TakeDamage(int damage, string damageType = "generic")\n{\n    // Apply armor reduction before damage\n    if (armorVariable != null)\n    {\n        damage = armorVariable.CalculateDamageReduction(damage, damageType);\n    }\n    \n    // Proceed with normal damage logic...\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-health-types",children:"Multiple Health Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Create separate health systems for:\n// - Physical Health\n// - Mental Health  \n// - Stamina\n// Each with their own variables, events, and regeneration\n"})}),"\n",(0,i.jsx)(n.h3,{id:"temporary-health-buffs",children:"Temporary Health Buffs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public void AddTemporaryMaxHealth(int bonus, float duration)\n{\n    var originalMax = maxHealth.Value;\n    SetMaxHealth(originalMax + bonus);\n    \n    StartCoroutine(RemoveTemporaryHealthAfterDelay(originalMax, duration));\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This complete health system demonstrates SoapKit's power in creating professional, maintainable game systems. The decoupled architecture allows each component (UI, Audio, Effects) to operate independently while staying synchronized through events. \ud83c\udfae\ud83d\udcaa"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Takeaways:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Variables provide centralized, debuggable state"}),"\n",(0,i.jsx)(n.li,{children:"Events enable loose coupling between systems"}),"\n",(0,i.jsx)(n.li,{children:"Professional debugging tools accelerate development"}),"\n",(0,i.jsx)(n.li,{children:"The system scales easily with new features"}),"\n",(0,i.jsx)(n.li,{children:"Testing is straightforward with isolated components"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./inventory-system",children:"Inventory System Example"})," - Build a complete inventory system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./ui-integration",children:"UI Integration Example"})," - Advanced UI patterns with SoapKit"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./state-management",children:"State Management Example"})," - Game state architecture patterns"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);