"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[1084],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(6540);const a={},r=i.createContext(a);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"examples/inventory-system","title":"Inventory System Example","description":"A complete inventory system implementation using SoapKit\'s event-driven architecture.","source":"@site/docs/examples/inventory-system.md","sourceDirName":"examples","slug":"/examples/inventory-system","permalink":"/SoapKit-Doc/docs/examples/inventory-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/inventory-system.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Complete Health System","permalink":"/SoapKit-Doc/docs/examples/health-system"},"next":{"title":"UI Integration Examples","permalink":"/SoapKit-Doc/docs/examples/ui-integration"}}');var a=t(4848),r=t(8453);const l={},s="Inventory System Example",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Item Data Structure",id:"item-data-structure",level:3},{value:"Inventory Variables",id:"inventory-variables",level:3},{value:"Inventory Events",id:"inventory-events",level:3},{value:"Inventory System Implementation",id:"inventory-system-implementation",level:2},{value:"Core Inventory Manager",id:"core-inventory-manager",level:3},{value:"Item Pickup System",id:"item-pickup-system",level:3},{value:"UI Integration",id:"ui-integration",level:2},{value:"Inventory UI Manager",id:"inventory-ui-manager",level:3},{value:"Individual Slot UI",id:"individual-slot-ui",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Setting Up the System",id:"setting-up-the-system",level:3},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:3},{value:"Benefits of This Approach",id:"benefits-of-this-approach",level:2},{value:"Next Steps",id:"next-steps",level:2}];function v(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"inventory-system-example",children:"Inventory System Example"})}),"\n",(0,a.jsx)(n.p,{children:"A complete inventory system implementation using SoapKit's event-driven architecture."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"This example demonstrates how to build a flexible inventory system that manages items, handles pickup/drop events, and provides UI integration using SoapKit variables and events."}),"\n",(0,a.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,a.jsx)(n.h3,{id:"item-data-structure",children:"Item Data Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[System.Serializable]\npublic class Item\n{\n    public int id;\n    public string name;\n    public string description;\n    public Sprite icon;\n    public int maxStackSize = 1;\n    public ItemType type;\n}\n\npublic enum ItemType\n{\n    Consumable,\n    Equipment,\n    Quest,\n    Material\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inventory-variables",children:"Inventory Variables"}),"\n",(0,a.jsx)(n.p,{children:"Create these ScriptableObject assets in your project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Create via: Create > SoapKit > Variables > Int Variable\n[SerializeField] private IntVariable inventoryCapacity;\n[SerializeField] private IntVariable currentItemCount;\n\n// Create via: Create > SoapKit > Variables > String Variable  \n[SerializeField] private StringVariable lastPickedUpItem;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inventory-events",children:"Inventory Events"}),"\n",(0,a.jsx)(n.p,{children:"Create these event assets:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Create via: Create > SoapKit > Events > Custom Events\n[CreateAssetMenu(menuName = "SoapKit/Events/Item Event")]\npublic class ItemEvent : GameEvent<Item> { }\n\n[CreateAssetMenu(menuName = "SoapKit/Events/Inventory Event")]\npublic class InventoryEvent : GameEvent<InventoryEventArgs> { }\n\n[System.Serializable]\npublic class InventoryEventArgs\n{\n    public Item item;\n    public int quantity;\n    public int slotIndex;\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"inventory-system-implementation",children:"Inventory System Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"core-inventory-manager",children:"Core Inventory Manager"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class InventoryManager : MonoBehaviour\n{\n    [Header("Variables")]\n    [SerializeField] private IntVariable inventoryCapacity;\n    [SerializeField] private IntVariable currentItemCount;\n    [SerializeField] private StringVariable lastPickedUpItem;\n    \n    [Header("Events")]\n    [SerializeField] private ItemEvent onItemAdded;\n    [SerializeField] private ItemEvent onItemRemoved;\n    [SerializeField] private InventoryEvent onInventoryChanged;\n    [SerializeField] private GameEvent onInventoryFull;\n    \n    private Dictionary<int, InventorySlot> inventory = new Dictionary<int, InventorySlot>();\n    \n    private void Start()\n    {\n        InitializeInventory();\n    }\n    \n    private void InitializeInventory()\n    {\n        // Initialize empty inventory slots\n        for (int i = 0; i < inventoryCapacity.Value; i++)\n        {\n            inventory[i] = new InventorySlot();\n        }\n        \n        UpdateItemCount();\n    }\n    \n    public bool TryAddItem(Item item, int quantity = 1)\n    {\n        // Try to stack with existing items first\n        if (TryStackItem(item, quantity))\n        {\n            return true;\n        }\n        \n        // Find empty slot\n        int emptySlot = FindEmptySlot();\n        if (emptySlot == -1)\n        {\n            onInventoryFull.Raise();\n            return false;\n        }\n        \n        // Add to empty slot\n        inventory[emptySlot].item = item;\n        inventory[emptySlot].quantity = quantity;\n        \n        // Update tracking variables\n        lastPickedUpItem.SetValue(item.name);\n        UpdateItemCount();\n        \n        // Raise events\n        onItemAdded.Raise(item);\n        RaiseInventoryChangedEvent(item, quantity, emptySlot);\n        \n        return true;\n    }\n    \n    public bool TryRemoveItem(int slotIndex, int quantity = 1)\n    {\n        if (!inventory.ContainsKey(slotIndex) || inventory[slotIndex].IsEmpty)\n        {\n            return false;\n        }\n        \n        var slot = inventory[slotIndex];\n        Item removedItem = slot.item;\n        \n        slot.quantity -= quantity;\n        \n        if (slot.quantity <= 0)\n        {\n            slot.Clear();\n        }\n        \n        UpdateItemCount();\n        onItemRemoved.Raise(removedItem);\n        RaiseInventoryChangedEvent(removedItem, -quantity, slotIndex);\n        \n        return true;\n    }\n    \n    private bool TryStackItem(Item item, int quantity)\n    {\n        foreach (var kvp in inventory)\n        {\n            var slot = kvp.Value;\n            if (slot.item != null && slot.item.id == item.id)\n            {\n                int spaceAvailable = item.maxStackSize - slot.quantity;\n                if (spaceAvailable > 0)\n                {\n                    int amountToAdd = Mathf.Min(quantity, spaceAvailable);\n                    slot.quantity += amountToAdd;\n                    \n                    UpdateItemCount();\n                    RaiseInventoryChangedEvent(item, amountToAdd, kvp.Key);\n                    \n                    return amountToAdd == quantity;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private int FindEmptySlot()\n    {\n        foreach (var kvp in inventory)\n        {\n            if (kvp.Value.IsEmpty)\n            {\n                return kvp.Key;\n            }\n        }\n        return -1;\n    }\n    \n    private void UpdateItemCount()\n    {\n        int totalItems = 0;\n        foreach (var slot in inventory.Values)\n        {\n            if (!slot.IsEmpty)\n            {\n                totalItems += slot.quantity;\n            }\n        }\n        currentItemCount.SetValue(totalItems);\n    }\n    \n    private void RaiseInventoryChangedEvent(Item item, int quantity, int slotIndex)\n    {\n        var args = new InventoryEventArgs\n        {\n            item = item,\n            quantity = quantity,\n            slotIndex = slotIndex\n        };\n        onInventoryChanged.Raise(args);\n    }\n    \n    public InventorySlot GetSlot(int index)\n    {\n        return inventory.TryGetValue(index, out var slot) ? slot : null;\n    }\n}\n\n[System.Serializable]\npublic class InventorySlot\n{\n    public Item item;\n    public int quantity;\n    \n    public bool IsEmpty => item == null || quantity <= 0;\n    \n    public void Clear()\n    {\n        item = null;\n        quantity = 0;\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"item-pickup-system",children:"Item Pickup System"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class ItemPickup : MonoBehaviour\n{\n    [SerializeField] private Item itemData;\n    [SerializeField] private int quantity = 1;\n    [SerializeField] private ItemEvent onItemPickedUp;\n    \n    private void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag("Player"))\n        {\n            var inventory = FindObjectOfType<InventoryManager>();\n            if (inventory != null && inventory.TryAddItem(itemData, quantity))\n            {\n                onItemPickedUp?.Raise(itemData);\n                Destroy(gameObject);\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ui-integration",children:"UI Integration"}),"\n",(0,a.jsx)(n.h3,{id:"inventory-ui-manager",children:"Inventory UI Manager"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\n\npublic class InventoryUI : MonoBehaviour\n{\n    [Header("Variables")]\n    [SerializeField] private IntVariable currentItemCount;\n    [SerializeField] private IntVariable inventoryCapacity;\n    [SerializeField] private StringVariable lastPickedUpItem;\n    \n    [Header("Events")]\n    [SerializeField] private InventoryEvent onInventoryChanged;\n    [SerializeField] private GameEvent onInventoryFull;\n    \n    [Header("UI Elements")]\n    [SerializeField] private TextMeshProUGUI itemCountText;\n    [SerializeField] private TextMeshProUGUI lastPickupText;\n    [SerializeField] private GameObject fullInventoryWarning;\n    [SerializeField] private InventorySlotUI[] slotUIs;\n    \n    private InventoryManager inventoryManager;\n    \n    private void Start()\n    {\n        inventoryManager = FindObjectOfType<InventoryManager>();\n        InitializeUI();\n    }\n    \n    private void OnEnable()\n    {\n        // Subscribe to variable changes\n        currentItemCount.OnValueChanged += UpdateItemCountDisplay;\n        lastPickedUpItem.OnValueChanged += UpdateLastPickupDisplay;\n        \n        // Subscribe to events\n        onInventoryChanged.AddListener(UpdateSlotDisplay);\n        onInventoryFull.AddListener(ShowInventoryFullWarning);\n    }\n    \n    private void OnDisable()\n    {\n        // Unsubscribe from variable changes\n        currentItemCount.OnValueChanged -= UpdateItemCountDisplay;\n        lastPickedUpItem.OnValueChanged -= UpdateLastPickupDisplay;\n        \n        // Unsubscribe from events\n        onInventoryChanged.RemoveListener(UpdateSlotDisplay);\n        onInventoryFull.RemoveListener(ShowInventoryFullWarning);\n    }\n    \n    private void InitializeUI()\n    {\n        UpdateItemCountDisplay(currentItemCount.Value);\n        UpdateLastPickupDisplay(lastPickedUpItem.Value);\n        \n        // Initialize all slots\n        for (int i = 0; i < slotUIs.Length; i++)\n        {\n            UpdateSlotUI(i);\n        }\n    }\n    \n    private void UpdateItemCountDisplay(int newCount)\n    {\n        itemCountText.text = $"{newCount}/{inventoryCapacity.Value}";\n    }\n    \n    private void UpdateLastPickupDisplay(string itemName)\n    {\n        if (!string.IsNullOrEmpty(itemName))\n        {\n            lastPickupText.text = $"Picked up: {itemName}";\n            // Hide after a few seconds\n            Invoke(nameof(ClearLastPickupText), 3f);\n        }\n    }\n    \n    private void ClearLastPickupText()\n    {\n        lastPickupText.text = "";\n    }\n    \n    private void UpdateSlotDisplay(InventoryEventArgs args)\n    {\n        UpdateSlotUI(args.slotIndex);\n    }\n    \n    private void UpdateSlotUI(int slotIndex)\n    {\n        if (slotIndex < 0 || slotIndex >= slotUIs.Length) return;\n        \n        var slot = inventoryManager.GetSlot(slotIndex);\n        var slotUI = slotUIs[slotIndex];\n        \n        if (slot.IsEmpty)\n        {\n            slotUI.ClearSlot();\n        }\n        else\n        {\n            slotUI.SetSlot(slot.item, slot.quantity);\n        }\n    }\n    \n    private void ShowInventoryFullWarning()\n    {\n        fullInventoryWarning.SetActive(true);\n        Invoke(nameof(HideInventoryFullWarning), 2f);\n    }\n    \n    private void HideInventoryFullWarning()\n    {\n        fullInventoryWarning.SetActive(false);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"individual-slot-ui",children:"Individual Slot UI"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\n\npublic class InventorySlotUI : MonoBehaviour\n{\n    [SerializeField] private Image itemIcon;\n    [SerializeField] private TextMeshProUGUI quantityText;\n    [SerializeField] private Button slotButton;\n    \n    private Item currentItem;\n    private int currentQuantity;\n    \n    private void Start()\n    {\n        slotButton.onClick.AddListener(OnSlotClicked);\n    }\n    \n    public void SetSlot(Item item, int quantity)\n    {\n        currentItem = item;\n        currentQuantity = quantity;\n        \n        itemIcon.sprite = item.icon;\n        itemIcon.enabled = true;\n        \n        quantityText.text = quantity > 1 ? quantity.ToString() : "";\n        quantityText.enabled = quantity > 1;\n    }\n    \n    public void ClearSlot()\n    {\n        currentItem = null;\n        currentQuantity = 0;\n        \n        itemIcon.sprite = null;\n        itemIcon.enabled = false;\n        \n        quantityText.text = "";\n        quantityText.enabled = false;\n    }\n    \n    private void OnSlotClicked()\n    {\n        if (currentItem != null)\n        {\n            // Handle slot interaction (use item, move item, etc.)\n            Debug.Log($"Clicked on {currentItem.name} (x{currentQuantity})");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-the-system",children:"Setting Up the System"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Create Variables"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Variables > Int Variable (name: "InventoryCapacity", set to 20)'}),"\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Variables > Int Variable (name: "CurrentItemCount", set to 0)'}),"\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Variables > String Variable (name: "LastPickedUpItem")'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Create Events"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Events > Custom > Item Event (name: "OnItemAdded")'}),"\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Events > Custom > Item Event (name: "OnItemRemoved")'}),"\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Events > Custom > Inventory Event (name: "OnInventoryChanged")'}),"\n",(0,a.jsx)(n.li,{children:'Create > SoapKit > Events > Unit Event (name: "OnInventoryFull")'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Assign References"}),": Wire up the InventoryManager and InventoryUI components with the created assets."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,a.jsx)(n.p,{children:"The inventory system integrates seamlessly with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./health-system",children:"Health System"})," - For consumable items"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./ui-integration",children:"UI Integration"})," - For display components"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./state-management",children:"State Management"})," - For save/load functionality"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"benefits-of-this-approach",children:"Benefits of This Approach"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decoupled Design"}),": UI updates automatically when inventory changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event-Driven"}),": Systems communicate through events, not direct references"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Debuggable"}),": Use SoapKit Debug Window to monitor inventory state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Extensible"}),": Easy to add new item types and behaviors"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Reusable"}),": Components can be used across different scenes"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"./ui-integration",children:"UI Integration"})," patterns"]}),"\n",(0,a.jsxs)(n.li,{children:["Learn about ",(0,a.jsx)(n.a,{href:"./state-management",children:"State Management"})," for persistence"]}),"\n",(0,a.jsxs)(n.li,{children:["Check out advanced ",(0,a.jsx)(n.a,{href:"./health-system",children:"Health System"})," integration"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}}}]);