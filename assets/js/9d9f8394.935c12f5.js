"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[9013],{7309:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting Guide","description":"This guide helps you diagnose and solve common issues when working with SoapKit. We\'ve organized solutions by symptoms and provide step-by-step debugging approaches.","source":"@site/docs/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/SoapKit-Doc/docs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/troubleshooting.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Troubleshooting Guide","sidebar_position":10},"sidebar":"docsSidebar","previous":{"title":"Migration Guide","permalink":"/SoapKit-Doc/docs/migration"}}');var r=s(4848),t=s(8453);const l={title:"Troubleshooting Guide",sidebar_position:10},a="Troubleshooting Guide",o={},c=[{value:"Quick Diagnosis Checklist",id:"quick-diagnosis-checklist",level:2},{value:"Installation Issues",id:"installation-issues",level:2},{value:"SoapKit Menu Items Missing",id:"soapkit-menu-items-missing",level:3},{value:"Package Manager Installation Failed",id:"package-manager-installation-failed",level:3},{value:"Runtime Issues",id:"runtime-issues",level:2},{value:"Variables Not Updating in Inspector",id:"variables-not-updating-in-inspector",level:3},{value:"Events Not Firing",id:"events-not-firing",level:3},{value:"Memory Leaks",id:"memory-leaks",level:3},{value:"Performance Issues",id:"performance-issues",level:2},{value:"Slow Event Performance",id:"slow-event-performance",level:3},{value:"High Memory Usage",id:"high-memory-usage",level:3},{value:"Editor Issues",id:"editor-issues",level:2},{value:"Debug Window Not Working",id:"debug-window-not-working",level:3},{value:"Asset Creation Failed",id:"asset-creation-failed",level:3},{value:"Integration Issues",id:"integration-issues",level:2},{value:"SoapKit + Other Assets Conflicts",id:"soapkit--other-assets-conflicts",level:3},{value:"Version Control Issues",id:"version-control-issues",level:3},{value:"Platform-Specific Issues",id:"platform-specific-issues",level:2},{value:"Mobile Performance",id:"mobile-performance",level:3},{value:"WebGL Issues",id:"webgl-issues",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Community Support",id:"community-support",level:3},{value:"Professional Support",id:"professional-support",level:3},{value:"Self-Help Resources",id:"self-help-resources",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide helps you diagnose and solve common issues when working with SoapKit. We've organized solutions by symptoms and provide step-by-step debugging approaches."}),"\n",(0,r.jsx)(n.h2,{id:"quick-diagnosis-checklist",children:"Quick Diagnosis Checklist"}),"\n",(0,r.jsx)(n.p,{children:"When something isn't working, run through this quick checklist first:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Are you in Play Mode? (Many features only work at runtime)"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Are all SoapKit assets assigned in the Inspector?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Are you subscribing to events in ",(0,r.jsx)(n.code,{children:"OnEnable"})," and unsubscribing in ",(0,r.jsx)(n.code,{children:"OnDisable"}),"?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Are there any null reference exceptions in the Console?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Is the SoapKit Debug Window showing data? (",(0,r.jsx)(n.code,{children:"Tools > SoapKit > Debug Window"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation-issues",children:"Installation Issues"}),"\n",(0,r.jsx)(n.h3,{id:"soapkit-menu-items-missing",children:"SoapKit Menu Items Missing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["No ",(0,r.jsx)(n.code,{children:"Tools > SoapKit"})," menu"]}),"\n",(0,r.jsxs)(n.li,{children:["No ",(0,r.jsx)(n.code,{children:"Create > SoapKit"})," options in Project window"]}),"\n",(0,r.jsx)(n.li,{children:"Import appears successful but features don't work"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Assembly Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Verify FarmGrowthToolkit.Soap.asmdef is present in:\n// Assets/SoapKit/Runtime/FarmGrowthToolkit.Soap.asmdef\n\n// If missing, reimport the package or check package contents\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verify Script Compilation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Check Unity Console for compilation errors\n// SoapKit requires all scripts to compile successfully\n\n// Common compilation issues:\n// 1. Missing using statements\n// 2. Namespace conflicts\n// 3. Unity version compatibility\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Reimport Package:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// In Project window:\n// Right-click on SoapKit folder\n// Choose "Reimport"\n// Wait for reimport to complete\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Clear Unity Cache:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Close Unity\n// Delete Library folder in your project\n// Reopen Unity and wait for reimport\n"})}),"\n",(0,r.jsx)(n.h3,{id:"package-manager-installation-failed",children:"Package Manager Installation Failed"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Git URL import fails"}),"\n",(0,r.jsx)(n.li,{children:'"Unable to add package" error'}),"\n",(0,r.jsx)(n.li,{children:"Package doesn't appear in Package Manager"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Git URL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Correct URL: https://github.com/farmgrowth/soapkit.git\nCommon typos: \n- Missing .git extension\n- Wrong repository name\n- Incorrect organization name\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verify Git Installation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Open command line and check:\ngit --version\n\n# If Git not installed, download from: https://git-scm.com/\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alternative Installation Methods:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Method 1: Download ZIP\n// 1. Download ZIP from GitHub\n// 2. Extract to Assets/SoapKit/\n// 3. Let Unity reimport\n\n// Method 2: Git Clone\n// 1. Clone repository outside project\n// 2. Copy SoapKit folder to Assets/\n// 3. Reimport in Unity\n"})}),"\n",(0,r.jsx)(n.h2,{id:"runtime-issues",children:"Runtime Issues"}),"\n",(0,r.jsx)(n.h3,{id:"variables-not-updating-in-inspector",children:"Variables Not Updating in Inspector"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Variable values don't change in Inspector during Play Mode"}),"\n",(0,r.jsx)(n.li,{children:"Inspector shows old/incorrect values"}),"\n",(0,r.jsx)(n.li,{children:"Changes don't reflect in Debug Window"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Diagnosis:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Check these common issues:\n\n// 1. Not in Play Mode\nif (!Application.isPlaying)\n{\n    Debug.LogWarning("Variable values only update during Play Mode");\n}\n\n// 2. Variable not assigned\nif (playerHealth == null)\n{\n    Debug.LogError("Variable not assigned in Inspector");\n}\n\n// 3. SetValue() not being called\nplayerHealth.SetValue(newHealth); // \u2705 Correct\nplayerHealth.Value = newHealth;   // \u274c Wrong - read-only property\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Enable Runtime Inspector Updates:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// In Inspector, ensure "Update Mode" is set to "Runtime"\n// This is usually automatic but can be manually set\n\n// For variables, check the Inspector shows:\n// Current Value: [live updating value]\n// Initial Value: [design time value]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Debug Variable State:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class VariableDebugger : MonoBehaviour\n{\n    [SerializeField] private IntVariable testVariable;\n    \n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.D))\n        {\n            Debug.Log($"Variable: {testVariable.name}");\n            Debug.Log($"Current Value: {testVariable.Value}");\n            Debug.Log($"Change Count: {testVariable.ChangeCount}");\n            Debug.Log($"Is Valid: {testVariable.IsValid()}");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"events-not-firing",children:"Events Not Firing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Event.Raise() called but listeners don't respond"}),"\n",(0,r.jsx)(n.li,{children:"Debug Window shows 0 listeners for events"}),"\n",(0,r.jsx)(n.li,{children:"Expected behavior not happening"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Diagnosis:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EventDiagnostics : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent testEvent;\n    \n    void Start()\n    {\n        DiagnoseEventIssues();\n    }\n    \n    private void DiagnoseEventIssues()\n    {\n        if (testEvent == null)\n        {\n            Debug.LogError("Event not assigned!");\n            return;\n        }\n        \n        Debug.Log($"Event: {testEvent.name}");\n        Debug.Log($"Listener Count: {testEvent.ListenerCount}");\n        Debug.Log($"Has Been Raised: {testEvent.HasBeenRaised}");\n        \n        // Test raising\n        testEvent.Raise(42);\n        Debug.Log($"After test raise - Listener Count: {testEvent.ListenerCount}");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Event Assignment:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Verify event assets are assigned in Inspector\n[SerializeField] private IntGameEvent onHealthChanged; // Must be assigned!\n\nvoid Start()\n{\n    if (onHealthChanged == null)\n    {\n        Debug.LogError($"Event not assigned on {gameObject.name}");\n        return;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verify Listener Registration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Correct listener pattern\nvoid OnEnable()\n{\n    if (onHealthChanged != null)\n        onHealthChanged.AddListener(OnHealthChangedHandler);\n}\n\nvoid OnDisable() \n{\n    if (onHealthChanged != null)\n        onHealthChanged.RemoveListener(OnHealthChangedHandler);\n}\n\n// \u274c Common mistakes\nvoid Start()\n{\n    // Wrong: Using Start() instead of OnEnable()\n    onHealthChanged.AddListener(OnHealthChangedHandler);\n}\n\nvoid OnDestroy()\n{\n    // Wrong: Only unsubscribing in OnDestroy()\n    // Should also unsubscribe in OnDisable()\n    onHealthChanged.RemoveListener(OnHealthChangedHandler);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Listener Method Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Correct signature for IntGameEvent\nprivate void OnHealthChangedHandler(int newHealth)\n{\n    // Handle health change\n}\n\n// \u274c Wrong signatures\nprivate void OnHealthChangedHandler() // Missing parameter\nprivate void OnHealthChangedHandler(float newHealth) // Wrong type\nprivate void OnHealthChangedHandler(int newHealth, int oldHealth) // Too many parameters\n"})}),"\n",(0,r.jsx)(n.h3,{id:"memory-leaks",children:"Memory Leaks"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Memory usage increases over time"}),"\n",(0,r.jsx)(n.li,{children:"Performance degrades during play"}),"\n",(0,r.jsx)(n.li,{children:"Objects not being garbage collected"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Diagnosis:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Use Unity Profiler to detect memory leaks:\n// Window > Analysis > Profiler\n// Look for increasing memory in "GC Alloc" and "Used Total"\n\n// Check for event subscription leaks\npublic class MemoryLeakDetector : MonoBehaviour\n{\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.M))\n        {\n            LogEventListenerCounts();\n        }\n    }\n    \n    private void LogEventListenerCounts()\n    {\n        // Find all events in scene and log listener counts\n        var events = FindObjectsOfType<GameEvent<int>>();\n        foreach (var evt in events)\n        {\n            Debug.Log($"Event {evt.name}: {evt.ListenerCount} listeners");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Proper Event Lifecycle:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Correct pattern - no memory leaks\npublic class MemoryLeakSafeListener : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    \n    void OnEnable()\n    {\n        // Subscribe when enabled\n        if (onHealthChanged != null)\n            onHealthChanged.AddListener(OnHealthChanged);\n    }\n    \n    void OnDisable()\n    {\n        // Unsubscribe when disabled - prevents memory leaks\n        if (onHealthChanged != null)\n            onHealthChanged.RemoveListener(OnHealthChanged);\n    }\n    \n    private void OnHealthChanged(int health) { }\n}\n\n// \u274c Memory leak pattern\npublic class MemoryLeakListener : MonoBehaviour\n{\n    void Start()\n    {\n        onHealthChanged.AddListener(OnHealthChanged);\n        // Never unsubscribes - causes memory leak!\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Variable Reference Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good - clear references appropriately\npublic class SafeVariableUser : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    \n    void OnDestroy()\n    {\n        // Clear event subscriptions\n        if (playerHealth != null)\n            playerHealth.OnValueChanged -= OnHealthChanged;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,r.jsx)(n.h3,{id:"slow-event-performance",children:"Slow Event Performance"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Frame rate drops when events fire"}),"\n",(0,r.jsx)(n.li,{children:"Profiler shows high CPU usage in event system"}),"\n",(0,r.jsx)(n.li,{children:"Game stutters during event-heavy operations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Diagnosis:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Use SoapKit Performance Profiler\n// Tools > SoapKit > Debug Window > Performance Tab\n\n// Look for:\n// - Events with high listener counts (>20)\n// - Events firing very frequently (>30/second)\n// - Expensive listener callbacks\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Optimize Event Frequency:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Throttle high-frequency events\npublic class ThrottledEvents : MonoBehaviour\n{\n    [SerializeField] private Vector3GameEvent onPlayerMoved;\n    [SerializeField] private float throttleInterval = 0.1f; // 10fps max\n    \n    private float lastEventTime;\n    private Vector3 lastPosition;\n    \n    void Update()\n    {\n        if (Time.time - lastEventTime >= throttleInterval)\n        {\n            Vector3 currentPos = transform.position;\n            if (Vector3.Distance(currentPos, lastPosition) > 0.1f)\n            {\n                onPlayerMoved.Raise(currentPos);\n                lastEventTime = Time.time;\n                lastPosition = currentPos;\n            }\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Optimize Listener Performance:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// \u2705 Efficient listeners\npublic class FastListener : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    \n    // Cache expensive lookups\n    private Text healthText;\n    private Slider healthSlider;\n    \n    void Start()\n    {\n        healthText = GetComponent<Text>();\n        healthSlider = GetComponent<Slider>();\n    }\n    \n    private void OnHealthChanged(int health)\n    {\n        // Use cached references - fast\n        if (healthText != null)\n            healthText.text = health.ToString();\n        if (healthSlider != null)\n            healthSlider.value = health / 100f;\n    }\n}\n\n// \u274c Slow listeners\npublic class SlowListener : MonoBehaviour\n{\n    private void OnHealthChanged(int health)\n    {\n        // Expensive lookups on every event - slow!\n        var healthText = FindObjectOfType<Text>();\n        var healthSlider = GameObject.Find("HealthBar").GetComponent<Slider>();\n        \n        healthText.text = health.ToString();\n        healthSlider.value = health / 100f;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"high-memory-usage",children:"High Memory Usage"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Large memory footprint from SoapKit"}),"\n",(0,r.jsx)(n.li,{children:"Out of memory errors"}),"\n",(0,r.jsx)(n.li,{children:"Slow garbage collection"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Asset Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Keep reasonable limits on SoapKit assets\n// Typical project usage:\n// - Variables: 50-200 assets\n// - Events: 30-150 assets  \n// - Total size: <1MB\n\n// If you have thousands of assets, consider:\n// - Combining related variables\n// - Using fewer, more generic events\n// - Runtime asset creation instead of many static assets\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event History Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Adjust event history size in settings\n// Tools > SoapKit > Settings > Debug > Event History Size\n// Default: 1000 events per event type\n// Reduce for memory-constrained platforms: 100-500\n"})}),"\n",(0,r.jsx)(n.h2,{id:"editor-issues",children:"Editor Issues"}),"\n",(0,r.jsx)(n.h3,{id:"debug-window-not-working",children:"Debug Window Not Working"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Debug Window opens but shows no data"}),"\n",(0,r.jsx)(n.li,{children:"Variables/Events tabs are empty"}),"\n",(0,r.jsx)(n.li,{children:"Performance tab shows no metrics"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Enable Debug Mode:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Check SoapKit Settings\n// Edit > Project Settings > SoapKit > Debug\n// Ensure "Enable Debug Mode" is checked\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Refresh Debug Data:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// In Debug Window, click "Refresh" button\n// Or use keyboard shortcut: F5\n// Or close and reopen window\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Play Mode:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Many debug features require Play Mode\n// Variables show design-time values in Edit Mode\n// Events show runtime activity only in Play Mode\n"})}),"\n",(0,r.jsx)(n.h3,{id:"asset-creation-failed",children:"Asset Creation Failed"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Create > SoapKit" menu works but assets aren\'t created'}),"\n",(0,r.jsx)(n.li,{children:"Asset Creator window shows errors"}),"\n",(0,r.jsx)(n.li,{children:"Created assets don't appear in Project"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check Folder Permissions:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Ensure target folder is writable\n// Check that folder isn't locked by version control\n// Try creating in different folder (e.g., Assets root)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Verify Asset Database:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Force refresh Asset Database\n// Assets > Refresh (Ctrl+R)\n// Or restart Unity\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Manual Asset Creation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// If automatic creation fails, create manually:\n// 1. Right-click in Project window\n// 2. Create > ScriptableObject\n// 3. Choose appropriate SoapKit type\n// 4. Configure in Inspector\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-issues",children:"Integration Issues"}),"\n",(0,r.jsx)(n.h3,{id:"soapkit--other-assets-conflicts",children:"SoapKit + Other Assets Conflicts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Compiler errors after importing other assets"}),"\n",(0,r.jsx)(n.li,{children:"Missing references between SoapKit and other systems"}),"\n",(0,r.jsx)(n.li,{children:"Performance conflicts"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Assembly Definition Conflicts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Check for conflicting assembly definitions\n// SoapKit uses: FarmGrowthToolkit.Soap.asmdef\n\n// If conflicts occur:\n// 1. Add SoapKit assembly reference to other assets\n// 2. Or exclude conflicting code from compilation\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Namespace Conflicts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Fully qualify SoapKit types if conflicts occur\nusing FarmGrowthToolkit.Soap;\n\n// Or use alias\nusing Soap = FarmGrowthToolkit.Soap;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"version-control-issues",children:"Version Control Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SoapKit assets cause merge conflicts"}),"\n",(0,r.jsx)(n.li,{children:"Team members have different asset configurations"}),"\n",(0,r.jsx)(n.li,{children:"Assets appear modified when nothing changed"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Proper .gitignore:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Include SoapKit assets\n!Assets/SoapKit/\n!Assets/Data/Variables/\n!Assets/Data/Events/\n\n# Exclude temporary files\nLibrary/\nTemp/\n*.tmp\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Asset Serialization:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Use text serialization for SoapKit assets\n// Edit > Project Settings > Editor > Asset Serialization Mode\n// Set to "Force Text"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Team Asset Standards:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Establish naming conventions\n// Use consistent folder structures\n// Document asset dependencies\n// Regular team asset reviews\n"})}),"\n",(0,r.jsx)(n.h2,{id:"platform-specific-issues",children:"Platform-Specific Issues"}),"\n",(0,r.jsx)(n.h3,{id:"mobile-performance",children:"Mobile Performance"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Poor performance on mobile devices"}),"\n",(0,r.jsx)(n.li,{children:"High memory usage on mobile"}),"\n",(0,r.jsx)(n.li,{children:"Frequent garbage collection"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mobile Optimizations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Reduce event history size for mobile\n#if UNITY_ANDROID || UNITY_IOS\n    [SerializeField] private int mobileEventHistorySize = 100;\n#else\n    [SerializeField] private int desktopEventHistorySize = 1000;\n#endif\n\n// Throttle high-frequency events more aggressively\n#if UNITY_ANDROID || UNITY_IOS\n    [SerializeField] private float mobileThrottleRate = 0.2f; // 5fps\n#else  \n    [SerializeField] private float desktopThrottleRate = 0.033f; // 30fps\n#endif\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Memory Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Disable debug features in mobile builds\npublic class MobilePlatformAdapter : MonoBehaviour\n{\n    void Start()\n    {\n        #if UNITY_ANDROID || UNITY_IOS\n        // Disable expensive debug features\n        SoapKit.DebugMode = false;\n        SoapKit.EventHistory = false;\n        SoapKit.PerformanceTracking = false;\n        #endif\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"webgl-issues",children:"WebGL Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SoapKit features not working in WebGL builds"}),"\n",(0,r.jsx)(n.li,{children:"Performance issues in browser"}),"\n",(0,r.jsx)(n.li,{children:"Threading-related errors"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WebGL Compatibility:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Avoid threading in WebGL builds\n#if !UNITY_WEBGL || UNITY_EDITOR\n    // Use threading for performance\n    StartCoroutine(BackgroundProcessing());\n#else\n    // Use main thread only\n    ProcessOnMainThread();\n#endif\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Browser Performance:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Optimize for browser environment\npublic class WebGLOptimizer : MonoBehaviour\n{\n    void Start()\n    {\n        #if UNITY_WEBGL && !UNITY_EDITOR\n        // Reduce update frequency\n        Application.targetFrameRate = 30;\n        \n        // Disable expensive features\n        QualitySettings.SetQualityLevel(0);\n        #endif\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsx)(n.h3,{id:"community-support",children:"Community Support"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Discord Server:"})," ",(0,r.jsx)(n.a,{href:"https://discord.gg/soapkit",children:"SoapKit Community"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Active community of developers"}),"\n",(0,r.jsx)(n.li,{children:"Quick answers to common questions"}),"\n",(0,r.jsx)(n.li,{children:"Share tips and best practices"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GitHub Issues:"})," ",(0,r.jsx)(n.a,{href:"https://github.com/farmgrowth/soapkit/issues",children:"Report Bugs"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Bug reports and feature requests"}),"\n",(0,r.jsx)(n.li,{children:"Technical discussions"}),"\n",(0,r.jsx)(n.li,{children:"Contribution guidelines"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://soapkit-docs.example.com",children:"Complete Docs"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Comprehensive guides and tutorials"}),"\n",(0,r.jsx)(n.li,{children:"API reference documentation"}),"\n",(0,r.jsx)(n.li,{children:"Best practices and patterns"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"professional-support",children:"Professional Support"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Email Support:"})," ",(0,r.jsx)(n.a,{href:"mailto:support@soapkit.dev",children:"support@soapkit.dev"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Priority response for critical issues"}),"\n",(0,r.jsx)(n.li,{children:"Custom integration assistance"}),"\n",(0,r.jsx)(n.li,{children:"Performance optimization consulting"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Professional Services:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Custom SoapKit extensions"}),"\n",(0,r.jsx)(n.li,{children:"Team training and workshops"}),"\n",(0,r.jsx)(n.li,{children:"Architecture consultation"}),"\n",(0,r.jsx)(n.li,{children:"Migration assistance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"self-help-resources",children:"Self-Help Resources"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Debug Checklist:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Check Unity Console for errors"}),"\n",(0,r.jsx)(n.li,{children:"Verify all assets are assigned"}),"\n",(0,r.jsx)(n.li,{children:"Ensure proper event subscription patterns"}),"\n",(0,r.jsx)(n.li,{children:"Test in isolation with minimal scene"}),"\n",(0,r.jsx)(n.li,{children:"Use SoapKit Debug Window for insights"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance Profiling:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Use Unity Profiler (Window > Analysis > Profiler)"}),"\n",(0,r.jsx)(n.li,{children:"Check SoapKit Performance tab"}),"\n",(0,r.jsx)(n.li,{children:"Monitor memory usage over time"}),"\n",(0,r.jsx)(n.li,{children:"Profile before and after changes"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Best Practices Review:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Follow naming conventions"}),"\n",(0,r.jsx)(n.li,{children:"Proper event lifecycle management"}),"\n",(0,r.jsx)(n.li,{children:"Appropriate variable scoping"}),"\n",(0,r.jsx)(n.li,{children:"Regular code reviews"}),"\n",(0,r.jsx)(n.li,{children:"Team standards compliance"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Most SoapKit issues stem from common patterns like missing event subscriptions, null references, or improper lifecycle management. Following the patterns in this guide will help you avoid 90% of common issues and build robust, maintainable games with SoapKit! \ud83d\udee0\ufe0f\u2728"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Remember:"})," When in doubt, check the Debug Window first - it provides real-time insights into your SOAP architecture and often reveals the root cause of issues immediately."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);