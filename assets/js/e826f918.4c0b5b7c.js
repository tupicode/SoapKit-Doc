"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[1696],{5775:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-systems/variables","title":"Variables System","description":"The Variables System is SoapKit\'s second core pillar, providing intelligent, constraint-aware ScriptableObject variables that replace traditional public fields and properties with a more robust, debuggable, and flexible approach.","source":"@site/docs/core-systems/variables.md","sourceDirName":"core-systems","slug":"/core-systems/variables","permalink":"/SoapKit-Doc/docs/core-systems/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-systems/variables.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Variables System","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Events System","permalink":"/SoapKit-Doc/docs/core-systems/events"},"next":{"title":"Quick Reference Guide","permalink":"/SoapKit-Doc/docs/core-systems/quick-guide"}}');var l=n(4848),r=n(8453);const t={title:"Variables System",sidebar_position:1},s="SoapKit Variables System",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Basic Variable Usage",id:"basic-variable-usage",level:2},{value:"Creating Variables",id:"creating-variables",level:3},{value:"Using Variables",id:"using-variables",level:3},{value:"Type-Specific Operations",id:"type-specific-operations",level:2},{value:"IntVariable Operations",id:"intvariable-operations",level:3},{value:"FloatVariable Operations",id:"floatvariable-operations",level:3},{value:"StringVariable Operations",id:"stringvariable-operations",level:3},{value:"Vector3Variable Operations",id:"vector3variable-operations",level:3},{value:"ColorVariable Operations",id:"colorvariable-operations",level:3},{value:"GameObjectVariable Operations",id:"gameobjectvariable-operations",level:3},{value:"Advanced Variable Features",id:"advanced-variable-features",level:2},{value:"Constraints and Validation",id:"constraints-and-validation",level:3},{value:"Change Notifications",id:"change-notifications",level:3},{value:"Professional Debugging",id:"professional-debugging",level:2},{value:"Inspector Integration",id:"inspector-integration",level:3},{value:"Debug Window Integration",id:"debug-window-integration",level:3},{value:"Runtime Debugging",id:"runtime-debugging",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Efficiency",id:"memory-efficiency",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Save System Integration",id:"save-system-integration",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"State Management",id:"state-management",level:3},{value:"Custom Variable Types",id:"custom-variable-types",level:2},{value:"Defining Custom Variables",id:"defining-custom-variables",level:3},{value:"Variable Configuration",id:"variable-configuration",level:3},{value:"Variable System Templates",id:"variable-system-templates",level:3},{value:"Testing Variables",id:"testing-variables",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"soapkit-variables-system",children:"SoapKit Variables System"})}),"\n",(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.strong,{children:"Variables System"})," is SoapKit's second core pillar, providing intelligent, constraint-aware ScriptableObject variables that replace traditional public fields and properties with a more robust, debuggable, and flexible approach."]}),"\n",(0,l.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(a.p,{children:"SoapKit Variables are ScriptableObject-based data containers that provide:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:["\ud83d\udd12 ",(0,l.jsx)(a.strong,{children:"Type Safety"})," - Full compile-time checking and IntelliSense support"]}),"\n",(0,l.jsxs)(a.li,{children:["\ud83c\udfaf ",(0,l.jsx)(a.strong,{children:"Smart Operations"})," - Built-in mathematical and manipulation methods for each type"]}),"\n",(0,l.jsxs)(a.li,{children:["\u2705 ",(0,l.jsx)(a.strong,{children:"Validation & Constraints"})," - Min/max values, length limits, and custom validation"]}),"\n",(0,l.jsxs)(a.li,{children:["\ud83d\udd04 ",(0,l.jsx)(a.strong,{children:"Change Notifications"})," - C# events for reactive programming"]}),"\n",(0,l.jsxs)(a.li,{children:["\ud83d\udee0\ufe0f ",(0,l.jsx)(a.strong,{children:"Professional Debugging"})," - Real-time monitoring and editor integration"]}),"\n",(0,l.jsxs)(a.li,{children:["\ud83d\udcca ",(0,l.jsx)(a.strong,{children:"Read-Only Interface"})," - Clean separation between readers and writers"]}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Traditional Approach Problems:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'// \u274c Hard to debug, tightly coupled\npublic class PlayerStats : MonoBehaviour \n{\n    public int health = 100;          // No validation\n    public float speed = 5f;          // No constraints\n    public string playerName = "";    // No length limits\n    \n    // Other systems need direct references\n    public UIHealthBar healthBar;     // Tight coupling\n    public AudioSource audioSource;  // Tight coupling\n}\n'})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"SoapKit Variables Solution:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"// \u2705 Debuggable, decoupled, validated\npublic class PlayerStats : MonoBehaviour \n{\n    [SerializeField] private IntVariable health;      // Constraint-aware\n    [SerializeField] private FloatVariable speed;     // Min/max validation\n    [SerializeField] private StringVariable playerName; // Length limits\n    \n    // No direct system references needed!\n    // Other systems subscribe to variable change events\n}\n"})}),"\n",(0,l.jsx)(a.h2,{id:"basic-variable-usage",children:"Basic Variable Usage"}),"\n",(0,l.jsx)(a.h3,{id:"creating-variables",children:"Creating Variables"}),"\n",(0,l.jsx)(a.p,{children:"Variables are created as ScriptableObject assets:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"// Right-click in Project window\n// Create > SoapKit > Variables > [Type] Variable\n"})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Available Variable Types:"})}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"BoolVariable"})," - Boolean values with logical operations"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"IntVariable"})," - Integer values with math operations and constraints"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"FloatVariable"})," - Float values with math operations and constraints"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"StringVariable"})," - String values with manipulation and validation"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"Vector2Variable"})," - 2D vectors with vector math operations"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"Vector3Variable"})," - 3D vectors with vector math operations"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"Vector2IntVariable"})," - Integer vectors with specialized operations"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"ColorVariable"})," - Colors with RGB/HSV manipulation"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"GameObjectVariable"})," - GameObject references with validation"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.code,{children:"TransformVariable"})," - Transform references with hierarchy operations"]}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"using-variables",children:"Using Variables"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Basic Value Access:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'public class HealthSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private IntVariable maxHealth;\n    \n    void Start()\n    {\n        // Get values\n        int currentHealth = playerHealth.Value;\n        int maximum = maxHealth.Value;\n        \n        // Set values\n        playerHealth.SetValue(100);\n        maxHealth.SetValue(120);\n        \n        // Subscribe to changes\n        playerHealth.OnValueChanged += OnHealthChanged;\n    }\n    \n    private void OnHealthChanged(int newHealth)\n    {\n        Debug.Log($"Health changed to: {newHealth}");\n    }\n}\n'})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Read-Only Interface:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public class HealthUI : MonoBehaviour\n{\n    // Use IReadOnlyVariable<T> for systems that only need to read\n    [SerializeField] private IReadOnlyVariable<int> playerHealth;\n    [SerializeField] private IReadOnlyVariable<int> maxHealth;\n    \n    void Start()\n    {\n        // Can read values\n        UpdateHealthBar(playerHealth.Value, maxHealth.Value);\n        \n        // Can subscribe to changes\n        playerHealth.OnValueChanged += UpdateHealthDisplay;\n        \n        // Cannot modify values - compile-time safety!\n        // playerHealth.SetValue(50); // \u274c Compiler error\n    }\n}\n"})}),"\n",(0,l.jsx)(a.h2,{id:"type-specific-operations",children:"Type-Specific Operations"}),"\n",(0,l.jsx)(a.p,{children:"Each variable type includes specialized operations relevant to that data type:"}),"\n",(0,l.jsx)(a.h3,{id:"intvariable-operations",children:"IntVariable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"[SerializeField] private IntVariable score;\n[SerializeField] private IntVariable playerLevel;\n\nvoid ExampleIntOperations()\n{\n    // Basic math operations\n    score.Add(100);              // score += 100\n    score.Subtract(25);          // score -= 25\n    score.Multiply(2);           // score *= 2\n    score.Divide(3);             // score /= 3\n    \n    // Increment/Decrement\n    playerLevel.Increment();     // playerLevel++\n    playerLevel.Decrement();     // playerLevel--\n    \n    // Constraints (set in inspector)\n    score.Min = 0;              // Minimum value\n    score.Max = 9999;           // Maximum value\n    \n    // Clamping\n    score.ClampToConstraints(); // Ensures value stays within min/max\n}\n"})}),"\n",(0,l.jsx)(a.h3,{id:"floatvariable-operations",children:"FloatVariable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"[SerializeField] private FloatVariable playerSpeed;\n[SerializeField] private FloatVariable healthPercentage;\n\nvoid ExampleFloatOperations()\n{\n    // Math operations\n    playerSpeed.Add(1.5f);\n    playerSpeed.Multiply(0.8f);\n    \n    // Percentage operations\n    healthPercentage.SetAsPercentage(0.75f);  // 75%\n    float percent = healthPercentage.AsPercentage(); // Returns 0.0-1.0\n    \n    // Rounding\n    playerSpeed.RoundToDecimals(2);    // Round to 2 decimal places\n    playerSpeed.RoundToNearest(0.5f);  // Round to nearest 0.5\n    \n    // Interpolation\n    playerSpeed.LerpTo(10f, Time.deltaTime); // Smooth lerp to target\n    \n    // Constraints\n    playerSpeed.Min = 0.1f;\n    playerSpeed.Max = 15f;\n}\n"})}),"\n",(0,l.jsx)(a.h3,{id:"stringvariable-operations",children:"StringVariable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'[SerializeField] private StringVariable playerName;\n[SerializeField] private StringVariable chatMessage;\n\nvoid ExampleStringOperations()\n{\n    // String manipulation\n    playerName.Append(" (VIP)");        // Add to end\n    playerName.Prepend("Sir ");         // Add to beginning\n    \n    // Case operations\n    chatMessage.ToUpperCase();          // CONVERT TO CAPS\n    chatMessage.ToLowerCase();          // convert to lowercase\n    chatMessage.ToTitleCase();          // Convert To Title Case\n    \n    // Cleaning operations\n    chatMessage.Trim();                 // Remove whitespace\n    chatMessage.Replace("bad", "***");  // Replace text\n    \n    // Validation\n    playerName.MaxLength = 20;          // Character limit\n    playerName.MinLength = 3;           // Minimum length\n    \n    // Validation checking\n    bool isValid = playerName.IsValid(); // Check against constraints\n}\n'})}),"\n",(0,l.jsx)(a.h3,{id:"vector3variable-operations",children:"Vector3Variable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"[SerializeField] private Vector3Variable playerPosition;\n[SerializeField] private Vector3Variable targetPosition;\n\nvoid ExampleVectorOperations()\n{\n    // Vector math\n    playerPosition.Add(Vector3.up * 2f);     // Move up\n    playerPosition.Normalize();              // Normalize vector\n    \n    // Interpolation\n    playerPosition.LerpTo(targetPosition.Value, Time.deltaTime);\n    playerPosition.SlerpTo(targetPosition.Value, Time.deltaTime);\n    playerPosition.MoveTowards(targetPosition.Value, 5f * Time.deltaTime);\n    \n    // Component operations\n    playerPosition.SetX(10f);               // Set individual components\n    playerPosition.SetY(0f);\n    playerPosition.SetZ(5f);\n    \n    float distance = playerPosition.DistanceTo(targetPosition.Value);\n    \n    // Constraints\n    playerPosition.MaxMagnitude = 100f;     // Limit how far from origin\n    playerPosition.MinMagnitude = 1f;       // Minimum distance from origin\n}\n"})}),"\n",(0,l.jsx)(a.h3,{id:"colorvariable-operations",children:"ColorVariable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"[SerializeField] private ColorVariable playerColor;\n[SerializeField] private ColorVariable targetColor;\n\nvoid ExampleColorOperations()\n{\n    // Color manipulation\n    playerColor.SetRed(0.8f);           // Modify RGB components\n    playerColor.SetGreen(0.6f);\n    playerColor.SetBlue(0.4f);\n    playerColor.SetAlpha(0.5f);         // Transparency\n    \n    // HSV operations\n    playerColor.SetHue(0.33f);          // Green hue\n    playerColor.SetSaturation(1f);      // Full saturation\n    playerColor.SetBrightness(0.8f);    // 80% brightness\n    \n    // Color utilities\n    playerColor.Invert();               // Invert colors\n    playerColor.Grayscale();            // Convert to grayscale\n    \n    // Interpolation\n    playerColor.LerpTo(targetColor.Value, Time.deltaTime);\n    \n    // Presets\n    playerColor.SetValue(Color.red);    // Use Unity color presets\n}\n"})}),"\n",(0,l.jsx)(a.h3,{id:"gameobjectvariable-operations",children:"GameObjectVariable Operations"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'[SerializeField] private GameObjectVariable targetObject;\n[SerializeField] private GameObjectVariable playerObject;\n\nvoid ExampleGameObjectOperations()\n{\n    // Component access\n    var renderer = targetObject.GetComponent<Renderer>();\n    var rigidbody = targetObject.GetComponent<Rigidbody>();\n    \n    // Safe component operations\n    if (targetObject.HasComponent<Collider>())\n    {\n        var collider = targetObject.GetComponent<Collider>();\n        collider.enabled = false;\n    }\n    \n    // Tag validation\n    targetObject.RequiredTag = "Enemy";     // Only accept objects with this tag\n    bool isValidTag = targetObject.IsValid(); // Check tag requirement\n    \n    // Hierarchy operations\n    bool isActive = targetObject.IsActive();\n    targetObject.SetActive(false);\n    \n    // Null safety\n    if (targetObject.HasValue())\n    {\n        // Safe to use targetObject.Value\n        Debug.Log(targetObject.Value.name);\n    }\n}\n'})}),"\n",(0,l.jsx)(a.h2,{id:"advanced-variable-features",children:"Advanced Variable Features"}),"\n",(0,l.jsx)(a.h3,{id:"constraints-and-validation",children:"Constraints and Validation"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Numeric Constraints:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"[SerializeField] private IntVariable playerHealth;\n\nvoid SetupHealthConstraints()\n{\n    // Set in code or inspector\n    playerHealth.Min = 0;           // Can't go below 0\n    playerHealth.Max = 100;         // Can't exceed 100\n    playerHealth.SetValue(150);     // Automatically clamped to 100\n    \n    // Custom validation\n    playerHealth.OnValidate += (value) => \n    {\n        if (value < 0) return 0;\n        if (value > 100) return 100;\n        return value;\n    };\n}\n"})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"String Constraints:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'[SerializeField] private StringVariable username;\n\nvoid SetupUsernameValidation()\n{\n    username.MinLength = 3;\n    username.MaxLength = 20;\n    \n    // Custom validation\n    username.OnValidate += (value) => \n    {\n        // Remove forbidden words\n        value = value.Replace("admin", "");\n        value = value.Replace("test", "");\n        return value;\n    };\n}\n'})}),"\n",(0,l.jsx)(a.h3,{id:"change-notifications",children:"Change Notifications"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Multiple Subscription Patterns:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public class PlayerStatsUI : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private IntVariable playerMana;\n    [SerializeField] private StringVariable playerName;\n    \n    void OnEnable()\n    {\n        // Subscribe to individual changes\n        playerHealth.OnValueChanged += OnHealthChanged;\n        playerMana.OnValueChanged += OnManaChanged;\n        playerName.OnValueChanged += OnNameChanged;\n        \n        // Subscribe to any change (useful for save systems)\n        playerHealth.OnValueChanged += (_) => SavePlayerData();\n        playerMana.OnValueChanged += (_) => SavePlayerData();\n        playerName.OnValueChanged += (_) => SavePlayerData();\n    }\n    \n    void OnDisable()\n    {\n        // Always unsubscribe\n        if (playerHealth != null) playerHealth.OnValueChanged -= OnHealthChanged;\n        if (playerMana != null) playerMana.OnValueChanged -= OnManaChanged;\n        if (playerName != null) playerName.OnValueChanged -= OnNameChanged;\n    }\n}\n"})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Conditional Change Notifications:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public class AchievementSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerScore;\n    \n    void OnEnable()\n    {\n        playerScore.OnValueChanged += CheckScoreAchievements;\n    }\n    \n    private void CheckScoreAchievements(int newScore)\n    {\n        // Only trigger achievements on score increases\n        if (newScore > playerScore.PreviousValue)\n        {\n            CheckHighScoreAchievements(newScore);\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(a.h2,{id:"professional-debugging",children:"Professional Debugging"}),"\n",(0,l.jsx)(a.h3,{id:"inspector-integration",children:"Inspector Integration"}),"\n",(0,l.jsx)(a.p,{children:"Variables provide rich debugging information in the Inspector:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Current Value"}),": Real-time value display during play mode"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Previous Value"}),": Shows last value for comparison"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Change Count"}),": Number of times value has changed"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Constraints"}),": Visual display of min/max values"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Validation Status"}),": Shows if current value is valid"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Debug Buttons"}),": Set test values, trigger changes"]}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"debug-window-integration",children:"Debug Window Integration"}),"\n",(0,l.jsx)(a.p,{children:"The SoapKit Debug Window provides comprehensive variable monitoring:"}),"\n",(0,l.jsxs)(a.ol,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Open Debug Window"}),": ",(0,l.jsx)(a.code,{children:"Tools > SoapKit > Debug Window"})]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Variables Tab"}),": See all variables with current values"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Real-time Updates"}),": Watch values change during gameplay"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Constraint Visualization"}),": See min/max limits visually"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Change History"}),": Track how values change over time"]}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"runtime-debugging",children:"Runtime Debugging"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'public class VariableDebugger : MonoBehaviour\n{\n    [SerializeField] private IntVariable debugTarget;\n    \n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.D))\n        {\n            // Debug variable state\n            Debug.Log($"Variable: {debugTarget.name}");\n            Debug.Log($"Current: {debugTarget.Value}");\n            Debug.Log($"Previous: {debugTarget.PreviousValue}");\n            Debug.Log($"Min: {debugTarget.Min}, Max: {debugTarget.Max}");\n            Debug.Log($"Is Valid: {debugTarget.IsValid()}");\n            Debug.Log($"Change Count: {debugTarget.ChangeCount}");\n        }\n    }\n}\n'})}),"\n",(0,l.jsx)(a.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,l.jsx)(a.h3,{id:"memory-efficiency",children:"Memory Efficiency"}),"\n",(0,l.jsx)(a.p,{children:"Variables are designed for performance:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"ScriptableObject Benefits"}),": Shared references, no duplication"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Efficient Change Detection"}),": Only notifies when values actually change"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Minimal Allocation"}),": No boxing/unboxing for value types"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:"Smart Caching"}),": Expensive operations cached when possible"]}),"\n"]}),"\n",(0,l.jsx)(a.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"\u2705 Efficient Variable Usage:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public class OptimizedVariableUser : MonoBehaviour\n{\n    [SerializeField] private IntVariable health;\n    private int cachedHealth;\n    private bool healthCached;\n    \n    void Start()\n    {\n        // Cache initial value\n        cachedHealth = health.Value;\n        healthCached = true;\n        \n        // Only subscribe when needed\n        health.OnValueChanged += OnHealthChanged;\n    }\n    \n    private void OnHealthChanged(int newHealth)\n    {\n        // Update cache\n        cachedHealth = newHealth;\n        \n        // Do work only when necessary\n        if (newHealth <= 0)\n            HandleDeath();\n    }\n    \n    public int GetHealth()\n    {\n        // Return cached value for performance\n        return healthCached ? cachedHealth : health.Value;\n    }\n}\n"})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"\u274c Avoid These Patterns:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public class IneffientVariableUser : MonoBehaviour\n{\n    [SerializeField] private IntVariable health;\n    \n    void Update()\n    {\n        // \u274c Don't access .Value every frame unnecessarily\n        if (health.Value <= 0)\n            HandleDeath();\n        \n        // \u274c Don't create expensive operations in change handlers\n        health.OnValueChanged += (newHealth) => \n        {\n            FindObjectOfType<HealthBar>().UpdateDisplay(newHealth);\n        };\n    }\n}\n"})}),"\n",(0,l.jsx)(a.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,l.jsx)(a.h3,{id:"save-system-integration",children:"Save System Integration"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'public class SaveSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerLevel;\n    [SerializeField] private FloatVariable playerExperience;\n    [SerializeField] private StringVariable playerName;\n    \n    void Start()\n    {\n        LoadPlayerData();\n        \n        // Subscribe to all variables for auto-save\n        playerLevel.OnValueChanged += (_) => SavePlayerData();\n        playerExperience.OnValueChanged += (_) => SavePlayerData();\n        playerName.OnValueChanged += (_) => SavePlayerData();\n    }\n    \n    private void LoadPlayerData()\n    {\n        playerLevel.SetValue(PlayerPrefs.GetInt("PlayerLevel", 1));\n        playerExperience.SetValue(PlayerPrefs.GetFloat("PlayerXP", 0f));\n        playerName.SetValue(PlayerPrefs.GetString("PlayerName", "Player"));\n    }\n    \n    private void SavePlayerData()\n    {\n        PlayerPrefs.SetInt("PlayerLevel", playerLevel.Value);\n        PlayerPrefs.SetFloat("PlayerXP", playerExperience.Value);\n        PlayerPrefs.SetString("PlayerName", playerName.Value);\n        PlayerPrefs.Save();\n    }\n}\n'})}),"\n",(0,l.jsx)(a.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'public class GameSettings : MonoBehaviour\n{\n    [Header("Audio Settings")]\n    [SerializeField] private FloatVariable masterVolume;\n    [SerializeField] private FloatVariable musicVolume;\n    [SerializeField] private FloatVariable sfxVolume;\n    \n    [Header("Graphics Settings")]\n    [SerializeField] private IntVariable qualityLevel;\n    [SerializeField] private BoolVariable fullscreen;\n    [SerializeField] private Vector2IntVariable resolution;\n    \n    void Start()\n    {\n        // Set up constraints\n        masterVolume.Min = 0f; masterVolume.Max = 1f;\n        musicVolume.Min = 0f; musicVolume.Max = 1f;\n        sfxVolume.Min = 0f; sfxVolume.Max = 1f;\n        qualityLevel.Min = 0; qualityLevel.Max = 5;\n        \n        // Apply settings when they change\n        masterVolume.OnValueChanged += AudioListener.SetVolume;\n        qualityLevel.OnValueChanged += QualitySettings.SetQualityLevel;\n        fullscreen.OnValueChanged += Screen.SetFullscreen;\n    }\n}\n'})}),"\n",(0,l.jsx)(a.h3,{id:"state-management",children:"State Management"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"public enum GameState { Menu, Playing, Paused, GameOver }\n\npublic class GameStateManager : MonoBehaviour\n{\n    [SerializeField] private EnumVariable<GameState> currentState;\n    [SerializeField] private FloatVariable gameTime;\n    [SerializeField] private BoolVariable isPaused;\n    \n    void Start()\n    {\n        // Initialize state\n        currentState.SetValue(GameState.Menu);\n        \n        // Link variables\n        isPaused.OnValueChanged += OnPauseStateChanged;\n        currentState.OnValueChanged += OnGameStateChanged;\n    }\n    \n    private void OnPauseStateChanged(bool paused)\n    {\n        Time.timeScale = paused ? 0f : 1f;\n    }\n    \n    private void OnGameStateChanged(GameState newState)\n    {\n        switch(newState)\n        {\n            case GameState.Playing:\n                gameTime.SetValue(0f);\n                isPaused.SetValue(false);\n                break;\n                \n            case GameState.Paused:\n                isPaused.SetValue(true);\n                break;\n                \n            case GameState.GameOver:\n                isPaused.SetValue(false);\n                Time.timeScale = 1f;\n                break;\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(a.h2,{id:"custom-variable-types",children:"Custom Variable Types"}),"\n",(0,l.jsx)(a.p,{children:"Create your own specialized variable types with custom operations and validation:"}),"\n",(0,l.jsx)(a.h3,{id:"defining-custom-variables",children:"Defining Custom Variables"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Example: Player Stats Variable"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'// Custom struct for player statistics\n[System.Serializable]\npublic struct PlayerStats\n{\n    public int health;\n    public int mana;\n    public int experience;\n    public int level;\n}\n\n// Generated custom variable\n[CreateAssetMenu(menuName = "SoapKit/Variables/PlayerStats Variable")]\npublic class PlayerStatsVariable : BaseVariable<PlayerStats>\n{\n    // Custom operations specific to player stats\n    public void AddExperience(int exp)\n    {\n        var stats = Value;\n        stats.experience += exp;\n        \n        // Level up logic\n        while (stats.experience >= GetRequiredExpForLevel(stats.level + 1))\n        {\n            stats.level++;\n            stats.health = GetMaxHealthForLevel(stats.level);\n            stats.mana = GetMaxManaForLevel(stats.level);\n        }\n        \n        SetValue(stats);\n    }\n    \n    public void LevelUp()\n    {\n        var stats = Value;\n        stats.level++;\n        stats.health = GetMaxHealthForLevel(stats.level);\n        stats.mana = GetMaxManaForLevel(stats.level);\n        SetValue(stats);\n    }\n    \n    private int GetRequiredExpForLevel(int level) => level * 100;\n    private int GetMaxHealthForLevel(int level) => 100 + (level - 1) * 20;\n    private int GetMaxManaForLevel(int level) => 50 + (level - 1) * 10;\n}\n'})}),"\n",(0,l.jsx)(a.h3,{id:"variable-configuration",children:"Variable Configuration"}),"\n",(0,l.jsx)(a.p,{children:"When creating variables, configure important properties for robust behavior:"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Numeric Variables (Int, Float):"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'Name: PlayerHealth\nType: IntVariable\nValue: 100\nMin Value: 0        // Cannot go below 0\nMax Value: 100      // Cannot exceed 100\nClamp Mode: Auto    // Automatically clamp to range\nDescription: "Player\'s current health points"\nCategory: Player    // For organization\nTags: health, player, core  // For searching\n'})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"String Variables:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'Name: PlayerName\nType: StringVariable\nValue: "Player"\nMin Length: 1       // Must have at least 1 character\nMax Length: 20      // Cannot exceed 20 characters\nAllowed Characters: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"\nDescription: "Player\'s display name"\n'})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Unity Type Variables:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'Name: PlayerPosition\nType: Vector3Variable\nInitial Value: (0, 0, 0)\nMax Magnitude: 100  // Cannot be more than 100 units from origin\nDescription: "Player\'s world position"\n'})}),"\n",(0,l.jsx)(a.h3,{id:"variable-system-templates",children:"Variable System Templates"}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Complete Health System Variables:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"// Health system variable collection\nIntVariable: PlayerHealth      // Current health value\nIntVariable: MaxHealth         // Maximum possible health\nIntVariable: HealthRegenRate   // Health regeneration per second\nBoolVariable: IsAlive         // Player alive status\nFloatVariable: LastDamageTime // When last damage occurred\n"})}),"\n",(0,l.jsx)(a.p,{children:(0,l.jsx)(a.strong,{children:"Inventory System Variables:"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:"IntVariable: InventoryCount     // Current item count\nIntVariable: InventoryCapacity  // Maximum capacity\nBoolVariable: IsInventoryFull   // At capacity status\nStringVariable: LastItemAdded   // Name of recently added item\nGameObjectVariable: SelectedItem // Currently selected item\n"})}),"\n",(0,l.jsx)(a.h2,{id:"testing-variables",children:"Testing Variables"}),"\n",(0,l.jsx)(a.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-csharp",children:'[Test]\npublic void TestIntVariableConstraints()\n{\n    // Arrange\n    var health = ScriptableObject.CreateInstance<IntVariable>();\n    health.Min = 0;\n    health.Max = 100;\n    \n    // Act & Assert\n    health.SetValue(150);\n    Assert.AreEqual(100, health.Value, "Should clamp to max value");\n    \n    health.SetValue(-50);\n    Assert.AreEqual(0, health.Value, "Should clamp to min value");\n}\n\n[Test]\npublic void TestVariableChangeNotification()\n{\n    // Arrange\n    var score = ScriptableObject.CreateInstance<IntVariable>();\n    bool changeNotified = false;\n    score.OnValueChanged += (_) => changeNotified = true;\n    \n    // Act\n    score.SetValue(100);\n    \n    // Assert\n    Assert.IsTrue(changeNotified, "Should notify when value changes");\n}\n'})}),"\n",(0,l.jsx)(a.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,l.jsx)(a.p,{children:"Now that you understand the Variables System, explore:"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:(0,l.jsx)(a.a,{href:"./quick-guide",children:"Quick Guide"})})," - Common variable patterns and recipes"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:(0,l.jsx)(a.a,{href:"../editor-tools/debug-window",children:"Debug Window"})})," - Professional debugging tools"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:(0,l.jsx)(a.a,{href:"../advanced/custom-variables",children:"Custom Variables"})})," - Creating your own variable types"]}),"\n",(0,l.jsxs)(a.li,{children:[(0,l.jsx)(a.strong,{children:(0,l.jsx)(a.a,{href:"../advanced/best-practices",children:"Best Practices"})})," - Professional development patterns"]}),"\n"]}),"\n",(0,l.jsx)(a.hr,{}),"\n",(0,l.jsx)(a.p,{children:"The Variables System provides the foundation for data-driven, debuggable game development. Combined with the Events System, you have everything needed to build professional Unity games with clean, maintainable architecture! \ud83c\udfaf"})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>s});var i=n(6540);const l={},r=i.createContext(l);function t(e){const a=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:a},e.children)}}}]);