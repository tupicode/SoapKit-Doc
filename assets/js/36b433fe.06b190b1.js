"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[2199],{4066:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"advanced/patterns","title":"Design Patterns","description":"Common design patterns and best practices when using SoapKit in your Unity projects.","source":"@site/docs/advanced/patterns.md","sourceDirName":"advanced","slug":"/advanced/patterns","permalink":"/SoapKit-Doc/docs/advanced/patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/patterns.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Custom Variables","permalink":"/SoapKit-Doc/docs/advanced/custom-variables"},"next":{"title":"Performance Optimization","permalink":"/SoapKit-Doc/docs/advanced/performance"}}');var i=a(4848),r=a(8453);const s={},l="Design Patterns",o={},d=[{value:"Observer Pattern with Events",id:"observer-pattern-with-events",level:2},{value:"Basic Observer Setup",id:"basic-observer-setup",level:3},{value:"State Management Pattern",id:"state-management-pattern",level:2},{value:"Game State Manager",id:"game-state-manager",level:3},{value:"Command Pattern with Events",id:"command-pattern-with-events",level:2},{value:"Command System",id:"command-system",level:3},{value:"Factory Pattern for Asset Creation",id:"factory-pattern-for-asset-creation",level:2},{value:"Variable Factory",id:"variable-factory",level:3},{value:"Mediator Pattern",id:"mediator-pattern",level:2},{value:"System Communication",id:"system-communication",level:3},{value:"Data Binding Pattern",id:"data-binding-pattern",level:2},{value:"UI Data Binding",id:"ui-data-binding",level:3},{value:"Repository Pattern",id:"repository-pattern",level:2},{value:"Game Data Repository",id:"game-data-repository",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Anti-Patterns to Avoid",id:"anti-patterns-to-avoid",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"design-patterns",children:"Design Patterns"})}),"\n",(0,i.jsx)(n.p,{children:"Common design patterns and best practices when using SoapKit in your Unity projects."}),"\n",(0,i.jsx)(n.h2,{id:"observer-pattern-with-events",children:"Observer Pattern with Events"}),"\n",(0,i.jsx)(n.p,{children:"SoapKit's event system implements the Observer pattern, allowing for loose coupling between systems."}),"\n",(0,i.jsx)(n.h3,{id:"basic-observer-setup",children:"Basic Observer Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class HealthSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private GameEvent onPlayerDeath;\n    \n    private void Update()\n    {\n        if (playerHealth.Value <= 0)\n        {\n            onPlayerDeath.Raise();\n        }\n    }\n}\n\npublic class UIHealthBar : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private Slider healthSlider;\n    \n    private void OnEnable()\n    {\n        playerHealth.OnValueChanged += UpdateHealthBar;\n    }\n    \n    private void OnDisable()\n    {\n        playerHealth.OnValueChanged -= UpdateHealthBar;\n    }\n    \n    private void UpdateHealthBar(int newHealth)\n    {\n        healthSlider.value = newHealth;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"state-management-pattern",children:"State Management Pattern"}),"\n",(0,i.jsx)(n.p,{children:"Use SoapKit variables to manage game state centrally."}),"\n",(0,i.jsx)(n.h3,{id:"game-state-manager",children:"Game State Manager"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class GameStateManager : MonoBehaviour\n{\n    [Header("Game State")]\n    [SerializeField] private BoolVariable isGamePaused;\n    [SerializeField] private BoolVariable isGameOver;\n    [SerializeField] private IntVariable currentLevel;\n    \n    [Header("Events")]\n    [SerializeField] private GameEvent onGameStart;\n    [SerializeField] private GameEvent onGameEnd;\n    [SerializeField] private BoolGameEvent onPauseToggle;\n    \n    private void Start()\n    {\n        InitializeGameState();\n    }\n    \n    private void InitializeGameState()\n    {\n        isGamePaused.SetValue(false);\n        isGameOver.SetValue(false);\n        currentLevel.SetValue(1);\n        \n        onGameStart.Raise();\n    }\n    \n    public void PauseGame()\n    {\n        bool newPauseState = !isGamePaused.Value;\n        isGamePaused.SetValue(newPauseState);\n        onPauseToggle.Raise(newPauseState);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"command-pattern-with-events",children:"Command Pattern with Events"}),"\n",(0,i.jsx)(n.p,{children:"Implement command pattern using events for action handling."}),"\n",(0,i.jsx)(n.h3,{id:"command-system",children:"Command System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Command Event")]\npublic class CommandEvent : GameEvent<ICommand>\n{\n    private Stack<ICommand> commandHistory = new Stack<ICommand>();\n    \n    public void ExecuteCommand(ICommand command)\n    {\n        command.Execute();\n        commandHistory.Push(command);\n        Raise(command);\n    }\n    \n    public void UndoLastCommand()\n    {\n        if (commandHistory.Count > 0)\n        {\n            var lastCommand = commandHistory.Pop();\n            lastCommand.Undo();\n        }\n    }\n}\n\npublic interface ICommand\n{\n    void Execute();\n    void Undo();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"factory-pattern-for-asset-creation",children:"Factory Pattern for Asset Creation"}),"\n",(0,i.jsx)(n.p,{children:"Create factory methods for consistent asset creation."}),"\n",(0,i.jsx)(n.h3,{id:"variable-factory",children:"Variable Factory"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static class VariableFactory\n{\n    public static T CreateVariable<T>(string name, object initialValue) where T : ScriptableObject\n    {\n        var asset = ScriptableObject.CreateInstance<T>();\n        asset.name = name;\n        \n        // Set initial value using reflection or specific methods\n        if (asset is BaseVariable<object> variable)\n        {\n            variable.SetValue(initialValue);\n        }\n        \n        return asset;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mediator-pattern",children:"Mediator Pattern"}),"\n",(0,i.jsx)(n.p,{children:"Use events as mediators between systems."}),"\n",(0,i.jsx)(n.h3,{id:"system-communication",children:"System Communication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class InventorySystem : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onItemCollected;\n    [SerializeField] private IntGameEvent onItemUsed;\n    \n    private void OnEnable()\n    {\n        onItemCollected.AddListener(HandleItemCollected);\n        onItemUsed.AddListener(HandleItemUsed);\n    }\n    \n    private void OnDisable()\n    {\n        onItemCollected.RemoveListener(HandleItemCollected);\n        onItemUsed.RemoveListener(HandleItemUsed);\n    }\n    \n    private void HandleItemCollected(int itemId)\n    {\n        // Add item to inventory\n        // Update UI\n        // Save game state\n    }\n    \n    private void HandleItemUsed(int itemId)\n    {\n        // Remove item from inventory\n        // Apply item effects\n        // Update UI\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-binding-pattern",children:"Data Binding Pattern"}),"\n",(0,i.jsx)(n.p,{children:"Implement two-way data binding with variables."}),"\n",(0,i.jsx)(n.h3,{id:"ui-data-binding",children:"UI Data Binding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class DataBinder : MonoBehaviour\n{\n    [SerializeField] private StringVariable playerName;\n    [SerializeField] private InputField nameInput;\n    \n    private void Start()\n    {\n        // Bind variable to UI\n        nameInput.text = playerName.Value;\n        nameInput.onValueChanged.AddListener(OnNameChanged);\n        \n        // Bind UI to variable\n        playerName.OnValueChanged += OnVariableChanged;\n    }\n    \n    private void OnNameChanged(string newName)\n    {\n        playerName.SetValue(newName);\n    }\n    \n    private void OnVariableChanged(string newName)\n    {\n        if (nameInput.text != newName)\n        {\n            nameInput.text = newName;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,i.jsx)(n.p,{children:"Use ScriptableObjects as data repositories."}),"\n",(0,i.jsx)(n.h3,{id:"game-data-repository",children:"Game Data Repository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "Data/Game Repository")]\npublic class GameDataRepository : ScriptableObject\n{\n    [Header("Player Data")]\n    public IntVariable playerHealth;\n    public IntVariable playerMana;\n    public StringVariable playerName;\n    \n    [Header("Game Settings")]\n    public FloatVariable masterVolume;\n    public BoolVariable enableVSync;\n    \n    public void ResetToDefaults()\n    {\n        playerHealth.SetValue(100);\n        playerMana.SetValue(50);\n        playerName.SetValue("Player");\n        masterVolume.SetValue(1.0f);\n        enableVSync.SetValue(true);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Responsibility"}),": Each ScriptableObject should have one clear purpose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Loose Coupling"}),": Use events to communicate between unrelated systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent Naming"}),": Follow naming conventions for assets and references"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Lifecycle"}),": Always pair AddListener with RemoveListener"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation"}),": Use constraints and validation in custom variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Add tooltips and help text to inspector fields"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"anti-patterns-to-avoid",children:"Anti-Patterns to Avoid"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct References"}),": Avoid direct MonoBehaviour references between systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Spam"}),": Don't raise events in Update() loops without throttling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Leaks"}),": Always unsubscribe from events in OnDisable/OnDestroy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global State Abuse"}),": Don't make everything a ScriptableObject variable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex Dependencies"}),": Keep dependency chains simple and traceable"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var t=a(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);