"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[4893],{8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var i=a(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},8795:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-systems/quick-guide","title":"Quick Reference Guide","description":"This guide provides quick recipes and common patterns for using SoapKit Events and Variables effectively. Perfect for developers who want to quickly implement professional game architecture patterns.","source":"@site/docs/core-systems/quick-guide.md","sourceDirName":"core-systems","slug":"/core-systems/quick-guide","permalink":"/SoapKit-Doc/docs/core-systems/quick-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-systems/quick-guide.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Quick Reference Guide","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Variables System","permalink":"/SoapKit-Doc/docs/core-systems/variables"},"next":{"title":"Debug Window","permalink":"/SoapKit-Doc/docs/editor-tools/debug-window"}}');var t=a(4848),r=a(8453);const l={title:"Quick Reference Guide",sidebar_position:3},s="SoapKit Quick Reference Guide",o={},d=[{value:"\ud83d\ude80 Quick Setup Recipes",id:"-quick-setup-recipes",level:2},{value:"Player Health System (2 minutes)",id:"player-health-system-2-minutes",level:3},{value:"Score System (1 minute)",id:"score-system-1-minute",level:3},{value:"UI Health Bar (1 minute)",id:"ui-health-bar-1-minute",level:3},{value:"\ud83c\udfaf Common Patterns",id:"-common-patterns",level:2},{value:"Observer Pattern (Reactive Systems)",id:"observer-pattern-reactive-systems",level:3},{value:"State Machine Pattern",id:"state-machine-pattern",level:3},{value:"Resource Management Pattern",id:"resource-management-pattern",level:3},{value:"Inventory System Pattern",id:"inventory-system-pattern",level:3},{value:"\ud83d\udee0\ufe0f Editor Workflow Tips",id:"\ufe0f-editor-workflow-tips",level:2},{value:"Asset Organization",id:"asset-organization",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Batch Asset Creation",id:"batch-asset-creation",level:3},{value:"Debug Workflow",id:"debug-workflow",level:3},{value:"\u26a1 Performance Quick Wins",id:"-performance-quick-wins",level:2},{value:"Memory Optimization",id:"memory-optimization",level:3},{value:"Event Subscription Management",id:"event-subscription-management",level:3},{value:"Avoid Common Performance Traps",id:"avoid-common-performance-traps",level:3},{value:"\ud83c\udfae Game-Specific Patterns",id:"-game-specific-patterns",level:2},{value:"Mobile Game Pattern",id:"mobile-game-pattern",level:3},{value:"RPG Pattern",id:"rpg-pattern",level:3},{value:"Platformer Pattern",id:"platformer-pattern",level:3},{value:"\ud83e\uddea Testing Recipes",id:"-testing-recipes",level:2},{value:"Unit Test Template",id:"unit-test-template",level:3},{value:"Integration Test Template",id:"integration-test-template",level:3},{value:"\ud83d\udea8 Common Pitfalls &amp; Solutions",id:"-common-pitfalls--solutions",level:2},{value:"Memory Leak Prevention",id:"memory-leak-prevention",level:3},{value:"Null Reference Prevention",id:"null-reference-prevention",level:3},{value:"Event Order Dependencies",id:"event-order-dependencies",level:3},{value:"\ud83d\udcdd Cheat Sheet",id:"-cheat-sheet",level:2},{value:"Most Used Code Snippets",id:"most-used-code-snippets",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"soapkit-quick-reference-guide",children:"SoapKit Quick Reference Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide provides quick recipes and common patterns for using SoapKit Events and Variables effectively. Perfect for developers who want to quickly implement professional game architecture patterns."}),"\n",(0,t.jsx)(n.h2,{id:"-quick-setup-recipes",children:"\ud83d\ude80 Quick Setup Recipes"}),"\n",(0,t.jsx)(n.h3,{id:"player-health-system-2-minutes",children:"Player Health System (2 minutes)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Assets Needed:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Create > SoapKit > Variables > Int Variable \u2192 "PlayerHealth"\nCreate > SoapKit > Variables > Int Variable \u2192 "MaxHealth"  \nCreate > SoapKit > Events > Int Event \u2192 "OnHealthChanged"\nCreate > SoapKit > Events > Unit Event \u2192 "OnPlayerDied"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class HealthSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntVariable maxHealth;\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    \n    void Start()\n    {\n        health.OnValueChanged += (h) => onHealthChanged.Raise(h);\n        health.OnValueChanged += CheckDeath;\n    }\n    \n    public void TakeDamage(int damage) => health.Subtract(damage);\n    public void Heal(int amount) => health.Add(Mathf.Min(amount, maxHealth.Value - health.Value));\n    \n    private void CheckDeath(int h) { if (h <= 0) onPlayerDied.Raise(); }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"score-system-1-minute",children:"Score System (1 minute)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Assets:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Create > SoapKit > Variables > Int Variable \u2192 "PlayerScore"\nCreate > SoapKit > Events > Int Event \u2192 "OnScoreChanged"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class ScoreManager : MonoBehaviour\n{\n    [SerializeField] private IntVariable score;\n    [SerializeField] private IntGameEvent onScoreChanged;\n    \n    void Start() => score.OnValueChanged += onScoreChanged.Raise;\n    \n    public void AddScore(int points) => score.Add(points);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ui-health-bar-1-minute",children:"UI Health Bar (1 minute)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class HealthBar : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private IntVariable maxHealth;\n    [SerializeField] private Slider healthSlider;\n    \n    void OnEnable() => onHealthChanged.AddListener(UpdateBar);\n    void OnDisable() => onHealthChanged.RemoveListener(UpdateBar);\n    \n    private void UpdateBar(int health)\n    {\n        healthSlider.value = (float)health / maxHealth.Value;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-common-patterns",children:"\ud83c\udfaf Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"observer-pattern-reactive-systems",children:"Observer Pattern (Reactive Systems)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Multiple systems need to react to changes\n",(0,t.jsx)(n.strong,{children:"Solution:"})," One variable, multiple listeners"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u2705 One source of truth, multiple observers\npublic class GameManager : MonoBehaviour\n{\n    [SerializeField] private BoolVariable isPaused;\n    \n    void Start()\n    {\n        // Multiple systems listen to one variable\n        isPaused.OnValueChanged += pauseMenu.SetActive;\n        isPaused.OnValueChanged += (paused) => Time.timeScale = paused ? 0 : 1;\n        isPaused.OnValueChanged += audioSource.SetPaused;\n        isPaused.OnValueChanged += playerInput.SetEnabled;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"state-machine-pattern",children:"State Machine Pattern"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Assets:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Create > SoapKit > Events > String Event \u2192 "OnStateChanged"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class GameStateMachine : MonoBehaviour\n{\n    [SerializeField] private StringGameEvent onStateChanged;\n    private string currentState = "Menu";\n    \n    public void ChangeState(string newState)\n    {\n        if (currentState == newState) return;\n        currentState = newState;\n        onStateChanged.Raise(newState);\n    }\n    \n    // Other systems listen and react\n    void OnEnable() => onStateChanged.AddListener(HandleStateChange);\n    \n    private void HandleStateChange(string state)\n    {\n        switch(state)\n        {\n            case "Playing": StartGameplay(); break;\n            case "Paused": ShowPauseMenu(); break;\n            case "GameOver": ShowGameOver(); break;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-management-pattern",children:"Resource Management Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class ResourceManager : MonoBehaviour\n{\n    [SerializeField] private IntVariable coins;\n    [SerializeField] private IntVariable gems;\n    [SerializeField] private IntGameEvent onCoinsChanged;\n    [SerializeField] private IntGameEvent onGemsChanged;\n    [SerializeField] private BoolGameEvent onPurchaseResult;\n    \n    void Start()\n    {\n        coins.OnValueChanged += onCoinsChanged.Raise;\n        gems.OnValueChanged += onGemsChanged.Raise;\n    }\n    \n    public void TryPurchase(int coinCost, int gemCost = 0)\n    {\n        if (coins.Value >= coinCost && gems.Value >= gemCost)\n        {\n            coins.Subtract(coinCost);\n            gems.Subtract(gemCost);\n            onPurchaseResult.Raise(true); // Success\n        }\n        else\n        {\n            onPurchaseResult.Raise(false); // Failed\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"inventory-system-pattern",children:"Inventory System Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class SimpleInventory : MonoBehaviour\n{\n    [SerializeField] private IntVariable itemCount;\n    [SerializeField] private IntVariable maxCapacity;\n    [SerializeField] private StringGameEvent onItemAdded;\n    [SerializeField] private BoolGameEvent onInventoryFull;\n    \n    public void AddItem(string itemName)\n    {\n        if (itemCount.Value >= maxCapacity.Value)\n        {\n            onInventoryFull.Raise(true);\n            return;\n        }\n        \n        itemCount.Increment();\n        onItemAdded.Raise(itemName);\n        \n        if (itemCount.Value >= maxCapacity.Value)\n            onInventoryFull.Raise(true);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-editor-workflow-tips",children:"\ud83d\udee0\ufe0f Editor Workflow Tips"}),"\n",(0,t.jsx)(n.h3,{id:"asset-organization",children:"Asset Organization"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Recommended Folder Structure:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Assets/Data/\n\u251c\u2500\u2500 Variables/\n\u2502   \u251c\u2500\u2500 Player/\n\u2502   \u2502   \u251c\u2500\u2500 PlayerHealth.asset\n\u2502   \u2502   \u251c\u2500\u2500 PlayerScore.asset\n\u2502   \u2502   \u2514\u2500\u2500 PlayerName.asset\n\u2502   \u2514\u2500\u2500 Game/\n\u2502       \u251c\u2500\u2500 GameScore.asset\n\u2502       \u2514\u2500\u2500 IsPaused.asset\n\u2514\u2500\u2500 Events/\n    \u251c\u2500\u2500 Player/\n    \u2502   \u251c\u2500\u2500 OnPlayerDied.asset\n    \u2502   \u2514\u2500\u2500 OnHealthChanged.asset\n    \u2514\u2500\u2500 Game/\n        \u251c\u2500\u2500 OnGameStart.asset\n        \u2514\u2500\u2500 OnLevelComplete.asset\n"})}),"\n",(0,t.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Variables:"})," Descriptive nouns"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.code,{children:"PlayerHealth"}),", ",(0,t.jsx)(n.code,{children:"MaxHealth"}),", ",(0,t.jsx)(n.code,{children:"GameScore"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u274c ",(0,t.jsx)(n.code,{children:"health"}),", ",(0,t.jsx)(n.code,{children:"max"}),", ",(0,t.jsx)(n.code,{children:"score"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Events:"}),' Action-oriented with "On" prefix']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.code,{children:"OnHealthChanged"}),", ",(0,t.jsx)(n.code,{children:"OnPlayerDied"}),", ",(0,t.jsx)(n.code,{children:"OnLevelComplete"})]}),"\n",(0,t.jsxs)(n.li,{children:["\u274c ",(0,t.jsx)(n.code,{children:"HealthChange"}),", ",(0,t.jsx)(n.code,{children:"PlayerDeath"}),", ",(0,t.jsx)(n.code,{children:"LevelDone"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"batch-asset-creation",children:"Batch Asset Creation"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.strong,{children:"SoapKit Asset Creator"})," for efficiency:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Tools > SoapKit > Asset Creator"})}),"\n",(0,t.jsxs)(n.li,{children:["Select ",(0,t.jsx)(n.strong,{children:"Batch Creation"})," mode"]}),"\n",(0,t.jsx)(n.li,{children:"Choose variable/event types"}),"\n",(0,t.jsx)(n.li,{children:"Enter names (one per line)"}),"\n",(0,t.jsx)(n.li,{children:"Set output folder"}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Create All"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debug-workflow",children:"Debug Workflow"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Daily Debugging Routine:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Open Debug Window"})," (",(0,t.jsx)(n.code,{children:"Tools > SoapKit > Debug Window"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor Tab:"})," Watch key variables during gameplay"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Events Tab:"})," Test events manually"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Tab:"})," Check for bottlenecks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependencies Tab:"})," Visualize system relationships"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-performance-quick-wins",children:"\u26a1 Performance Quick Wins"}),"\n",(0,t.jsx)(n.h3,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Cache references, avoid repeated lookups\npublic class OptimizedSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable health;\n    private int cachedHealth;\n    \n    void Start()\n    {\n        cachedHealth = health.Value;\n        health.OnValueChanged += UpdateCache;\n    }\n    \n    private void UpdateCache(int newHealth) => cachedHealth = newHealth;\n    \n    // Use cached value instead of health.Value in Update()\n    void Update()\n    {\n        if (cachedHealth <= 0) HandleDeath();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-subscription-management",children:"Event Subscription Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Use OnEnable/OnDisable for temporary listeners\npublic class TemporaryListener : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onScoreChanged;\n    \n    void OnEnable() => onScoreChanged.AddListener(HandleScore);\n    void OnDisable() => onScoreChanged.RemoveListener(HandleScore);\n    \n    private void HandleScore(int score) { /* Handle score */ }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"avoid-common-performance-traps",children:"Avoid Common Performance Traps"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c DON'T: Access .Value repeatedly\nvoid Update()\n{\n    if (health.Value <= 0 && health.Value > previousHealth) // BAD\n        HandleHealthChange();\n}\n\n// \u2705 DO: Cache and use change events\nprivate int cachedHealth;\nvoid Start()\n{\n    cachedHealth = health.Value;\n    health.OnValueChanged += (h) => cachedHealth = h;\n}\n\nvoid Update()\n{\n    if (cachedHealth <= 0) // GOOD\n        HandleHealthChange();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-game-specific-patterns",children:"\ud83c\udfae Game-Specific Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"mobile-game-pattern",children:"Mobile Game Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class MobileGameManager : MonoBehaviour\n{\n    [Header("Progression")]\n    [SerializeField] private IntVariable playerLevel;\n    [SerializeField] private FloatVariable experience;\n    [SerializeField] private IntVariable currency;\n    \n    [Header("Session")]\n    [SerializeField] private FloatVariable sessionTime;\n    [SerializeField] private BoolVariable isConnected;\n    \n    [Header("Events")]\n    [SerializeField] private UnitGameEvent onLevelUp;\n    [SerializeField] private IntGameEvent onCurrencyChanged;\n    \n    void Start()\n    {\n        // Auto-save on any progression change\n        playerLevel.OnValueChanged += (_) => SaveProgress();\n        experience.OnValueChanged += (_) => SaveProgress();\n        currency.OnValueChanged += onCurrencyChanged.Raise;\n        \n        // Level up check\n        experience.OnValueChanged += CheckLevelUp;\n    }\n    \n    private void CheckLevelUp(float xp)\n    {\n        int requiredXP = playerLevel.Value * 100;\n        if (xp >= requiredXP)\n        {\n            playerLevel.Increment();\n            experience.SetValue(0);\n            onLevelUp.Raise();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"rpg-pattern",children:"RPG Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class RPGCharacter : MonoBehaviour\n{\n    [Header("Core Stats")]\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntVariable mana;\n    [SerializeField] private IntVariable stamina;\n    \n    [Header("Attributes")]  \n    [SerializeField] private IntVariable strength;\n    [SerializeField] private IntVariable intelligence;\n    [SerializeField] private IntVariable dexterity;\n    \n    [Header("Events")]\n    [SerializeField] private StringGameEvent onStatChanged;\n    \n    void Start()\n    {\n        // Link derived stats to base stats\n        strength.OnValueChanged += (str) => \n        {\n            health.Max = 100 + (str * 10);\n            onStatChanged.Raise($"Strength: {str}");\n        };\n        \n        intelligence.OnValueChanged += (intel) => \n        {\n            mana.Max = 50 + (intel * 15);\n            onStatChanged.Raise($"Intelligence: {intel}");\n        };\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"platformer-pattern",children:"Platformer Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class PlatformerController : MonoBehaviour\n{\n    [Header("Movement")]\n    [SerializeField] private FloatVariable moveSpeed;\n    [SerializeField] private FloatVariable jumpPower;\n    [SerializeField] private BoolVariable isGrounded;\n    \n    [Header("Events")]\n    [SerializeField] private Vector2GameEvent onPlayerMoved;\n    [SerializeField] private UnitGameEvent onJumped;\n    [SerializeField] private UnitGameEvent onLanded;\n    \n    void Update()\n    {\n        // Movement\n        float horizontal = Input.GetAxis("Horizontal");\n        if (horizontal != 0)\n        {\n            Vector2 movement = new Vector2(horizontal * moveSpeed.Value, 0);\n            onPlayerMoved.Raise(movement);\n        }\n        \n        // Jumping\n        if (Input.GetKeyDown(KeyCode.Space) && isGrounded.Value)\n        {\n            isGrounded.SetValue(false);\n            onJumped.Raise();\n        }\n    }\n    \n    void OnCollisionEnter2D(Collision2D col)\n    {\n        if (col.gameObject.CompareTag("Ground"))\n        {\n            isGrounded.SetValue(true);\n            onLanded.Raise();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-testing-recipes",children:"\ud83e\uddea Testing Recipes"}),"\n",(0,t.jsx)(n.h3,{id:"unit-test-template",children:"Unit Test Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic void TestHealthSystem()\n{\n    // Arrange\n    var health = ScriptableObject.CreateInstance<IntVariable>();\n    var onDied = ScriptableObject.CreateInstance<UnitGameEvent>();\n    \n    bool playerDied = false;\n    onDied.AddListener(() => playerDied = true);\n    \n    var healthSystem = new GameObject().AddComponent<HealthSystem>();\n    // Set up healthSystem with health and onDied...\n    \n    // Act\n    healthSystem.TakeDamage(150);\n    \n    // Assert\n    Assert.AreEqual(0, health.Value);\n    Assert.IsTrue(playerDied);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-test-template",children:"Integration Test Template"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void TestScoreUIIntegration()\n{\n    // Test that UI updates when score changes\n    var score = ScriptableObject.CreateInstance<IntVariable>();\n    var onScoreChanged = ScriptableObject.CreateInstance<IntGameEvent>();\n    \n    var ui = new GameObject().AddComponent<ScoreUI>();\n    // Set up UI with score and event...\n    \n    score.SetValue(100);\n    \n    Assert.AreEqual("100", ui.scoreText.text);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-common-pitfalls--solutions",children:"\ud83d\udea8 Common Pitfalls & Solutions"}),"\n",(0,t.jsx)(n.h3,{id:"memory-leak-prevention",children:"Memory Leak Prevention"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c WRONG: Forgetting to unsubscribe\npublic class LeakyListener : MonoBehaviour\n{\n    void Start()\n    {\n        someEvent.AddListener(HandleEvent);\n        // Missing unsubscribe = memory leak!\n    }\n}\n\n// \u2705 CORRECT: Always unsubscribe\npublic class ProperListener : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent someEvent;\n    \n    void OnEnable() => someEvent.AddListener(HandleEvent);\n    void OnDisable() => someEvent.RemoveListener(HandleEvent);\n    \n    private void HandleEvent(int value) { /* Handle */ }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"null-reference-prevention",children:"Null Reference Prevention"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Always null-check in OnDisable\nvoid OnDisable()\n{\n    if (healthEvent != null)\n        healthEvent.RemoveListener(OnHealthChanged);\n    \n    if (scoreEvent != null)\n        scoreEvent.RemoveListener(OnScoreChanged);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-order-dependencies",children:"Event Order Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c WRONG: Depending on event order\nvoid Start()\n{\n    healthEvent.AddListener(UpdateUI);     // Which runs first?\n    healthEvent.AddListener(CheckDeath);   // Undefined order!\n}\n\n// \u2705 CORRECT: Use separate events for ordered operations\nvoid Start()\n{\n    onHealthChanged.AddListener(UpdateUI);\n    onPlayerDied.AddListener(HandleDeath); // Clear sequence\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-cheat-sheet",children:"\ud83d\udcdd Cheat Sheet"}),"\n",(0,t.jsx)(n.h3,{id:"most-used-code-snippets",children:"Most Used Code Snippets"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Variable Declaration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private IntVariable variableName;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Event Declaration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private IntGameEvent eventName;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Subscribe Pattern:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void OnEnable() => eventName.AddListener(MethodName);\nvoid OnDisable() => eventName.RemoveListener(MethodName);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Variable Operations:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"variable.SetValue(newValue);\nvariable.Add(amount);\nvariable.OnValueChanged += HandleChange;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Event Operations:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"eventName.Raise(value);\neventName.AddListener(method);\neventName.RemoveListener(method);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["This quick reference covers 90% of common SoapKit usage patterns. For advanced scenarios, check out the ",(0,t.jsx)(n.a,{href:"../advanced/patterns",children:"Advanced Patterns Guide"})," and ",(0,t.jsx)(n.a,{href:"../advanced/best-practices",children:"Best Practices"})," sections. Happy coding! \ud83c\udfaf"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);