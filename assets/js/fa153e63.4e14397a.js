"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[5839],{3883:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"advanced/custom-events","title":"Creating Custom Events","description":"While SoapKit provides events for all common Unity types, you\'ll often need custom events for your specific game data. This guide shows you how to create powerful, type-safe custom events that integrate seamlessly with SoapKit\'s professional debugging tools.","source":"@site/docs/advanced/custom-events.md","sourceDirName":"advanced","slug":"/advanced/custom-events","permalink":"/SoapKit-Doc/docs/advanced/custom-events","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/custom-events.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Creating Custom Events","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"SOAP Performance Analyzer","permalink":"/SoapKit-Doc/docs/editor-tools/performance-analyzer"},"next":{"title":"Custom Variables","permalink":"/SoapKit-Doc/docs/advanced/custom-variables"}}');var i=t(4848),s=t(8453);const r={title:"Creating Custom Events",sidebar_position:1},l="Creating Custom Events",o={},c=[{value:"Basic Custom Events",id:"basic-custom-events",level:2},{value:"Creating a Simple Custom Event",id:"creating-a-simple-custom-event",level:3},{value:"Using Your Custom Event",id:"using-your-custom-event",level:3},{value:"Advanced Custom Events",id:"advanced-custom-events",level:2},{value:"Enum-Based Events",id:"enum-based-events",level:3},{value:"Complex Data Events",id:"complex-data-events",level:3},{value:"Events with Custom Behavior",id:"events-with-custom-behavior",level:2},{value:"Events with Built-in Logic",id:"events-with-built-in-logic",level:3},{value:"Events with Conditions",id:"events-with-conditions",level:3},{value:"Integration with SoapKit Debugging",id:"integration-with-soapkit-debugging",level:2},{value:"Making Events Debug-Friendly",id:"making-events-debug-friendly",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Testing Custom Events",id:"testing-custom-events",level:2},{value:"Unit Testing Framework",id:"unit-testing-framework",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Event Naming",id:"event-naming",level:3},{value:"Data Structure Design",id:"data-structure-design",level:3},{value:"Performance Guidelines",id:"performance-guidelines",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Event Factories",id:"event-factories",level:3},{value:"Event Composition",id:"event-composition",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-custom-events",children:"Creating Custom Events"})}),"\n",(0,i.jsx)(n.p,{children:"While SoapKit provides events for all common Unity types, you'll often need custom events for your specific game data. This guide shows you how to create powerful, type-safe custom events that integrate seamlessly with SoapKit's professional debugging tools."}),"\n",(0,i.jsx)(n.h2,{id:"basic-custom-events",children:"Basic Custom Events"}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-simple-custom-event",children:"Creating a Simple Custom Event"}),"\n",(0,i.jsx)(n.p,{children:"For simple data types, creating custom events is straightforward:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\n[System.Serializable]\npublic struct PlayerStats\n{\n    public int health;\n    public int mana;\n    public int level;\n    \n    public PlayerStats(int health, int mana, int level)\n    {\n        this.health = health;\n        this.mana = mana;\n        this.level = level;\n    }\n}\n\n[CreateAssetMenu(menuName = "SoapKit/Events/PlayerStats Event")]\npublic class PlayerStatsGameEvent : GameEvent<PlayerStats>\n{\n    // That\'s it! The base class handles everything\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-your-custom-event",children:"Using Your Custom Event"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class PlayerManager : MonoBehaviour\n{\n    [SerializeField] private PlayerStatsGameEvent onPlayerStatsChanged;\n    \n    private PlayerStats currentStats = new PlayerStats(100, 50, 1);\n    \n    public void UpdateStats(int healthChange, int manaChange)\n    {\n        currentStats.health += healthChange;\n        currentStats.mana += manaChange;\n        \n        // Raise the custom event\n        onPlayerStatsChanged.Raise(currentStats);\n    }\n}\n\npublic class StatsUI : MonoBehaviour\n{\n    [SerializeField] private PlayerStatsGameEvent onPlayerStatsChanged;\n    [SerializeField] private Text healthText;\n    [SerializeField] private Text manaText;\n    [SerializeField] private Text levelText;\n    \n    void OnEnable()\n    {\n        onPlayerStatsChanged.AddListener(UpdateUI);\n    }\n    \n    void OnDisable()\n    {\n        if (onPlayerStatsChanged != null)\n            onPlayerStatsChanged.RemoveListener(UpdateUI);\n    }\n    \n    private void UpdateUI(PlayerStats stats)\n    {\n        healthText.text = $"Health: {stats.health}";\n        manaText.text = $"Mana: {stats.mana}";\n        levelText.text = $"Level: {stats.level}";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-custom-events",children:"Advanced Custom Events"}),"\n",(0,i.jsx)(n.h3,{id:"enum-based-events",children:"Enum-Based Events"}),"\n",(0,i.jsx)(n.p,{children:"For state management and game flow control:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public enum GameState\n{\n    MainMenu,\n    Loading,\n    Playing,\n    Paused,\n    GameOver,\n    Victory\n}\n\n[System.Serializable]\npublic struct GameStateTransition\n{\n    public GameState fromState;\n    public GameState toState;\n    public float transitionTime;\n    \n    public GameStateTransition(GameState from, GameState to, float time = 0f)\n    {\n        fromState = from;\n        toState = to;\n        transitionTime = time;\n    }\n}\n\n[CreateAssetMenu(menuName = "SoapKit/Events/Game State Transition Event")]\npublic class GameStateTransitionEvent : GameEvent<GameStateTransition>\n{\n    // Add custom validation if needed\n    protected override bool ValidateEventData(GameStateTransition data)\n    {\n        // Prevent invalid transitions\n        if (data.fromState == data.toState)\n        {\n            Debug.LogWarning("Cannot transition to the same state");\n            return false;\n        }\n        \n        // Add business logic validation\n        if (data.fromState == GameState.Loading && data.toState == GameState.GameOver)\n        {\n            Debug.LogWarning("Cannot go directly from Loading to GameOver");\n            return false;\n        }\n        \n        return true;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"complex-data-events",children:"Complex Data Events"}),"\n",(0,i.jsx)(n.p,{children:"For sophisticated game systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[System.Serializable]\npublic class InventoryItem\n{\n    public string itemId;\n    public string displayName;\n    public int quantity;\n    public Sprite icon;\n    public ItemRarity rarity;\n    \n    public InventoryItem(string id, string name, int qty, Sprite icon, ItemRarity rarity)\n    {\n        itemId = id;\n        displayName = name;\n        quantity = qty;\n        this.icon = icon;\n        this.rarity = rarity;\n    }\n}\n\npublic enum ItemRarity { Common, Uncommon, Rare, Epic, Legendary }\n\n[System.Serializable]\npublic struct ItemTransactionData\n{\n    public InventoryItem item;\n    public int quantityChanged;\n    public TransactionType transactionType;\n    public string source; // Where the transaction came from\n    \n    public ItemTransactionData(InventoryItem item, int quantity, TransactionType type, string source)\n    {\n        this.item = item;\n        quantityChanged = quantity;\n        transactionType = type;\n        this.source = source;\n    }\n}\n\npublic enum TransactionType { Add, Remove, Use, Sell, Buy }\n\n[CreateAssetMenu(menuName = "SoapKit/Events/Inventory Transaction Event")]\npublic class InventoryTransactionEvent : GameEvent<ItemTransactionData>\n{\n    [Header("Event Configuration")]\n    [SerializeField] private bool logTransactions = true;\n    [SerializeField] private bool validateQuantities = true;\n    \n    protected override void OnEventRaised(ItemTransactionData data)\n    {\n        base.OnEventRaised(data);\n        \n        if (logTransactions)\n        {\n            Debug.Log($"Inventory: {data.transactionType} {data.quantityChanged}x {data.item.displayName} from {data.source}");\n        }\n    }\n    \n    protected override bool ValidateEventData(ItemTransactionData data)\n    {\n        if (data.item == null)\n        {\n            Debug.LogError("InventoryTransactionEvent: Item cannot be null");\n            return false;\n        }\n        \n        if (validateQuantities && data.quantityChanged <= 0)\n        {\n            Debug.LogError("InventoryTransactionEvent: Quantity must be positive");\n            return false;\n        }\n        \n        return true;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"events-with-custom-behavior",children:"Events with Custom Behavior"}),"\n",(0,i.jsx)(n.h3,{id:"events-with-built-in-logic",children:"Events with Built-in Logic"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes you want events that do more than just notify:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[System.Serializable]\npublic struct DamageData\n{\n    public int damage;\n    public DamageType damageType;\n    public GameObject source;\n    public GameObject target;\n    public Vector3 hitPoint;\n    public bool isCritical;\n    \n    public DamageData(int damage, DamageType type, GameObject source, GameObject target, Vector3 hitPoint, bool critical = false)\n    {\n        this.damage = damage;\n        damageType = type;\n        this.source = source;\n        this.target = target;\n        this.hitPoint = hitPoint;\n        isCritical = critical;\n    }\n}\n\npublic enum DamageType { Physical, Fire, Ice, Lightning, Poison, Healing }\n\n[CreateAssetMenu(menuName = "SoapKit/Events/Damage Event")]\npublic class DamageEvent : GameEvent<DamageData>\n{\n    [Header("Damage Configuration")]\n    [SerializeField] private bool enableDamageReduction = true;\n    [SerializeField] private bool enableCriticalHits = true;\n    [SerializeField] private float criticalMultiplier = 2.0f;\n    \n    // Cache for performance\n    private readonly Dictionary<DamageType, float> damageTypeModifiers = new()\n    {\n        { DamageType.Physical, 1.0f },\n        { DamageType.Fire, 1.2f },\n        { DamageType.Ice, 0.8f },\n        { DamageType.Lightning, 1.5f },\n        { DamageType.Poison, 0.9f },\n        { DamageType.Healing, -1.0f } // Negative damage = healing\n    };\n    \n    protected override void OnEventRaised(DamageData data)\n    {\n        // Process damage before notifying listeners\n        var processedData = ProcessDamage(data);\n        \n        // Call base to notify listeners with processed data\n        base.OnEventRaised(processedData);\n        \n        // Additional post-processing\n        CreateDamageEffects(processedData);\n    }\n    \n    private DamageData ProcessDamage(DamageData original)\n    {\n        var processed = original;\n        \n        // Apply damage type modifiers\n        if (damageTypeModifiers.TryGetValue(original.damageType, out float modifier))\n        {\n            processed.damage = Mathf.RoundToInt(original.damage * modifier);\n        }\n        \n        // Apply critical hit\n        if (enableCriticalHits && original.isCritical)\n        {\n            processed.damage = Mathf.RoundToInt(processed.damage * criticalMultiplier);\n        }\n        \n        // Apply damage reduction from target\n        if (enableDamageReduction && original.target != null)\n        {\n            var defense = original.target.GetComponent<DefenseComponent>();\n            if (defense != null)\n            {\n                processed.damage = Mathf.Max(1, processed.damage - defense.GetDefense(original.damageType));\n            }\n        }\n        \n        return processed;\n    }\n    \n    private void CreateDamageEffects(DamageData data)\n    {\n        // Create visual effects based on damage type\n        // This could raise additional events for VFX systems\n        switch (data.damageType)\n        {\n            case DamageType.Fire:\n                // Raise fire effect event\n                break;\n            case DamageType.Ice:\n                // Raise ice effect event\n                break;\n            // etc.\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"events-with-conditions",children:"Events with Conditions"}),"\n",(0,i.jsx)(n.p,{children:"Create events that only fire under certain conditions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Conditional Score Event")]\npublic class ConditionalScoreEvent : GameEvent<int>\n{\n    [Header("Score Conditions")]\n    [SerializeField] private int minimumScoreToRaise = 0;\n    [SerializeField] private int maximumScoreToRaise = int.MaxValue;\n    [SerializeField] private BoolVariable gameIsActive;\n    [SerializeField] private StringVariable currentLevel;\n    [SerializeField] private string[] allowedLevels;\n    \n    public override void Raise(int score)\n    {\n        // Check all conditions before raising\n        if (!ShouldRaiseEvent(score))\n            return;\n            \n        base.Raise(score);\n    }\n    \n    private bool ShouldRaiseEvent(int score)\n    {\n        // Score range check\n        if (score < minimumScoreToRaise || score > maximumScoreToRaise)\n            return false;\n            \n        // Game state check\n        if (gameIsActive != null && !gameIsActive.Value)\n            return false;\n            \n        // Level restriction check\n        if (allowedLevels != null && allowedLevels.Length > 0 && currentLevel != null)\n        {\n            if (!System.Array.Exists(allowedLevels, level => level == currentLevel.Value))\n                return false;\n        }\n        \n        return true;\n    }\n    \n    protected override void OnEventRaised(int score)\n    {\n        base.OnEventRaised(score);\n        \n        // Additional logic for score milestones\n        CheckScoreMilestones(score);\n    }\n    \n    private void CheckScoreMilestones(int score)\n    {\n        // Could raise additional events for achievements\n        if (score >= 1000 && score < 1100) // First time hitting 1000+\n        {\n            // Raise achievement event\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-soapkit-debugging",children:"Integration with SoapKit Debugging"}),"\n",(0,i.jsx)(n.h3,{id:"making-events-debug-friendly",children:"Making Events Debug-Friendly"}),"\n",(0,i.jsx)(n.p,{children:"Ensure your custom events work well with SoapKit's debugging tools:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Debug-Friendly Event")]\npublic class DebugFriendlyEvent : GameEvent<ComplexData>\n{\n    // Implement ToString for better debug display\n    protected override string GetDebugString(ComplexData data)\n    {\n        return $"ComplexData(id: {data.id}, value: {data.value}, active: {data.isActive})";\n    }\n    \n    // Provide debug information\n    protected override void OnEventRaised(ComplexData data)\n    {\n        base.OnEventRaised(data);\n        \n        #if UNITY_EDITOR && SOAP_DEBUG\n        // Additional debug information in editor\n        UnityEngine.Debug.Log($"[{name}] Raised with data: {GetDebugString(data)}");\n        UnityEngine.Debug.Log($"[{name}] Listener count: {ListenerCount}");\n        #endif\n    }\n    \n    // Custom editor validation\n    #if UNITY_EDITOR\n    protected override void OnValidate()\n    {\n        base.OnValidate();\n        \n        // Custom validation logic\n        if (string.IsNullOrEmpty(name))\n        {\n            Debug.LogWarning($"Event {GetInstanceID()} has no name set");\n        }\n    }\n    #endif\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"For high-frequency events, optimize for performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/High Frequency Event")]\npublic class HighFrequencyEvent : GameEvent<Vector3>\n{\n    [Header("Performance Settings")]\n    [SerializeField] private bool enableThrottling = true;\n    [SerializeField] private float throttleInterval = 0.016f; // ~60fps\n    [SerializeField] private bool enableBatching = true;\n    \n    private float lastRaiseTime;\n    private Vector3 batchedValue;\n    private bool hasBatchedValue;\n    \n    public override void Raise(Vector3 position)\n    {\n        if (enableThrottling)\n        {\n            float currentTime = Time.unscaledTime;\n            \n            if (enableBatching)\n            {\n                // Batch multiple raises within the throttle interval\n                batchedValue = position;\n                hasBatchedValue = true;\n                \n                if (currentTime - lastRaiseTime >= throttleInterval)\n                {\n                    if (hasBatchedValue)\n                    {\n                        base.Raise(batchedValue);\n                        lastRaiseTime = currentTime;\n                        hasBatchedValue = false;\n                    }\n                }\n            }\n            else\n            {\n                // Simple throttling\n                if (currentTime - lastRaiseTime >= throttleInterval)\n                {\n                    base.Raise(position);\n                    lastRaiseTime = currentTime;\n                }\n            }\n        }\n        else\n        {\n            base.Raise(position);\n        }\n    }\n    \n    // Ensure batched events are sent on disable\n    void OnDisable()\n    {\n        if (enableBatching && hasBatchedValue)\n        {\n            base.Raise(batchedValue);\n            hasBatchedValue = false;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-custom-events",children:"Testing Custom Events"}),"\n",(0,i.jsx)(n.h3,{id:"unit-testing-framework",children:"Unit Testing Framework"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using NUnit.Framework;\nusing UnityEngine;\n\n[TestFixture]\npublic class CustomEventTests\n{\n    private PlayerStatsGameEvent testEvent;\n    private bool eventWasRaised;\n    private PlayerStats receivedStats;\n    \n    [SetUp]\n    public void Setup()\n    {\n        testEvent = ScriptableObject.CreateInstance<PlayerStatsGameEvent>();\n        eventWasRaised = false;\n        receivedStats = default;\n    }\n    \n    [TearDown]\n    public void Teardown()\n    {\n        if (testEvent != null)\n            ScriptableObject.DestroyImmediate(testEvent);\n    }\n    \n    [Test]\n    public void TestEventRaisesCorrectly()\n    {\n        // Arrange\n        var testStats = new PlayerStats(100, 50, 5);\n        testEvent.AddListener(OnTestEventRaised);\n        \n        // Act\n        testEvent.Raise(testStats);\n        \n        // Assert\n        Assert.IsTrue(eventWasRaised, "Event should have been raised");\n        Assert.AreEqual(testStats.health, receivedStats.health);\n        Assert.AreEqual(testStats.mana, receivedStats.mana);\n        Assert.AreEqual(testStats.level, receivedStats.level);\n    }\n    \n    [Test]\n    public void TestEventValidation()\n    {\n        // Test custom validation logic\n        var invalidStats = new PlayerStats(-10, -5, 0); // Invalid values\n        \n        // If your event has validation, test it\n        Assert.IsFalse(testEvent.ValidateEventData(invalidStats));\n    }\n    \n    private void OnTestEventRaised(PlayerStats stats)\n    {\n        eventWasRaised = true;\n        receivedStats = stats;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void TestEventSystemIntegration()\n{\n    // Test event chain: Damage -> Health Change -> Death\n    var damageEvent = ScriptableObject.CreateInstance<DamageEvent>();\n    var healthChangeEvent = ScriptableObject.CreateInstance<IntGameEvent>();\n    var deathEvent = ScriptableObject.CreateInstance<UnitGameEvent>();\n    \n    bool playerDied = false;\n    deathEvent.AddListener(() => playerDied = true);\n    \n    // Create a test health system\n    var healthSystem = new GameObject().AddComponent<HealthSystem>();\n    // ... setup health system with events\n    \n    // Act - cause damage that should kill player\n    var lethalDamage = new DamageData(1000, DamageType.Physical, null, healthSystem.gameObject, Vector3.zero);\n    damageEvent.Raise(lethalDamage);\n    \n    // Assert\n    Assert.IsTrue(playerDied, "Player should have died from lethal damage");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"event-naming",children:"Event Naming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Clear, descriptive names\nOnPlayerHealthChanged\nOnInventoryItemAdded\nOnQuestCompleted\nOnLevelTransitionStarted\n\n// \u274c Bad: Vague or abbreviated names\nOnHC  // What does HC mean?\nPlayerEvent // Too generic\nItemChange // Unclear what changed\n"})}),"\n",(0,i.jsx)(n.h3,{id:"data-structure-design",children:"Data Structure Design"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Immutable, serializable structs\n[System.Serializable]\npublic struct QuestData\n{\n    public readonly string questId;\n    public readonly string questName;\n    public readonly QuestStatus status;\n    public readonly float progress;\n    \n    public QuestData(string id, string name, QuestStatus status, float progress)\n    {\n        questId = id;\n        questName = name;\n        this.status = status;\n        this.progress = Mathf.Clamp01(progress);\n    }\n}\n\n// \u274c Bad: Mutable classes with no validation\npublic class BadQuestData\n{\n    public string questId; // Can be null\n    public QuestStatus status; // Can be invalid\n    public float progress; // Can be negative or > 1\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Good: Lightweight, focused events\npublic struct MovementData\n{\n    public Vector3 position;\n    public Vector3 velocity;\n}\n\n// \u274c Bad: Heavy events with unnecessary data\npublic class HeavyMovementData\n{\n    public Vector3 position;\n    public Vector3 velocity;\n    public Transform transform; // Heavy reference\n    public Collider[] nearbyColliders; // Expensive array\n    public Dictionary<string, object> metadata; // Unnecessary complexity\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"event-factories",children:"Event Factories"}),"\n",(0,i.jsx)(n.p,{children:"Create events dynamically for modular systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public static class EventFactory\n{\n    public static GameEvent<T> CreateEvent<T>(string eventName) where T : struct\n    {\n        var eventAsset = ScriptableObject.CreateInstance<GameEvent<T>>();\n        eventAsset.name = eventName;\n        \n        #if UNITY_EDITOR\n        // Save to assets in editor\n        UnityEditor.AssetDatabase.CreateAsset(eventAsset, $"Assets/Events/Generated/{eventName}.asset");\n        UnityEditor.AssetDatabase.SaveAssets();\n        #endif\n        \n        return eventAsset;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"event-composition",children:"Event Composition"}),"\n",(0,i.jsx)(n.p,{children:"Combine multiple events for complex scenarios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CompositeQuestEvent : MonoBehaviour\n{\n    [SerializeField] private QuestGameEvent onQuestStarted;\n    [SerializeField] private QuestGameEvent onQuestUpdated;\n    [SerializeField] private QuestGameEvent onQuestCompleted;\n    \n    public void RaiseQuestEvent(QuestData quest)\n    {\n        switch (quest.status)\n        {\n            case QuestStatus.Started:\n                onQuestStarted.Raise(quest);\n                break;\n            case QuestStatus.InProgress:\n                onQuestUpdated.Raise(quest);\n                break;\n            case QuestStatus.Completed:\n                onQuestCompleted.Raise(quest);\n                break;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Custom events are the key to extending SoapKit's power to match your specific game needs. By following these patterns and best practices, you'll create robust, performant events that integrate seamlessly with SoapKit's professional tooling ecosystem. \ud83c\udfaf\u2728"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./custom-variables",children:"Custom Variables"})," - Create custom variable types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./patterns",children:"Advanced Patterns"})," - Complex SOAP architecture patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./performance",children:"Performance Optimization"})," - Optimize your SOAP systems"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);