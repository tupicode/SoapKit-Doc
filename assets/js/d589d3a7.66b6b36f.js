"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[7924],{6475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"Get up and running with SoapKit in under 10 minutes! This guide will walk you through installation, your first event and variable, and a complete working example.","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/SoapKit-Doc/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Getting Started","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Why Choose SoapKit?","permalink":"/SoapKit-Doc/docs/why-soapkit"},"next":{"title":"Events System","permalink":"/SoapKit-Doc/docs/core-systems/events"}}');var s=t(4848),l=t(8453);const a={title:"Getting Started",sidebar_position:3},r="Getting Started with SoapKit",d={},h=[{value:"\ud83d\udce6 Installation",id:"-installation",level:2},{value:"\u2705 Verify Installation",id:"-verify-installation",level:2},{value:"\ud83c\udfaf Your First 5 Minutes with SoapKit",id:"-your-first-5-minutes-with-soapkit",level:2},{value:"Step 1: Create Your Assets",id:"step-1-create-your-assets",level:3},{value:"Step 2: Create the Health System",id:"step-2-create-the-health-system",level:3},{value:"Step 3: Create the UI System",id:"step-3-create-the-ui-system",level:3},{value:"Step 4: Set Up the Scene",id:"step-4-set-up-the-scene",level:3},{value:"Step 5: Test Your System",id:"step-5-test-your-system",level:3},{value:"\ud83c\udf89 Congratulations!",id:"-congratulations",level:2},{value:"\ud83d\ude80 Next Steps",id:"-next-steps",level:2},{value:"Quick Wins (5-10 minutes each)",id:"quick-wins-5-10-minutes-each",level:3},{value:"Build Something Bigger (30-60 minutes)",id:"build-something-bigger-30-60-minutes",level:3},{value:"\ud83d\udca1 Pro Tips",id:"-pro-tips",level:2},{value:"<strong>Organization Best Practices</strong>",id:"organization-best-practices",level:3},{value:"<strong>Naming Conventions</strong>",id:"naming-conventions",level:3},{value:"<strong>Performance Tips</strong>",id:"performance-tips",level:3},{value:"\ud83c\udd98 Need Help?",id:"-need-help",level:2},{value:"<strong>Common Issues</strong>",id:"common-issues",level:3},{value:"<strong>Get Support</strong>",id:"get-support",level:3}];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started-with-soapkit",children:"Getting Started with SoapKit"})}),"\n",(0,s.jsx)(n.p,{children:"Get up and running with SoapKit in under 10 minutes! This guide will walk you through installation, your first event and variable, and a complete working example."}),"\n",(0,s.jsx)(n.h2,{id:"-installation",children:"\ud83d\udce6 Installation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Download from Asset Store"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Search for "SoapKit" in the Asset Store'}),"\n",(0,s.jsx)(n.li,{children:"Download and import the package"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-verify-installation",children:"\u2705 Verify Installation"}),"\n",(0,s.jsx)(n.p,{children:"After installation, verify everything is working:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check Menu Items"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tools > SoapKit > Debug Window"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Window > SoapKit > Asset Creator"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check Create Menu"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Right-click in Project window"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Variables > Int Variable"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Events > Unit Event"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If you see these menu items, you're ready to go! \ud83c\udf89"}),"\n",(0,s.jsx)(n.h2,{id:"-your-first-5-minutes-with-soapkit",children:"\ud83c\udfaf Your First 5 Minutes with SoapKit"}),"\n",(0,s.jsx)(n.p,{children:"Let's build a simple health system to understand the core concepts."}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-your-assets",children:"Step 1: Create Your Assets"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create a Health Variable:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Right-click in your Project window"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Variables > Int Variable"})}),"\n",(0,s.jsxs)(n.li,{children:["Name it ",(0,s.jsx)(n.code,{children:"PlayerHealth"})]}),"\n",(0,s.jsxs)(n.li,{children:["Set the value to ",(0,s.jsx)(n.code,{children:"100"})," in the inspector"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create Health Events:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Events > Int Event"})}),"\n",(0,s.jsxs)(n.li,{children:["Name it ",(0,s.jsx)(n.code,{children:"OnHealthChanged"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Events > Unit Event"})}),"\n",(0,s.jsxs)(n.li,{children:["Name it ",(0,s.jsx)(n.code,{children:"OnPlayerDied"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Your Project should now look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Assets/\n\u251c\u2500\u2500 PlayerHealth (IntVariable)\n\u251c\u2500\u2500 OnHealthChanged (IntGameEvent)\n\u2514\u2500\u2500 OnPlayerDied (UnitGameEvent)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-create-the-health-system",children:"Step 2: Create the Health System"}),"\n",(0,s.jsxs)(n.p,{children:["Create a new script called ",(0,s.jsx)(n.code,{children:"HealthSystem.cs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthSystem.cs"',children:'using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthSystem : MonoBehaviour\n{\n    [Header("Health Configuration")]\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntVariable maxHealth;\n    \n    [Header("Events")]\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    \n    void Start()\n    {\n        // Subscribe to health changes\n        health.OnValueChanged += OnHealthValueChanged;\n        \n        // Initialize health\n        if (maxHealth != null)\n            health.SetValue(maxHealth.Value);\n        else\n            health.SetValue(100);\n    }\n    \n    void OnDestroy()\n    {\n        // Always unsubscribe to prevent memory leaks\n        if (health != null)\n            health.OnValueChanged -= OnHealthValueChanged;\n    }\n    \n    public void TakeDamage(int damage)\n    {\n        // Use built-in math operations\n        health.Subtract(damage);\n        \n        // Check for death\n        if (health.Value <= 0)\n        {\n            health.SetValue(0); // Clamp to 0\n            onPlayerDied.Raise();\n        }\n    }\n    \n    public void Heal(int amount)\n    {\n        health.Add(amount);\n        \n        // Clamp to max health\n        if (maxHealth != null && health.Value > maxHealth.Value)\n            health.SetValue(maxHealth.Value);\n    }\n    \n    private void OnHealthValueChanged(int newHealth)\n    {\n        // Raise event for UI and other systems\n        onHealthChanged.Raise(newHealth);\n        \n        Debug.Log($"Health changed to: {newHealth}");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-create-the-ui-system",children:"Step 3: Create the UI System"}),"\n",(0,s.jsxs)(n.p,{children:["Create a script called ",(0,s.jsx)(n.code,{children:"HealthUI.cs"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthUI.cs"',children:'using UnityEngine;\nusing UnityEngine.UI;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthUI : MonoBehaviour\n{\n    [Header("UI References")]\n    [SerializeField] private Slider healthSlider;\n    [SerializeField] private Text healthText;\n    \n    [Header("Health Variables")]\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntVariable maxHealth;\n    \n    [Header("Events")]\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    \n    void Start()\n    {\n        // Subscribe to events\n        onHealthChanged.AddListener(UpdateHealthUI);\n        onPlayerDied.AddListener(OnPlayerDied);\n        \n        // Initialize UI\n        UpdateHealthUI(health.Value);\n    }\n    \n    void OnDestroy()\n    {\n        // Unsubscribe from events\n        if (onHealthChanged != null)\n            onHealthChanged.RemoveListener(UpdateHealthUI);\n        if (onPlayerDied != null)\n            onPlayerDied.RemoveListener(OnPlayerDied);\n    }\n    \n    private void UpdateHealthUI(int currentHealth)\n    {\n        // Update slider\n        if (healthSlider != null)\n        {\n            healthSlider.maxValue = maxHealth.Value;\n            healthSlider.value = currentHealth;\n        }\n        \n        // Update text\n        if (healthText != null)\n            healthText.text = $"{currentHealth} / {maxHealth.Value}";\n    }\n    \n    private void OnPlayerDied()\n    {\n        Debug.Log("Game Over!");\n        // Handle game over logic here\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-set-up-the-scene",children:"Step 4: Set Up the Scene"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create the Health System GameObject:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Create empty GameObject, name it "HealthSystem"'}),"\n",(0,s.jsxs)(n.li,{children:["Add the ",(0,s.jsx)(n.code,{children:"HealthSystem"})," component"]}),"\n",(0,s.jsx)(n.li,{children:"Drag your created assets to the appropriate fields"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create the UI:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a Canvas (",(0,s.jsx)(n.code,{children:"UI > Canvas"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Add a Slider (",(0,s.jsx)(n.code,{children:"UI > Slider"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Add a Text element (",(0,s.jsx)(n.code,{children:"UI > Text"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:['Create empty GameObject "HealthUI" with the ',(0,s.jsx)(n.code,{children:"HealthUI"})," component"]}),"\n",(0,s.jsx)(n.li,{children:"Connect the UI references and SoapKit assets"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create Max Health Variable:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Create > SoapKit > Variables > Int Variable"})}),"\n",(0,s.jsxs)(n.li,{children:["Name it ",(0,s.jsx)(n.code,{children:"MaxHealth"}),", set to ",(0,s.jsx)(n.code,{children:"100"})]}),"\n",(0,s.jsx)(n.li,{children:"Assign it to both HealthSystem and HealthUI"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-5-test-your-system",children:"Step 5: Test Your System"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add Debug Buttons"})," (Optional):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="HealthDebugger.cs"',children:"using UnityEngine;\nusing FarmGrowthToolkit.Soap;\n\npublic class HealthDebugger : MonoBehaviour\n{\n    [SerializeField] private HealthSystem healthSystem;\n    \n    void Update()\n    {\n        // Test damage with 'D' key\n        if (Input.GetKeyDown(KeyCode.D))\n            healthSystem.TakeDamage(25);\n            \n        // Test healing with 'H' key\n        if (Input.GetKeyDown(KeyCode.H))\n            healthSystem.Heal(15);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using the SoapKit Debug Window:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Tools > SoapKit > Debug Window"})}),"\n",(0,s.jsx)(n.li,{children:'Find your events in the "Events" tab'}),"\n",(0,s.jsx)(n.li,{children:'Click "Raise" to test events manually'}),"\n",(0,s.jsx)(n.li,{children:"Monitor variable values in real-time"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-congratulations",children:"\ud83c\udf89 Congratulations!"}),"\n",(0,s.jsx)(n.p,{children:"You've just built your first SoapKit system! Here's what you accomplished:"}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Decoupled Architecture"}),": Health system doesn't know about UI",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Event-Driven Design"}),": UI reacts to health changes automatically",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Data-Driven Configuration"}),": Health values controlled by ScriptableObjects",(0,s.jsx)(n.br,{}),"\n","\u2705 ",(0,s.jsx)(n.strong,{children:"Professional Debugging"}),": Real-time monitoring with Debug Window"]}),"\n",(0,s.jsx)(n.h2,{id:"-next-steps",children:"\ud83d\ude80 Next Steps"}),"\n",(0,s.jsx)(n.h3,{id:"quick-wins-5-10-minutes-each",children:"Quick Wins (5-10 minutes each)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./core-systems/events",children:"Explore Core Systems"})})," - Deep dive into Events and Variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./editor-tools/debug-window",children:"Try the Debug Window"})})," - Professional debugging tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./examples/health-system",children:"Check Examples"})})," - More complex real-world examples"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"build-something-bigger-30-60-minutes",children:"Build Something Bigger (30-60 minutes)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add Audio System:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class AudioSystem : MonoBehaviour \n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    \n    void Start() {\n        onHealthChanged.AddListener(PlayHealthSound);\n        onPlayerDied.AddListener(PlayDeathSound);\n    }\n    \n    private void PlayHealthSound(int health) { /* Audio code */ }\n    private void PlayDeathSound() { /* Death sound code */ }\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add Particle Effects:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class EffectsSystem : MonoBehaviour \n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    \n    void Start() {\n        onHealthChanged.AddListener(ShowDamageEffect);\n    }\n    \n    private void ShowDamageEffect(int health) { /* VFX code */ }\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add Save System:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class SaveSystem : MonoBehaviour \n{\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntGameEvent onHealthChanged;\n    \n    void Start() {\n        onHealthChanged.AddListener(SaveHealth);\n        LoadHealth();\n    }\n    \n    private void SaveHealth(int h) { PlayerPrefs.SetInt("Health", h); }\n    private void LoadHealth() { health.SetValue(PlayerPrefs.GetInt("Health", 100)); }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Notice how ",(0,s.jsx)(n.strong,{children:"each system is completely independent"})," but works together seamlessly! \ud83c\udfaf"]}),"\n",(0,s.jsx)(n.h2,{id:"-pro-tips",children:"\ud83d\udca1 Pro Tips"}),"\n",(0,s.jsx)(n.h3,{id:"organization-best-practices",children:(0,s.jsx)(n.strong,{children:"Organization Best Practices"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Assets/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Variables/\n\u2502   \u2502   \u251c\u2500\u2500 Player/\n\u2502   \u2502   \u2514\u2500\u2500 Game/\n\u2502   \u2514\u2500\u2500 Events/\n\u2502       \u251c\u2500\u2500 Player/\n\u2502       \u2514\u2500\u2500 Game/\n\u2514\u2500\u2500 Scripts/\n    \u251c\u2500\u2500 Systems/\n    \u2514\u2500\u2500 UI/\n"})}),"\n",(0,s.jsx)(n.h3,{id:"naming-conventions",children:(0,s.jsx)(n.strong,{children:"Naming Conventions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variables: ",(0,s.jsx)(n.code,{children:"PlayerHealth"}),", ",(0,s.jsx)(n.code,{children:"MaxHealth"}),", ",(0,s.jsx)(n.code,{children:"GameScore"})]}),"\n",(0,s.jsxs)(n.li,{children:["Events: ",(0,s.jsx)(n.code,{children:"OnHealthChanged"}),", ",(0,s.jsx)(n.code,{children:"OnPlayerDied"}),", ",(0,s.jsx)(n.code,{children:"OnLevelComplete"})]}),"\n",(0,s.jsx)(n.li,{children:"Use descriptive names that make the purpose clear"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-tips",children:(0,s.jsx)(n.strong,{children:"Performance Tips"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Unsubscribe from events in ",(0,s.jsx)(n.code,{children:"OnDestroy()"})]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"OnEnable()"}),"/",(0,s.jsx)(n.code,{children:"OnDisable()"})," for temporary listeners"]}),"\n",(0,s.jsx)(n.li,{children:"Group related events for better organization"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-need-help",children:"\ud83c\udd98 Need Help?"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:(0,s.jsx)(n.strong,{children:"Common Issues"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:'Q: "Create > SoapKit menu is missing"'}),(0,s.jsx)(n.br,{}),"\n","A: Reimport the package and check Unity console for errors"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:'Q: "Variables not updating in Inspector"'}),(0,s.jsx)(n.br,{}),"\n","A: Make sure you're in Play Mode to see runtime values"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:'Q: "Events not firing"'}),(0,s.jsx)(n.br,{}),"\n","A: Check that listeners are added in ",(0,s.jsx)(n.code,{children:"Start()"})," or ",(0,s.jsx)(n.code,{children:"OnEnable()"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:'Q: "Memory leaks"'}),(0,s.jsx)(n.br,{}),"\n","A: Always unsubscribe from events in ",(0,s.jsx)(n.code,{children:"OnDestroy()"})]}),"\n",(0,s.jsx)(n.h3,{id:"get-support",children:(0,s.jsx)(n.strong,{children:"Get Support"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting Guide"})})," - Common issues and solutions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://discord.gg/soapkit",children:"Community Discord"})})," - Get help from other developers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/farmgrowth/soapkit/issues",children:"GitHub Issues"})})," - Report bugs and feature requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./api/overview",children:"API Documentation"})})," - Complete reference guide"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ready to build professional Unity games?"})," Let's dive deeper into the ",(0,s.jsx)(n.a,{href:"./core-systems/events",children:"Core Systems"}),"! \ud83c\udfae"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);