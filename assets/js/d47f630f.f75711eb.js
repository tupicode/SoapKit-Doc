"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[8679],{3590:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>v,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api/events","title":"Events API Reference","description":"Complete API reference for SoapKit\'s event system.","source":"@site/docs/api/events.md","sourceDirName":"api","slug":"/api/events","permalink":"/SoapKit-Doc/docs/api/events","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/events.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Variables API Reference","permalink":"/SoapKit-Doc/docs/api/variables"},"next":{"title":"Editor Tools API Reference","permalink":"/SoapKit-Doc/docs/api/editor-tools"}}');var a=t(4848),s=t(8453);const r={},l="Events API Reference",d={},o=[{value:"Base Classes",id:"base-classes",level:2},{value:"GameEvent&lt;T&gt;",id:"gameeventt",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"Editor Properties (Editor Only)",id:"editor-properties-editor-only",level:4},{value:"Editor Methods (Editor Only)",id:"editor-methods-editor-only",level:4},{value:"Unit Events",id:"unit-events",level:2},{value:"GameEvent",id:"gameevent",level:3},{value:"Methods",id:"methods-1",level:4},{value:"Usage Example",id:"usage-example",level:4},{value:"Primitive Event Types",id:"primitive-event-types",level:2},{value:"BoolGameEvent",id:"boolgameevent",level:3},{value:"Usage Example",id:"usage-example-1",level:4},{value:"IntGameEvent",id:"intgameevent",level:3},{value:"Usage Example",id:"usage-example-2",level:4},{value:"FloatGameEvent",id:"floatgameevent",level:3},{value:"Usage Example",id:"usage-example-3",level:4},{value:"StringGameEvent",id:"stringgameevent",level:3},{value:"Usage Example",id:"usage-example-4",level:4},{value:"Unity Type Events",id:"unity-type-events",level:2},{value:"Vector2GameEvent",id:"vector2gameevent",level:3},{value:"Usage Example",id:"usage-example-5",level:4},{value:"Vector3GameEvent",id:"vector3gameevent",level:3},{value:"Usage Example",id:"usage-example-6",level:4},{value:"Vector2IntGameEvent",id:"vector2intgameevent",level:3},{value:"Usage Example",id:"usage-example-7",level:4},{value:"ColorGameEvent",id:"colorgameevent",level:3},{value:"Usage Example",id:"usage-example-8",level:4},{value:"GameObjectGameEvent",id:"gameobjectgameevent",level:3},{value:"Usage Example",id:"usage-example-9",level:4},{value:"TransformGameEvent",id:"transformgameevent",level:3},{value:"Usage Example",id:"usage-example-10",level:4},{value:"Advanced Event Patterns",id:"advanced-event-patterns",level:2},{value:"Custom Event Types",id:"custom-event-types",level:3},{value:"Event Chains",id:"event-chains",level:3},{value:"Conditional Events",id:"conditional-events",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Listener Management",id:"listener-management",level:3},{value:"Efficient Subscription Pattern",id:"efficient-subscription-pattern",level:4},{value:"Event Frequency Monitoring",id:"event-frequency-monitoring",level:3},{value:"Debugging and Testing",id:"debugging-and-testing",level:2},{value:"Event History Analysis",id:"event-history-analysis",level:3},{value:"Automated Event Testing",id:"automated-event-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Event Design",id:"event-design",level:3},{value:"Listener Management",id:"listener-management-1",level:3},{value:"Performance",id:"performance",level:3},{value:"Debugging",id:"debugging",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"events-api-reference",children:"Events API Reference"})}),"\n",(0,a.jsx)(n.p,{children:"Complete API reference for SoapKit's event system."}),"\n",(0,a.jsx)(n.h2,{id:"base-classes",children:"Base Classes"}),"\n",(0,a.jsx)(n.h3,{id:"gameeventt",children:"GameEvent<T>"}),"\n",(0,a.jsx)(n.p,{children:"The foundation class for all typed events in SoapKit."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[System.Serializable]\npublic abstract class GameEvent<T> : ScriptableObject, IGameEvent<T>\n"})}),"\n",(0,a.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Property"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"ListenerCount"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"int"})}),(0,a.jsx)(n.td,{children:"Number of registered listeners"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"EnableEventHistory"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"bool"})}),(0,a.jsx)(n.td,{children:"Whether to track event history (Editor only)"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Parameters"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"AddListener(UnityAction<T> listener)"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UnityAction<T> listener"})}),(0,a.jsx)(n.td,{children:"Adds event listener"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"RemoveListener(UnityAction<T> listener)"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UnityAction<T> listener"})}),(0,a.jsx)(n.td,{children:"Removes event listener"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"Raise(T value)"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"T value"})}),(0,a.jsx)(n.td,{children:"Raises event with typed parameter"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"RemoveAllListeners()"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Removes all registered listeners"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"RaiseTestEvent()"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Context menu method for testing"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"editor-properties-editor-only",children:"Editor Properties (Editor Only)"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Property"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"EventHistory"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"List<EventHistoryEntry>"})}),(0,a.jsx)(n.td,{children:"Historical event data"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"EventsRaisedThisFrame"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"int"})}),(0,a.jsx)(n.td,{children:"Events raised in current frame"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"TotalEventsRaised"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"long"})}),(0,a.jsx)(n.td,{children:"Total events raised since startup"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"editor-methods-editor-only",children:"Editor Methods (Editor Only)"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"ClearEventHistory()"})}),(0,a.jsx)(n.td,{children:"Clears event history"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"GetEventFrequency()"})}),(0,a.jsx)(n.td,{children:"Returns events per second"})]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"unit-events",children:"Unit Events"}),"\n",(0,a.jsx)(n.h3,{id:"gameevent",children:"GameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Parameter-less event for simple notifications."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Unit Event")]\npublic class GameEvent : ScriptableObject, IGameEvent\n'})}),"\n",(0,a.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Parameters"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"AddListener(UnityAction listener)"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UnityAction listener"})}),(0,a.jsx)(n.td,{children:"Adds parameter-less listener"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"RemoveListener(UnityAction listener)"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UnityAction listener"})}),(0,a.jsx)(n.td,{children:"Removes parameter-less listener"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"Raise()"})}),(0,a.jsx)(n.td,{children:"-"}),(0,a.jsx)(n.td,{children:"Raises event without parameters"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"usage-example",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private GameEvent onGameStart;\n[SerializeField] private GameEvent onPlayerDeath;\n\nprivate void Start()\n{\n    onGameStart.Raise();\n}\n\nprivate void OnEnable()\n{\n    onPlayerDeath.AddListener(HandlePlayerDeath);\n}\n\nprivate void OnDisable()\n{\n    onPlayerDeath.RemoveListener(HandlePlayerDeath);\n}\n\nprivate void HandlePlayerDeath()\n{\n    // Handle player death\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"primitive-event-types",children:"Primitive Event Types"}),"\n",(0,a.jsx)(n.h3,{id:"boolgameevent",children:"BoolGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Boolean event for state changes and toggles."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Bool Event")]\npublic class BoolGameEvent : GameEvent<bool>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-1",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private BoolGameEvent onGamePaused;\n\nprivate void TogglePause()\n{\n    bool newPauseState = !isPaused;\n    onGamePaused.Raise(newPauseState);\n}\n\nprivate void OnEnable()\n{\n    onGamePaused.AddListener(OnPauseStateChanged);\n}\n\nprivate void OnPauseStateChanged(bool isPaused)\n{\n    Time.timeScale = isPaused ? 0f : 1f;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"intgameevent",children:"IntGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Integer event for scores, counters, and numeric IDs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Int Event")]\npublic class IntGameEvent : GameEvent<int>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-2",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private IntGameEvent onScoreChanged;\n[SerializeField] private IntGameEvent onHealthChanged;\n\nprivate void AddScore(int points)\n{\n    onScoreChanged.Raise(points);\n}\n\nprivate void TakeDamage(int damage)\n{\n    onHealthChanged.Raise(-damage);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"floatgameevent",children:"FloatGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Float event for values, percentages, and measurements."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Float Event")]\npublic class FloatGameEvent : GameEvent<float>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-3",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private FloatGameEvent onVolumeChanged;\n[SerializeField] private FloatGameEvent onProgressUpdated;\n\nprivate void SetMasterVolume(float volume)\n{\n    onVolumeChanged.Raise(volume);\n}\n\nprivate void UpdateProgress(float percentage)\n{\n    onProgressUpdated.Raise(percentage);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"stringgameevent",children:"StringGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"String event for messages, names, and text data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/String Event")]\npublic class StringGameEvent : GameEvent<string>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-4",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private StringGameEvent onDialogueSpoken;\n[SerializeField] private StringGameEvent onSceneChanged;\n\nprivate void ShowDialogue(string text)\n{\n    onDialogueSpoken.Raise(text);\n}\n\nprivate void LoadScene(string sceneName)\n{\n    onSceneChanged.Raise(sceneName);\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"unity-type-events",children:"Unity Type Events"}),"\n",(0,a.jsx)(n.h3,{id:"vector2gameevent",children:"Vector2GameEvent"}),"\n",(0,a.jsx)(n.p,{children:"2D vector event for positions, UI coordinates, and directions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Vector2 Event")]\npublic class Vector2GameEvent : GameEvent<Vector2>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-5",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private Vector2GameEvent onMouseClicked;\n[SerializeField] private Vector2GameEvent onPlayerMoved2D;\n\nprivate void HandleMouseClick()\n{\n    Vector2 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);\n    onMouseClicked.Raise(mousePos);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"vector3gameevent",children:"Vector3GameEvent"}),"\n",(0,a.jsx)(n.p,{children:"3D vector event for positions, directions, and velocities."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Vector3 Event")]\npublic class Vector3GameEvent : GameEvent<Vector3>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-6",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private Vector3GameEvent onPlayerMoved;\n[SerializeField] private Vector3GameEvent onObjectSpawned;\n\nprivate void UpdatePlayerPosition(Vector3 newPosition)\n{\n    onPlayerMoved.Raise(newPosition);\n}\n\nprivate void SpawnObject(Vector3 spawnPoint)\n{\n    onObjectSpawned.Raise(spawnPoint);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"vector2intgameevent",children:"Vector2IntGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Integer 2D vector event for grid coordinates and tile positions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Vector2Int Event")]\npublic class Vector2IntGameEvent : GameEvent<Vector2Int>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-7",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private Vector2IntGameEvent onTileSelected;\n[SerializeField] private Vector2IntGameEvent onGridMoved;\n\nprivate void SelectTile(int x, int y)\n{\n    Vector2Int tileCoord = new Vector2Int(x, y);\n    onTileSelected.Raise(tileCoord);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"colorgameevent",children:"ColorGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Color event for visual effects and theme changes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Color Event")]\npublic class ColorGameEvent : GameEvent<Color>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-8",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private ColorGameEvent onThemeColorChanged;\n[SerializeField] private ColorGameEvent onPlayerColorSelected;\n\nprivate void ChangeTheme(Color newThemeColor)\n{\n    onThemeColorChanged.Raise(newThemeColor);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"gameobjectgameevent",children:"GameObjectGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"GameObject event for object references and interactions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/GameObject Event")]\npublic class GameObjectGameEvent : GameEvent<GameObject>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-9",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[SerializeField] private GameObjectGameEvent onObjectInteracted;\n[SerializeField] private GameObjectGameEvent onEnemyDefeated;\n\nprivate void OnTriggerEnter(Collider other)\n{\n    if (other.CompareTag("Interactable"))\n    {\n        onObjectInteracted.Raise(other.gameObject);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"transformgameevent",children:"TransformGameEvent"}),"\n",(0,a.jsx)(n.p,{children:"Transform event for transform references and spatial data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Events/Transform Event")]\npublic class TransformGameEvent : GameEvent<Transform>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"usage-example-10",children:"Usage Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[SerializeField] private TransformGameEvent onTargetChanged;\n[SerializeField] private TransformGameEvent onWaypointReached;\n\nprivate void SetNewTarget(Transform target)\n{\n    onTargetChanged.Raise(target);\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"advanced-event-patterns",children:"Advanced Event Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"custom-event-types",children:"Custom Event Types"}),"\n",(0,a.jsx)(n.p,{children:"Create custom events for complex data structures:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'[System.Serializable]\npublic class PlayerData\n{\n    public string playerName;\n    public int level;\n    public Vector3 position;\n}\n\n[CreateAssetMenu(menuName = "Game/Events/Player Event")]\npublic class PlayerDataEvent : GameEvent<PlayerData>\n{\n    [ContextMenu("Raise Test Player Event")]\n    public override void RaiseTestEvent()\n    {\n        var testData = new PlayerData\n        {\n            playerName = "TestPlayer",\n            level = 1,\n            position = Vector3.zero\n        };\n        Raise(testData);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"event-chains",children:"Event Chains"}),"\n",(0,a.jsx)(n.p,{children:"Chain events for complex workflows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class GameFlowManager : MonoBehaviour\n{\n    [Header("Game Flow Events")]\n    [SerializeField] private GameEvent onGameStart;\n    [SerializeField] private GameEvent onLevelLoaded;\n    [SerializeField] private GameEvent onPlayerReady;\n    [SerializeField] private GameEvent onGameplayStart;\n    \n    private void OnEnable()\n    {\n        onGameStart.AddListener(StartLevel);\n        onLevelLoaded.AddListener(InitializePlayer);\n        onPlayerReady.AddListener(BeginGameplay);\n    }\n    \n    private void StartLevel() => onLevelLoaded.Raise();\n    private void InitializePlayer() => onPlayerReady.Raise();\n    private void BeginGameplay() => onGameplayStart.Raise();\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-events",children:"Conditional Events"}),"\n",(0,a.jsx)(n.p,{children:"Implement conditional event raising:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class ConditionalEventRaiser : MonoBehaviour\n{\n    [SerializeField] private BoolVariable canTrigger;\n    [SerializeField] private IntVariable triggerCount;\n    [SerializeField] private GameEvent conditionalEvent;\n    \n    public void TryRaiseEvent()\n    {\n        if (canTrigger.Value && triggerCount.Value > 0)\n        {\n            conditionalEvent.Raise();\n            triggerCount.Subtract(1);\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsx)(n.h3,{id:"listener-management",children:"Listener Management"}),"\n",(0,a.jsx)(n.h4,{id:"efficient-subscription-pattern",children:"Efficient Subscription Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class EfficientEventListener : MonoBehaviour\n{\n    [SerializeField] private GameEvent[] criticalEvents;\n    \n    private void OnEnable()\n    {\n        foreach (var evt in criticalEvents)\n        {\n            evt?.AddListener(HandleCriticalEvent);\n        }\n    }\n    \n    private void OnDisable()\n    {\n        foreach (var evt in criticalEvents)\n        {\n            evt?.RemoveListener(HandleCriticalEvent);\n        }\n    }\n    \n    private void HandleCriticalEvent()\n    {\n        // Lightweight handling only\n        StartCoroutine(HandleEventAsync());\n    }\n    \n    private IEnumerator HandleEventAsync()\n    {\n        yield return null; // Defer heavy work\n        // Heavy processing here\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"event-frequency-monitoring",children:"Event Frequency Monitoring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class EventPerformanceMonitor : MonoBehaviour\n{\n    [SerializeField] private GameEvent[] monitoredEvents;\n    \n    private void Update()\n    {\n        foreach (var evt in monitoredEvents)\n        {\n            if (evt.EventsRaisedThisFrame > 10)\n            {\n                Debug.LogWarning($"High frequency event: {evt.name} raised {evt.EventsRaisedThisFrame} times this frame");\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"debugging-and-testing",children:"Debugging and Testing"}),"\n",(0,a.jsx)(n.h3,{id:"event-history-analysis",children:"Event History Analysis"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'#if UNITY_EDITOR\npublic class EventHistoryAnalyzer : MonoBehaviour\n{\n    [SerializeField] private GameEvent targetEvent;\n    \n    [ContextMenu("Analyze Event History")]\n    private void AnalyzeEventHistory()\n    {\n        if (targetEvent == null || targetEvent.EventHistory == null) return;\n        \n        Debug.Log($"Event {targetEvent.name} History:");\n        Debug.Log($"Total Events: {targetEvent.EventHistory.Count}");\n        \n        if (targetEvent.EventHistory.Count > 0)\n        {\n            var recent = targetEvent.EventHistory.TakeLast(5);\n            Debug.Log("Recent events:");\n            foreach (var entry in recent)\n            {\n                Debug.Log($"  {entry.timestamp}: {entry.parameters}");\n            }\n        }\n    }\n}\n#endif\n'})}),"\n",(0,a.jsx)(n.h3,{id:"automated-event-testing",children:"Automated Event Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[System.Serializable]\npublic class EventTest\n{\n    public GameEvent eventToTest;\n    public float interval = 1f;\n    public bool enabled = true;\n}\n\npublic class EventTester : MonoBehaviour\n{\n    [SerializeField] private EventTest[] eventTests;\n    \n    private void Start()\n    {\n        foreach (var test in eventTests)\n        {\n            if (test.enabled && test.eventToTest != null)\n            {\n                InvokeRepeating(nameof(RaiseTestEvent), 0f, test.interval);\n            }\n        }\n    }\n    \n    private void RaiseTestEvent()\n    {\n        foreach (var test in eventTests)\n        {\n            if (test.enabled)\n            {\n                test.eventToTest.Raise();\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"event-design",children:"Event Design"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Use specific event types instead of generic objects"}),"\n",(0,a.jsx)(n.li,{children:"Keep event parameters simple and focused"}),"\n",(0,a.jsx)(n.li,{children:"Avoid raising events in Update() loops without throttling"}),"\n",(0,a.jsx)(n.li,{children:"Use descriptive names for event assets"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"listener-management-1",children:"Listener Management"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Always pair AddListener with RemoveListener"}),"\n",(0,a.jsx)(n.li,{children:"Use OnEnable/OnDisable pattern for automatic cleanup"}),"\n",(0,a.jsx)(n.li,{children:"Keep event handlers lightweight and fast"}),"\n",(0,a.jsx)(n.li,{children:"Move heavy processing to coroutines or separate frames"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Monitor listener counts using debug tools"}),"\n",(0,a.jsx)(n.li,{children:"Avoid excessive event chaining"}),"\n",(0,a.jsx)(n.li,{children:"Use conditional logic to prevent unnecessary events"}),"\n",(0,a.jsx)(n.li,{children:"Profile event-heavy systems regularly"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Enable event history during development"}),"\n",(0,a.jsx)(n.li,{children:"Use SoapKit Debug Window for real-time monitoring"}),"\n",(0,a.jsx)(n.li,{children:"Implement event testing utilities"}),"\n",(0,a.jsx)(n.li,{children:"Add validation for critical event flows"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./variables",children:"Variables API Reference"})," - Variable system documentation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./editor-tools",children:"Editor Tools API"})," - Development tools reference"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../advanced/performance",children:"Performance Guide"})," - Optimization techniques"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../advanced/patterns",children:"Design Patterns"})," - Event system patterns"]}),"\n"]})]})}function v(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);