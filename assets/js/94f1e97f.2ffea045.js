"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[7062],{8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>l});var t=n(6540);const i={},r=t.createContext(i);function s(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:a},e.children)}},8979:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>S,frontMatter:()=>s,metadata:()=>t,toc:()=>v});const t=JSON.parse('{"id":"examples/state-management","title":"State Management Example","description":"Learn how to implement persistent game state using SoapKit\'s variable and event systems.","source":"@site/docs/examples/state-management.md","sourceDirName":"examples","slug":"/examples/state-management","permalink":"/SoapKit-Doc/docs/examples/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/state-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"UI Integration Examples","permalink":"/SoapKit-Doc/docs/examples/ui-integration"},"next":{"title":"API Reference Overview","permalink":"/SoapKit-Doc/docs/api/overview"}}');var i=n(4848),r=n(8453);const s={},l="State Management Example",o={},v=[{value:"Overview",id:"overview",level:2},{value:"Core State Components",id:"core-state-components",level:2},{value:"Game State Variables",id:"game-state-variables",level:3},{value:"State Management Events",id:"state-management-events",level:3},{value:"Save Data Structure",id:"save-data-structure",level:2},{value:"Serializable Save Data",id:"serializable-save-data",level:3},{value:"State Manager Implementation",id:"state-manager-implementation",level:2},{value:"Core State Manager",id:"core-state-manager",level:3},{value:"Auto-Save System",id:"auto-save-system",level:2},{value:"Checkpoint-Based Auto-Save",id:"checkpoint-based-auto-save",level:3},{value:"State Persistence Utilities",id:"state-persistence-utilities",level:2},{value:"Save Slot Management",id:"save-slot-management",level:3},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"state-management-example",children:"State Management Example"})}),"\n",(0,i.jsx)(a.p,{children:"Learn how to implement persistent game state using SoapKit's variable and event systems."}),"\n",(0,i.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(a.p,{children:"This example demonstrates how to create a comprehensive state management system that handles saving/loading game data, managing game sessions, and providing clean state transitions using SoapKit architecture."}),"\n",(0,i.jsx)(a.h2,{id:"core-state-components",children:"Core State Components"}),"\n",(0,i.jsx)(a.h3,{id:"game-state-variables",children:"Game State Variables"}),"\n",(0,i.jsx)(a.p,{children:"Create these ScriptableObject assets for core game state:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:"// Player State Variables (Create > SoapKit > Variables > ...)\n[SerializeField] private StringVariable playerName;\n[SerializeField] private IntVariable playerLevel;\n[SerializeField] private IntVariable playerExperience;\n[SerializeField] private IntVariable playerHealth;\n[SerializeField] private IntVariable playerMana;\n[SerializeField] private Vector3Variable playerPosition;\n\n// Game Session Variables\n[SerializeField] private StringVariable currentScene;\n[SerializeField] private FloatVariable sessionStartTime;\n[SerializeField] private IntVariable currentCheckpoint;\n[SerializeField] private BoolVariable isNewGame;\n\n// Settings Variables\n[SerializeField] private FloatVariable masterVolume;\n[SerializeField] private IntVariable graphicsQuality;\n[SerializeField] private BoolVariable fullscreenMode;\n"})}),"\n",(0,i.jsx)(a.h3,{id:"state-management-events",children:"State Management Events"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'// Create these custom events\n[CreateAssetMenu(menuName = "SoapKit/Events/Save Event")]\npublic class SaveEvent : GameEvent<SaveData> { }\n\n[CreateAssetMenu(menuName = "SoapKit/Events/Load Event")]  \npublic class LoadEvent : GameEvent<SaveData> { }\n\n[CreateAssetMenu(menuName = "SoapKit/Events/State Change Event")]\npublic class StateChangeEvent : GameEvent<GameStateInfo> { }\n\n[System.Serializable]\npublic class GameStateInfo\n{\n    public GameState previousState;\n    public GameState currentState;\n    public string reason;\n}\n\npublic enum GameState\n{\n    MainMenu,\n    Loading,\n    Playing,\n    Paused,\n    GameOver,\n    Settings\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"save-data-structure",children:"Save Data Structure"}),"\n",(0,i.jsx)(a.h3,{id:"serializable-save-data",children:"Serializable Save Data"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'[System.Serializable]\npublic class SaveData\n{\n    [Header("Player Data")]\n    public string playerName;\n    public int playerLevel;\n    public int playerExperience;\n    public int playerHealth;\n    public int playerMana;\n    public SerializableVector3 playerPosition;\n    \n    [Header("Game Session")]\n    public string currentScene;\n    public float sessionStartTime;\n    public int currentCheckpoint;\n    public long saveTimestamp;\n    \n    [Header("Settings")]\n    public float masterVolume;\n    public int graphicsQuality;\n    public bool fullscreenMode;\n    \n    [Header("Inventory")]\n    public List<InventoryItemData> inventoryItems;\n    \n    [Header("Quest Progress")]\n    public List<QuestProgressData> questProgress;\n    \n    public SaveData()\n    {\n        inventoryItems = new List<InventoryItemData>();\n        questProgress = new List<QuestProgressData>();\n        saveTimestamp = System.DateTime.Now.ToBinary();\n    }\n}\n\n[System.Serializable]\npublic class SerializableVector3\n{\n    public float x, y, z;\n    \n    public SerializableVector3(Vector3 vector)\n    {\n        x = vector.x;\n        y = vector.y;\n        z = vector.z;\n    }\n    \n    public Vector3 ToVector3()\n    {\n        return new Vector3(x, y, z);\n    }\n}\n\n[System.Serializable]\npublic class InventoryItemData\n{\n    public string itemId;\n    public int quantity;\n    public int slotIndex;\n}\n\n[System.Serializable]\npublic class QuestProgressData\n{\n    public string questId;\n    public int currentStep;\n    public bool isCompleted;\n    public List<string> completedObjectives;\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"state-manager-implementation",children:"State Manager Implementation"}),"\n",(0,i.jsx)(a.h3,{id:"core-state-manager",children:"Core State Manager"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing System.IO;\nusing UnityEngine;\n\npublic class GameStateManager : MonoBehaviour\n{\n    [Header("State Variables")]\n    [SerializeField] private StringVariable currentGameState;\n    [SerializeField] private BoolVariable isGameLoaded;\n    [SerializeField] private BoolVariable hasSaveData;\n    \n    [Header("State Events")]\n    [SerializeField] private SaveEvent onSaveRequested;\n    [SerializeField] private LoadEvent onLoadRequested;\n    [SerializeField] private StateChangeEvent onStateChanged;\n    [SerializeField] private GameEvent onGameInitialized;\n    \n    [Header("Player State")]\n    [SerializeField] private StringVariable playerName;\n    [SerializeField] private IntVariable playerLevel;\n    [SerializeField] private IntVariable playerExperience;\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private IntVariable playerMana;\n    [SerializeField] private Vector3Variable playerPosition;\n    \n    [Header("Session State")]\n    [SerializeField] private StringVariable currentScene;\n    [SerializeField] private FloatVariable sessionStartTime;\n    [SerializeField] private IntVariable currentCheckpoint;\n    [SerializeField] private BoolVariable isNewGame;\n    \n    [Header("Settings State")]\n    [SerializeField] private FloatVariable masterVolume;\n    [SerializeField] private IntVariable graphicsQuality;\n    [SerializeField] private BoolVariable fullscreenMode;\n    \n    private const string SAVE_FILE_NAME = "gamesave.json";\n    private string SaveFilePath => Path.Combine(Application.persistentDataPath, SAVE_FILE_NAME);\n    \n    private GameState currentState = GameState.MainMenu;\n    \n    private void Start()\n    {\n        InitializeGameState();\n    }\n    \n    private void OnEnable()\n    {\n        onSaveRequested.AddListener(SaveGameState);\n        onLoadRequested.AddListener(LoadGameState);\n    }\n    \n    private void OnDisable()\n    {\n        onSaveRequested.RemoveListener(SaveGameState);\n        onLoadRequested.RemoveListener(LoadGameState);\n    }\n    \n    private void InitializeGameState()\n    {\n        // Check if save file exists\n        bool saveExists = File.Exists(SaveFilePath);\n        hasSaveData.SetValue(saveExists);\n        \n        // Load settings regardless\n        LoadSettings();\n        \n        if (saveExists && !isNewGame.Value)\n        {\n            // Auto-load existing save\n            LoadGameFromFile();\n        }\n        else\n        {\n            // Initialize new game state\n            InitializeNewGameState();\n        }\n        \n        onGameInitialized.Raise();\n    }\n    \n    private void InitializeNewGameState()\n    {\n        playerName.SetValue("Player");\n        playerLevel.SetValue(1);\n        playerExperience.SetValue(0);\n        playerHealth.SetValue(100);\n        playerMana.SetValue(50);\n        playerPosition.SetValue(Vector3.zero);\n        \n        currentScene.SetValue("StartingArea");\n        sessionStartTime.SetValue(Time.time);\n        currentCheckpoint.SetValue(0);\n        \n        isGameLoaded.SetValue(true);\n        ChangeState(GameState.Playing, "New game started");\n    }\n    \n    public void ChangeState(GameState newState, string reason = "")\n    {\n        if (currentState == newState) return;\n        \n        GameState previousState = currentState;\n        currentState = newState;\n        \n        currentGameState.SetValue(newState.ToString());\n        \n        var stateInfo = new GameStateInfo\n        {\n            previousState = previousState,\n            currentState = newState,\n            reason = reason\n        };\n        \n        onStateChanged.Raise(stateInfo);\n    }\n    \n    private void SaveGameState(SaveData saveData = null)\n    {\n        if (saveData == null)\n        {\n            saveData = CreateSaveDataFromCurrentState();\n        }\n        \n        try\n        {\n            string jsonData = JsonUtility.ToJson(saveData, true);\n            File.WriteAllText(SaveFilePath, jsonData);\n            \n            hasSaveData.SetValue(true);\n            Debug.Log($"Game saved successfully to {SaveFilePath}");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($"Failed to save game: {e.Message}");\n        }\n    }\n    \n    private void LoadGameState(SaveData saveData = null)\n    {\n        if (saveData != null)\n        {\n            ApplySaveDataToCurrentState(saveData);\n        }\n        else\n        {\n            LoadGameFromFile();\n        }\n    }\n    \n    private void LoadGameFromFile()\n    {\n        try\n        {\n            if (!File.Exists(SaveFilePath))\n            {\n                Debug.LogWarning("Save file not found");\n                return;\n            }\n            \n            string jsonData = File.ReadAllText(SaveFilePath);\n            SaveData saveData = JsonUtility.FromJson<SaveData>(jsonData);\n            \n            ApplySaveDataToCurrentState(saveData);\n            isGameLoaded.SetValue(true);\n            \n            Debug.Log("Game loaded successfully");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($"Failed to load game: {e.Message}");\n        }\n    }\n    \n    private SaveData CreateSaveDataFromCurrentState()\n    {\n        var saveData = new SaveData\n        {\n            // Player data\n            playerName = this.playerName.Value,\n            playerLevel = this.playerLevel.Value,\n            playerExperience = this.playerExperience.Value,\n            playerHealth = this.playerHealth.Value,\n            playerMana = this.playerMana.Value,\n            playerPosition = new SerializableVector3(this.playerPosition.Value),\n            \n            // Session data\n            currentScene = this.currentScene.Value,\n            sessionStartTime = this.sessionStartTime.Value,\n            currentCheckpoint = this.currentCheckpoint.Value,\n            \n            // Settings\n            masterVolume = this.masterVolume.Value,\n            graphicsQuality = this.graphicsQuality.Value,\n            fullscreenMode = this.fullscreenMode.Value\n        };\n        \n        // Collect data from other systems\n        CollectInventoryData(saveData);\n        CollectQuestData(saveData);\n        \n        return saveData;\n    }\n    \n    private void ApplySaveDataToCurrentState(SaveData saveData)\n    {\n        // Apply player data\n        playerName.SetValue(saveData.playerName);\n        playerLevel.SetValue(saveData.playerLevel);\n        playerExperience.SetValue(saveData.playerExperience);\n        playerHealth.SetValue(saveData.playerHealth);\n        playerMana.SetValue(saveData.playerMana);\n        playerPosition.SetValue(saveData.playerPosition.ToVector3());\n        \n        // Apply session data\n        currentScene.SetValue(saveData.currentScene);\n        sessionStartTime.SetValue(saveData.sessionStartTime);\n        currentCheckpoint.SetValue(saveData.currentCheckpoint);\n        \n        // Apply settings\n        masterVolume.SetValue(saveData.masterVolume);\n        graphicsQuality.SetValue(saveData.graphicsQuality);\n        fullscreenMode.SetValue(saveData.fullscreenMode);\n        \n        // Apply data to other systems\n        ApplyInventoryData(saveData);\n        ApplyQuestData(saveData);\n    }\n    \n    private void CollectInventoryData(SaveData saveData)\n    {\n        // Collect from inventory system\n        var inventoryManager = FindObjectOfType<InventoryManager>();\n        if (inventoryManager != null)\n        {\n            saveData.inventoryItems = inventoryManager.GetSaveData();\n        }\n    }\n    \n    private void CollectQuestData(SaveData saveData)\n    {\n        // Collect from quest system\n        var questManager = FindObjectOfType<QuestManager>();\n        if (questManager != null)\n        {\n            saveData.questProgress = questManager.GetSaveData();\n        }\n    }\n    \n    private void ApplyInventoryData(SaveData saveData)\n    {\n        var inventoryManager = FindObjectOfType<InventoryManager>();\n        if (inventoryManager != null)\n        {\n            inventoryManager.LoadFromSaveData(saveData.inventoryItems);\n        }\n    }\n    \n    private void ApplyQuestData(SaveData saveData)\n    {\n        var questManager = FindObjectOfType<QuestManager>();\n        if (questManager != null)\n        {\n            questManager.LoadFromSaveData(saveData.questProgress);\n        }\n    }\n    \n    private void LoadSettings()\n    {\n        // Load settings from PlayerPrefs or separate settings file\n        masterVolume.SetValue(PlayerPrefs.GetFloat("MasterVolume", 1.0f));\n        graphicsQuality.SetValue(PlayerPrefs.GetInt("GraphicsQuality", 2));\n        fullscreenMode.SetValue(PlayerPrefs.GetInt("FullscreenMode", 1) == 1);\n    }\n    \n    public void SaveSettings()\n    {\n        PlayerPrefs.SetFloat("MasterVolume", masterVolume.Value);\n        PlayerPrefs.SetInt("GraphicsQuality", graphicsQuality.Value);\n        PlayerPrefs.SetInt("FullscreenMode", fullscreenMode.Value ? 1 : 0);\n        PlayerPrefs.Save();\n    }\n    \n    // Public API methods\n    public void SaveGame()\n    {\n        onSaveRequested.Raise();\n    }\n    \n    public void LoadGame()\n    {\n        onLoadRequested.Raise();\n    }\n    \n    public void StartNewGame()\n    {\n        isNewGame.SetValue(true);\n        InitializeNewGameState();\n    }\n    \n    public void QuitToMainMenu()\n    {\n        SaveGame(); // Auto-save before quitting\n        ChangeState(GameState.MainMenu, "Quit to main menu");\n    }\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"auto-save-system",children:"Auto-Save System"}),"\n",(0,i.jsx)(a.h3,{id:"checkpoint-based-auto-save",children:"Checkpoint-Based Auto-Save"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\n\npublic class AutoSaveManager : MonoBehaviour\n{\n    [Header("Auto-Save Settings")]\n    [SerializeField] private float autoSaveInterval = 300f; // 5 minutes\n    [SerializeField] private BoolVariable enableAutoSave;\n    \n    [Header("Auto-Save Events")]\n    [SerializeField] private GameEvent onAutoSaveTriggered;\n    [SerializeField] private IntGameEvent onCheckpointReached;\n    [SerializeField] private StringGameEvent onSceneChanged;\n    \n    [Header("State Manager")]\n    [SerializeField] private GameStateManager stateManager;\n    \n    private float lastAutoSaveTime;\n    \n    private void OnEnable()\n    {\n        onCheckpointReached.AddListener(OnCheckpointReached);\n        onSceneChanged.AddListener(OnSceneChanged);\n    }\n    \n    private void OnDisable()\n    {\n        onCheckpointReached.RemoveListener(OnCheckpointReached);\n        onSceneChanged.RemoveListener(OnSceneChanged);\n    }\n    \n    private void Update()\n    {\n        if (enableAutoSave.Value && ShouldAutoSave())\n        {\n            TriggerAutoSave();\n        }\n    }\n    \n    private bool ShouldAutoSave()\n    {\n        return Time.time - lastAutoSaveTime >= autoSaveInterval;\n    }\n    \n    private void TriggerAutoSave()\n    {\n        lastAutoSaveTime = Time.time;\n        stateManager.SaveGame();\n        onAutoSaveTriggered.Raise();\n        \n        Debug.Log("Auto-save completed");\n    }\n    \n    private void OnCheckpointReached(int checkpointId)\n    {\n        // Auto-save at checkpoints\n        stateManager.SaveGame();\n        Debug.Log($"Checkpoint {checkpointId} auto-save completed");\n    }\n    \n    private void OnSceneChanged(string newScene)\n    {\n        // Auto-save when changing scenes\n        stateManager.SaveGame();\n        Debug.Log($"Scene change auto-save completed for {newScene}");\n    }\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"state-persistence-utilities",children:"State Persistence Utilities"}),"\n",(0,i.jsx)(a.h3,{id:"save-slot-management",children:"Save Slot Management"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\n\npublic class SaveSlotManager : MonoBehaviour\n{\n    [Header("Save Slot Events")]\n    [SerializeField] private SaveEvent onSaveToSlot;\n    [SerializeField] private LoadEvent onLoadFromSlot;\n    [SerializeField] private IntGameEvent onSlotSelected;\n    \n    private const string SAVE_FOLDER = "SaveSlots";\n    private const int MAX_SAVE_SLOTS = 5;\n    \n    private string SaveFolderPath => Path.Combine(Application.persistentDataPath, SAVE_FOLDER);\n    \n    private void Start()\n    {\n        if (!Directory.Exists(SaveFolderPath))\n        {\n            Directory.CreateDirectory(SaveFolderPath);\n        }\n    }\n    \n    public void SaveToSlot(int slotIndex, SaveData saveData)\n    {\n        if (slotIndex < 0 || slotIndex >= MAX_SAVE_SLOTS) return;\n        \n        string filePath = GetSaveFilePath(slotIndex);\n        \n        try\n        {\n            string jsonData = JsonUtility.ToJson(saveData, true);\n            File.WriteAllText(filePath, jsonData);\n            \n            Debug.Log($"Game saved to slot {slotIndex}");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($"Failed to save to slot {slotIndex}: {e.Message}");\n        }\n    }\n    \n    public SaveData LoadFromSlot(int slotIndex)\n    {\n        if (slotIndex < 0 || slotIndex >= MAX_SAVE_SLOTS) return null;\n        \n        string filePath = GetSaveFilePath(slotIndex);\n        \n        if (!File.Exists(filePath)) return null;\n        \n        try\n        {\n            string jsonData = File.ReadAllText(filePath);\n            return JsonUtility.FromJson<SaveData>(jsonData);\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($"Failed to load from slot {slotIndex}: {e.Message}");\n            return null;\n        }\n    }\n    \n    public List<SaveSlotInfo> GetAllSaveSlots()\n    {\n        var slots = new List<SaveSlotInfo>();\n        \n        for (int i = 0; i < MAX_SAVE_SLOTS; i++)\n        {\n            var slotInfo = GetSaveSlotInfo(i);\n            slots.Add(slotInfo);\n        }\n        \n        return slots;\n    }\n    \n    public SaveSlotInfo GetSaveSlotInfo(int slotIndex)\n    {\n        var slotInfo = new SaveSlotInfo\n        {\n            slotIndex = slotIndex,\n            isEmpty = true\n        };\n        \n        string filePath = GetSaveFilePath(slotIndex);\n        \n        if (File.Exists(filePath))\n        {\n            try\n            {\n                var saveData = LoadFromSlot(slotIndex);\n                if (saveData != null)\n                {\n                    slotInfo.isEmpty = false;\n                    slotInfo.playerName = saveData.playerName;\n                    slotInfo.playerLevel = saveData.playerLevel;\n                    slotInfo.currentScene = saveData.currentScene;\n                    slotInfo.saveTimestamp = System.DateTime.FromBinary(saveData.saveTimestamp);\n                    slotInfo.fileSize = new FileInfo(filePath).Length;\n                }\n            }\n            catch (System.Exception e)\n            {\n                Debug.LogError($"Error reading save slot {slotIndex}: {e.Message}");\n            }\n        }\n        \n        return slotInfo;\n    }\n    \n    private string GetSaveFilePath(int slotIndex)\n    {\n        return Path.Combine(SaveFolderPath, $"save_slot_{slotIndex}.json");\n    }\n}\n\n[System.Serializable]\npublic class SaveSlotInfo\n{\n    public int slotIndex;\n    public bool isEmpty;\n    public string playerName;\n    public int playerLevel;\n    public string currentScene;\n    public System.DateTime saveTimestamp;\n    public long fileSize;\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,i.jsx)(a.p,{children:"This state management system integrates with:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.a,{href:"./health-system",children:"Health System"})," - For player health persistence"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.a,{href:"./inventory-system",children:"Inventory System"})," - For item persistence"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.a,{href:"./ui-integration",children:"UI Integration"})," - For settings and UI state"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Automatic Saves"}),": Implement auto-save at key moments (checkpoints, scene transitions)"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Error Handling"}),": Always handle file I/O errors gracefully"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Data Validation"}),": Validate save data before applying it"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Backup Systems"}),": Consider multiple save slots and backup strategies"]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Performance"}),": Don't save too frequently, batch changes when possible"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Explore ",(0,i.jsx)(a.a,{href:"./health-system",children:"Health System"})," integration"]}),"\n",(0,i.jsxs)(a.li,{children:["Learn about ",(0,i.jsx)(a.a,{href:"./inventory-system",children:"Inventory System"})," persistence"]}),"\n",(0,i.jsxs)(a.li,{children:["Check out ",(0,i.jsx)(a.a,{href:"./ui-integration",children:"UI Integration"})," for settings panels"]}),"\n"]})]})}function S(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);