"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[1202],{4489:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"core-systems/events","title":"Events System","description":"The Events System is one of SoapKit\u2019s core pillars, offering a professional, type-safe event architecture that enables decoupled communication between systems while maintaining high performance and advanced debugging capabilities.","source":"@site/docs/core-systems/events.md","sourceDirName":"core-systems","slug":"/core-systems/events","permalink":"/SoapKit-Doc/docs/core-systems/events","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-systems/events.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Events System","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/SoapKit-Doc/docs/getting-started"},"next":{"title":"Variables System","permalink":"/SoapKit-Doc/docs/core-systems/variables"}}');var a=i(4848),s=i(8453);const r={title:"Events System",sidebar_position:2},l="SoapKit Events System",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Creating Events",id:"creating-events",level:3},{value:"Raising Events",id:"raising-events",level:3},{value:"Listening to Events",id:"listening-to-events",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Event Chaining",id:"event-chaining",level:3},{value:"Conditional Listeners",id:"conditional-listeners",level:3},{value:"Event Aggregation",id:"event-aggregation",level:3},{value:"Debugging &amp; Testing",id:"debugging--testing",level:2},{value:"Event History (Editor)",id:"event-history-editor",level:3},{value:"Debug Window",id:"debug-window",level:3},{value:"Inspector Info",id:"inspector-info",level:3},{value:"Performance",id:"performance",level:2},{value:"\u2705 Do This",id:"-do-this",level:3},{value:"\u274c Avoid This",id:"-avoid-this",level:3},{value:"Benchmarks",id:"benchmarks",level:3},{value:"\ud83e\uddea Unit Testing",id:"-unit-testing",level:2},{value:"\ud83e\udde9 Common Event Use Cases",id:"-common-event-use-cases",level:2},{value:"State Transitions",id:"state-transitions",level:3},{value:"Resource Tracking",id:"resource-tracking",level:3},{value:"Animation Integration",id:"animation-integration",level:3},{value:"Custom Event Types",id:"custom-event-types",level:2},{value:"Defining Custom Events",id:"defining-custom-events",level:3},{value:"Event Configuration",id:"event-configuration",level:3},{value:"Event System Templates",id:"event-system-templates",level:3},{value:"\u2795 Next Steps",id:"-next-steps",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"soapkit-events-system",children:"SoapKit Events System"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Events System"})," is one of SoapKit\u2019s core pillars, offering a professional, type-safe event architecture that enables decoupled communication between systems while maintaining high performance and advanced debugging capabilities."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["SoapKit events are ",(0,a.jsx)(n.code,{children:"ScriptableObject"}),"-based channels that allow different parts of your game to communicate ",(0,a.jsx)(n.strong,{children:"without direct references"}),". Instead of components calling each other, they raise events that other systems can listen to."]}),"\n",(0,a.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,a.jsx)(n.strong,{children:"Decoupled Architecture"})," \u2014 No direct dependencies between systems"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd12 ",(0,a.jsx)(n.strong,{children:"Type Safety"})," \u2014 Full compile-time validation and IntelliSense"]}),"\n",(0,a.jsxs)(n.li,{children:["\u26a1 ",(0,a.jsx)(n.strong,{children:"Performance"})," \u2014 Lightweight, optimized for frequent usage"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,a.jsx)(n.strong,{children:"Debuggable"})," \u2014 Built-in history tracking and monitoring tools"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\uddea ",(0,a.jsx)(n.strong,{children:"Testable"})," \u2014 Easily raise events in unit tests and editor scripts"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.h3,{id:"creating-events",children:"Creating Events"}),"\n",(0,a.jsx)(n.p,{children:"Create events using the context menu:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Right-click in Project \u2192 Create \u2192 SoapKit \u2192 Events \u2192 [Type] Event\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Available Event Types:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"UnitGameEvent"})," \u2014 No parameters"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"BoolGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"IntGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"FloatGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"StringGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Vector2GameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Vector3GameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Vector2IntGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ColorGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"GameObjectGameEvent"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"TransformGameEvent"})}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"raising-events",children:"Raising Events"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"From MonoBehaviours:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class PlayerController : MonoBehaviour\n{\n    [SerializeField] private Vector3GameEvent onPlayerMoved;\n    [SerializeField] private IntGameEvent onScoreChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n\n    void Update()\n    {\n        if (moved)\n            onPlayerMoved.Raise(transform.position);\n    }\n\n    public void AddScore(int points)\n    {\n        score += points;\n        onScoreChanged.Raise(score);\n    }\n\n    public void Die()\n    {\n        onPlayerDied.Raise(); // No parameters\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"From Scripts or Tests:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var eventAsset = ScriptableObject.CreateInstance<IntGameEvent>();\neventAsset.Raise(25);\n\nResources.Load<IntGameEvent>("Events/OnHealthChanged").Raise(50);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"listening-to-events",children:"Listening to Events"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Approach 1: AddListener / RemoveListener"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class HealthUI : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n\n    void OnEnable()\n    {\n        onHealthChanged.AddListener(UpdateHealthBar);\n        onPlayerDied.AddListener(ShowGameOver);\n    }\n\n    void OnDisable()\n    {\n        onHealthChanged?.RemoveListener(UpdateHealthBar);\n        onPlayerDied?.RemoveListener(ShowGameOver);\n    }\n\n    private void UpdateHealthBar(int value) => healthSlider.value = value;\n    private void ShowGameOver() => gameOverPanel.SetActive(true);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Approach 2: Listener Components"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class AudioEventListener : MonoBehaviour\n{\n    [SerializeField] private StringGameEvent onSoundRequested;\n    [SerializeField] private AudioSource audioSource;\n    [SerializeField] private AudioClip[] soundClips;\n\n    void OnEnable() => onSoundRequested.AddListener(PlaySound);\n    void OnDisable() => onSoundRequested?.RemoveListener(PlaySound);\n\n    private void PlaySound(string clipName)\n    {\n        var clip = Array.Find(soundClips, c => c.name == clipName);\n        if (clip != null)\n            audioSource.PlayOneShot(clip);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"event-chaining",children:"Event Chaining"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class GameManager : MonoBehaviour\n{\n    [SerializeField] private UnitGameEvent onEnemyKilled;\n    [SerializeField] private IntGameEvent onScoreChanged;\n    [SerializeField] private UnitGameEvent onLevelComplete;\n\n    private int enemiesKilled = 0;\n\n    void OnEnable() => onEnemyKilled.AddListener(HandleKill);\n    void OnDisable() => onEnemyKilled?.RemoveListener(HandleKill);\n\n    private void HandleKill()\n    {\n        enemiesKilled++;\n        onScoreChanged.Raise(enemiesKilled * 100);\n\n        if (enemiesKilled >= 10)\n            onLevelComplete.Raise();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"conditional-listeners",children:"Conditional Listeners"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class PowerUpSystem : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private BoolVariable isPoweredUp;\n    [SerializeField] private FloatVariable multiplier;\n\n    void OnEnable() => onHealthChanged.AddListener(OnHealthChanged);\n\n    private void OnHealthChanged(int health)\n    {\n        if (!isPoweredUp.Value) return;\n\n        int bonus = Mathf.RoundToInt(health * multiplier.Value);\n        Debug.Log($"Power-up bonus: {bonus}");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"event-aggregation",children:"Event Aggregation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class ComboSystem : MonoBehaviour\n{\n    [SerializeField] private UnitGameEvent onJump;\n    [SerializeField] private UnitGameEvent onAttack;\n    [SerializeField] private UnitGameEvent onComboAchieved;\n\n    private bool jumped, attacked;\n    private float lastActionTime;\n    private float comboWindow = 2f;\n\n    void OnEnable()\n    {\n        onJump.AddListener(OnJump);\n        onAttack.AddListener(OnAttack);\n    }\n\n    void OnJump() { jumped = true; lastActionTime = Time.time; CheckCombo(); }\n    void OnAttack() { attacked = true; lastActionTime = Time.time; CheckCombo(); }\n\n    void CheckCombo()\n    {\n        if (jumped && attacked && Time.time - lastActionTime < comboWindow)\n        {\n            onComboAchieved.Raise();\n            jumped = attacked = false;\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"debugging--testing",children:"Debugging & Testing"}),"\n",(0,a.jsx)(n.h3,{id:"event-history-editor",children:"Event History (Editor)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'#if UNITY_EDITOR\nvar history = onScoreChanged.GetEventHistory(10);\nforeach (var entry in history)\n    Debug.Log($"[{entry.timestamp}] Value: {entry.value}");\n#endif\n'})}),"\n",(0,a.jsx)(n.h3,{id:"debug-window",children:"Debug Window"}),"\n",(0,a.jsx)(n.p,{children:"Access via:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Tools \u2192 SoapKit \u2192 Debug Window\n"})}),"\n",(0,a.jsx)(n.p,{children:"Features:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\ud83d\udd0e Real-time event monitoring"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udcca Listener count and event stats"}),"\n",(0,a.jsx)(n.li,{children:"\ud83e\uddea Manual test triggering"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udd58 History of recent raises"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"inspector-info",children:"Inspector Info"}),"\n",(0,a.jsx)(n.p,{children:"Each event shows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Listener Count"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Raise Count"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Last Raised"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Manual Raise Button"})}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,a.jsx)(n.h3,{id:"-do-this",children:"\u2705 Do This"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"private int cachedValue;\n\nprivate void OnEnable() => onHealthChanged.AddListener(OnChanged);\nprivate void OnDisable() => onHealthChanged?.RemoveListener(OnChanged);\n\nprivate void OnChanged(int value)\n{\n    if (value == cachedValue) return;\n    cachedValue = value;\n\n    UpdateUI(value);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"-avoid-this",children:"\u274c Avoid This"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Anti-pattern: expensive lookup & missing unsubscribe\nvoid Start() => onHealthChanged.AddListener(OnChanged);\n\nprivate void OnChanged(int value)\n{\n    FindObjectOfType<HealthBar>().Set(value); // Avoid this\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Time per call"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"SendMessage"})," (Unity)"]}),(0,a.jsx)(n.td,{children:"~2000 ns"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UnityEvent"})}),(0,a.jsx)(n.td,{children:"~800 ns"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"SoapKit Event"})}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.strong,{children:"~200 ns"})," \u26a1"]})]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-unit-testing",children:"\ud83e\uddea Unit Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic void ShouldRaiseDeathEventWhenHealthZero()\n{\n    var healthEvent = ScriptableObject.CreateInstance<IntGameEvent>();\n    var deathEvent = ScriptableObject.CreateInstance<UnitGameEvent>();\n    var system = new GameObject().AddComponent<HealthSystem>();\n\n    bool died = false;\n    deathEvent.AddListener(() => died = true);\n\n    healthEvent.Raise(0);\n\n    Assert.IsTrue(died);\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-common-event-use-cases",children:"\ud83e\udde9 Common Event Use Cases"}),"\n",(0,a.jsx)(n.h3,{id:"state-transitions",children:"State Transitions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class GameStateManager : MonoBehaviour\n{\n    [SerializeField] private GameStateGameEvent onStateChanged;\n    private GameState current = GameState.Menu;\n\n    public void ChangeState(GameState next)\n    {\n        if (next == current) return;\n\n        var previous = current;\n        current = next;\n\n        onStateChanged.Raise(new GameStateData { previousState = previous, newState = next });\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"resource-tracking",children:"Resource Tracking"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class ResourceManager : MonoBehaviour\n{\n    [SerializeField] private IntGameEvent onCoinsChanged;\n    [SerializeField] private BoolGameEvent onCanAfford;\n\n    public void Spend(int amount)\n    {\n        if (coins >= amount)\n        {\n            coins -= amount;\n            onCoinsChanged.Raise(coins);\n            onCanAfford.Raise(coins >= itemCost);\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"animation-integration",children:"Animation Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class AnimationEventBridge : MonoBehaviour\n{\n    [SerializeField] private UnitGameEvent onStart;\n    [SerializeField] private UnitGameEvent onEnd;\n    [SerializeField] private StringGameEvent onTrigger;\n\n    public void OnAnimationStart() => onStart.Raise();\n    public void OnAnimationEnd() => onEnd.Raise();\n    public void OnAnimationTrigger(string name) => onTrigger.Raise(name);\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"custom-event-types",children:"Custom Event Types"}),"\n",(0,a.jsx)(n.p,{children:"Create your own specialized event types for complex data structures and custom validation:"}),"\n",(0,a.jsx)(n.h3,{id:"defining-custom-events",children:"Defining Custom Events"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example: Player Action Event"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Define custom data structure\n[System.Serializable]\npublic struct PlayerActionData\n{\n    public string actionName;\n    public Vector3 position;\n    public float intensity;\n    public GameObject target;\n}\n\n// Create custom event type\n[CreateAssetMenu(menuName = "SoapKit/Events/PlayerAction Event")]\npublic class PlayerActionEvent : GameEvent<PlayerActionData>\n{\n    // Custom validation for player actions\n    protected override bool ValidateEventData(PlayerActionData data)\n    {\n        if (string.IsNullOrEmpty(data.actionName))\n        {\n            Debug.LogWarning("Player action name cannot be empty");\n            return false;\n        }\n        \n        if (data.intensity < 0f || data.intensity > 1f)\n        {\n            Debug.LogWarning("Player action intensity must be between 0 and 1");\n            return false;\n        }\n        \n        return true;\n    }\n    \n    // Custom logging for debugging\n    protected override void OnEventRaised(PlayerActionData data)\n    {\n        base.OnEventRaised(data);\n        \n        #if UNITY_EDITOR\n        Debug.Log($"Player Action: {data.actionName} at {data.position} with intensity {data.intensity:F2}");\n        #endif\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"event-configuration",children:"Event Configuration"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Advanced Event Setup:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'Name: OnHealthChanged\nType: IntGameEvent\nDescription: "Raised when player health changes"\nDebug Mode: Enabled     // Show in debug window\nHistory Size: 100       // Remember last 100 raises\nPerformance Tracking: Enabled  // Track performance metrics\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Event Categories:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Gameplay"}),": Core game mechanics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"UI"}),": User interface interactions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audio"}),": Sound and music triggers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"System"}),": Low-level system events"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Debug"}),": Development and testing events"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"event-system-templates",children:"Event System Templates"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Complete Health System Events:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Health system event collection\nIntGameEvent: OnHealthChanged    // Health value updates\nIntGameEvent: OnDamageTaken     // Damage amount\nUnitGameEvent: OnPlayerDied     // Death notification\nUnitGameEvent: OnPlayerHealed   // Healing notification\nBoolGameEvent: OnCriticalHealth // Low health warning\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Inventory System Events:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"StringGameEvent: OnItemAdded     // Item name added\nStringGameEvent: OnItemRemoved   // Item name removed \nBoolGameEvent: OnInventoryFull   // Capacity reached\nIntGameEvent: OnCountChanged     // Item count updates\nGameObjectGameEvent: OnItemUsed  // Item object used\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-next-steps",children:"\u2795 Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,a.jsx)(n.a,{href:"/SoapKit-Doc/docs/core-systems/variables",children:"Variables System"})," \u2014 Reactive data channels"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\uddea ",(0,a.jsx)(n.a,{href:"/SoapKit-Doc/docs/core-systems/quick-guide",children:"Quick Guide"})," \u2014 Common usage patterns"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\uddf0 ",(0,a.jsx)(n.a,{href:"/SoapKit-Doc/docs/editor-tools/debug-window",children:"Debug Tools"})," \u2014 Live event analysis"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\uddec ",(0,a.jsx)(n.a,{href:"/SoapKit-Doc/docs/advanced/custom-events",children:"Custom Events"})," \u2014 Define new event types"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Events System"})," is the backbone of SoapKit's architecture. Mastering events gives you the power to build flexible, testable, professional Unity systems \u2014 no tight coupling required."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);