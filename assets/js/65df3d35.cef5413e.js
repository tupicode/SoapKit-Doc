"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[8559],{1596:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/overview","title":"API Reference Overview","description":"Complete API reference for SoapKit - Unity\'s premier ScriptableObject Architecture Pattern (SOAP) implementation.","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/SoapKit-Doc/docs/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"State Management Example","permalink":"/SoapKit-Doc/docs/examples/state-management"},"next":{"title":"Variables API Reference","permalink":"/SoapKit-Doc/docs/api/variables"}}');var s=i(4848),t=i(8453);const l={},a="API Reference Overview",d={},c=[{value:"Core Namespaces",id:"core-namespaces",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Events System",id:"events-system",level:3},{value:"Variables System",id:"variables-system",level:3},{value:"Core Interfaces",id:"core-interfaces",level:2},{value:"IReadOnlyVariable&lt;T&gt;",id:"ireadonlyvariablet",level:3},{value:"IGameEvent",id:"igameevent",level:3},{value:"IGameEvent&lt;T&gt;",id:"igameeventt",level:3},{value:"Core Classes",id:"core-classes",level:2},{value:"BaseVariable&lt;T&gt;",id:"basevariablet",level:3},{value:"GameEvent&lt;T&gt;",id:"gameeventt",level:3},{value:"Variable Types",id:"variable-types",level:2},{value:"Primitive Variables",id:"primitive-variables",level:3},{value:"Unity Types",id:"unity-types",level:3},{value:"Event Types",id:"event-types",level:2},{value:"Primitive Events",id:"primitive-events",level:3},{value:"Unity Type Events",id:"unity-type-events",level:3},{value:"Editor Tools API",id:"editor-tools-api",level:2},{value:"SoapKitDebugWindow",id:"soapkitdebugwindow",level:3},{value:"SOAPDependencyVisualizer",id:"soapdependencyvisualizer",level:3},{value:"SOAPPerformanceAnalyzer",id:"soapperformanceanalyzer",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Variable Usage",id:"basic-variable-usage",level:3},{value:"Basic Event Usage",id:"basic-event-usage",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Variable Performance",id:"variable-performance",level:3},{value:"Event Performance",id:"event-performance",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Variable Best Practices",id:"variable-best-practices",level:3},{value:"Event Best Practices",id:"event-best-practices",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From Unity Events",id:"from-unity-events",level:3},{value:"From Direct References",id:"from-direct-references",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Tools",id:"debug-tools",level:3},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api-reference-overview",children:"API Reference Overview"})}),"\n",(0,s.jsx)(n.p,{children:"Complete API reference for SoapKit - Unity's premier ScriptableObject Architecture Pattern (SOAP) implementation."}),"\n",(0,s.jsx)(n.h2,{id:"core-namespaces",children:"Core Namespaces"}),"\n",(0,s.jsx)(n.p,{children:"SoapKit is organized into logical namespaces for clean architecture:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using FarmGrowthToolkit.Soap;          // Core classes and interfaces\nusing FarmGrowthToolkit.Soap.Events;   // Event system components  \nusing FarmGrowthToolkit.Soap.Variables; // Variable system components\nusing FarmGrowthToolkit.Soap.Editor;   // Editor-only tools (conditional compilation)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.p,{children:"SoapKit implements a two-pillar architecture:"}),"\n",(0,s.jsx)(n.h3,{id:"events-system",children:"Events System"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GameEvent<T>"}),": Generic event base class for type-safe communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Listener Management"}),": Add/remove listeners with automatic cleanup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debug Integration"}),": Built-in debugging and performance monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event History"}),": Editor-only event tracking for development"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"variables-system",children:"Variables System"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BaseVariable<T>"}),": Generic variable base class with change notifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IReadOnlyVariable<T>"}),": Interface for read-only access patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type-Specific Operations"}),": Specialized methods per variable type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constraint Validation"}),": Built-in validation and constraint systems"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"core-interfaces",children:"Core Interfaces"}),"\n",(0,s.jsx)(n.h3,{id:"ireadonlyvariablet",children:"IReadOnlyVariable<T>"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IReadOnlyVariable<T>\n{\n    T Value { get; }\n    event System.Action<T> OnValueChanged;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"igameevent",children:"IGameEvent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IGameEvent\n{\n    void AddListener(UnityAction action);\n    void RemoveListener(UnityAction action);\n    void Raise();\n    int ListenerCount { get; }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"igameeventt",children:"IGameEvent<T>"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public interface IGameEvent<T>\n{\n    void AddListener(UnityAction<T> action);\n    void RemoveListener(UnityAction<T> action);\n    void Raise(T value);\n    int ListenerCount { get; }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,s.jsx)(n.h3,{id:"basevariablet",children:"BaseVariable<T>"}),"\n",(0,s.jsx)(n.p,{children:"The foundation of the variable system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[System.Serializable]\npublic abstract class BaseVariable<T> : ScriptableObject, IReadOnlyVariable<T>\n{\n    // Core Properties\n    public T Value { get; protected set; }\n    public virtual bool EnableChangeNotification { get; set; } = true;\n    \n    // Events\n    public event System.Action<T> OnValueChanged;\n    \n    // Core Methods\n    public virtual void SetValue(T newValue);\n    public virtual void NotifyValueChanged();\n    protected virtual bool AreValuesEqual(T a, T b);\n    \n    // Editor Integration\n    [ContextMenu("Trigger Change Notification")]\n    public void TriggerChangeNotification();\n    \n    #if UNITY_EDITOR\n    [UnityEditor.MenuItem("CONTEXT/BaseVariable/Debug Value")]\n    static void DebugValue(UnityEditor.MenuCommand command);\n    #endif\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"gameeventt",children:"GameEvent<T>"}),"\n",(0,s.jsx)(n.p,{children:"The foundation of the event system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[System.Serializable]\npublic abstract class GameEvent<T> : ScriptableObject, IGameEvent<T>\n{\n    // Core Properties\n    public int ListenerCount => listeners?.GetPersistentEventCount() ?? 0;\n    public bool EnableEventHistory { get; set; } = true;\n    \n    // Core Methods\n    public void AddListener(UnityAction<T> listener);\n    public void RemoveListener(UnityAction<T> listener);\n    public void Raise(T value);\n    public void RemoveAllListeners();\n    \n    // Editor Integration\n    [ContextMenu("Raise Test Event")]\n    public virtual void RaiseTestEvent();\n    \n    #if UNITY_EDITOR\n    public List<EventHistoryEntry> EventHistory { get; }\n    public void ClearEventHistory();\n    #endif\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"variable-types",children:"Variable Types"}),"\n",(0,s.jsx)(n.h3,{id:"primitive-variables",children:"Primitive Variables"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Class"}),(0,s.jsx)(n.th,{children:"Operations"}),(0,s.jsx)(n.th,{children:"Constraints"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Bool"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BoolVariable"})}),(0,s.jsx)(n.td,{children:"Toggle, SetTrue/False, And, Or, Xor"}),(0,s.jsx)(n.td,{children:"None"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Int"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"IntVariable"})}),(0,s.jsx)(n.td,{children:"Add, Subtract, Multiply, Divide, Increment, Decrement"}),(0,s.jsx)(n.td,{children:"Min/Max values"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Float"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FloatVariable"})}),(0,s.jsx)(n.td,{children:"Math operations, Percentage, Round"}),(0,s.jsx)(n.td,{children:"Min/Max values, decimal places"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"StringVariable"})}),(0,s.jsx)(n.td,{children:"Append, Prepend, Replace, Trim, Case conversion"}),(0,s.jsx)(n.td,{children:"Length limits"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"unity-types",children:"Unity Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Class"}),(0,s.jsx)(n.th,{children:"Operations"}),(0,s.jsx)(n.th,{children:"Constraints"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector2"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector2Variable"})}),(0,s.jsx)(n.td,{children:"Vector math, Normalize, Lerp, Magnitude"}),(0,s.jsx)(n.td,{children:"Magnitude limits"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector3"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector3Variable"})}),(0,s.jsx)(n.td,{children:"3D operations, MoveTowards, Slerp"}),(0,s.jsx)(n.td,{children:"Magnitude limits"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector2Int"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector2IntVariable"})}),(0,s.jsx)(n.td,{children:"Integer vector math"}),(0,s.jsx)(n.td,{children:"Magnitude limits"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Color"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ColorVariable"})}),(0,s.jsx)(n.td,{children:"RGB/HSV, Lerp, Grayscale, Invert"}),(0,s.jsx)(n.td,{children:"None"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GameObject"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GameObjectVariable"})}),(0,s.jsx)(n.td,{children:"Component access, Tag validation"}),(0,s.jsx)(n.td,{children:"Tag requirements"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Transform"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TransformVariable"})}),(0,s.jsx)(n.td,{children:"Position/rotation, Hierarchy"}),(0,s.jsx)(n.td,{children:"None"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"event-types",children:"Event Types"}),"\n",(0,s.jsx)(n.h3,{id:"primitive-events",children:"Primitive Events"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Class"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Unit"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GameEvent"})}),(0,s.jsx)(n.td,{children:"Simple notifications"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Bool"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BoolGameEvent"})}),(0,s.jsx)(n.td,{children:"State changes, toggles"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Int"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"IntGameEvent"})}),(0,s.jsx)(n.td,{children:"Scores, counters, IDs"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Float"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FloatGameEvent"})}),(0,s.jsx)(n.td,{children:"Values, percentages"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"StringGameEvent"})}),(0,s.jsx)(n.td,{children:"Messages, names"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"unity-type-events",children:"Unity Type Events"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Class"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector2"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector2GameEvent"})}),(0,s.jsx)(n.td,{children:"2D positions, UI coordinates"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector3"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector3GameEvent"})}),(0,s.jsx)(n.td,{children:"3D positions, directions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vector2Int"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Vector2IntGameEvent"})}),(0,s.jsx)(n.td,{children:"Grid coordinates"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Color"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ColorGameEvent"})}),(0,s.jsx)(n.td,{children:"Color changes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GameObject"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GameObjectGameEvent"})}),(0,s.jsx)(n.td,{children:"Object references"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Transform"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TransformGameEvent"})}),(0,s.jsx)(n.td,{children:"Transform references"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"editor-tools-api",children:"Editor Tools API"}),"\n",(0,s.jsx)(n.h3,{id:"soapkitdebugwindow",children:"SoapKitDebugWindow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class SoapKitDebugWindow : EditorWindow\n{\n    // Static access\n    [MenuItem("Tools/SoapKit/Debug Window")]\n    public static void ShowWindow();\n    \n    // Runtime monitoring\n    public void RefreshVariableList();\n    public void RefreshEventList();\n    public void ClearEventHistory();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"soapdependencyvisualizer",children:"SOAPDependencyVisualizer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class SOAPDependencyVisualizer : EditorWindow\n{\n    // Visualization modes\n    public enum ViewMode { GameObjectCentric, AssetCentric, Graph }\n    \n    // Core methods\n    public void AnalyzeDependencies();\n    public void ExportDependencyReport();\n    public void RefreshVisualization();\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"soapperformanceanalyzer",children:"SOAPPerformanceAnalyzer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class SOAPPerformanceAnalyzer : EditorWindow\n{\n    // Performance monitoring\n    public void StartProfiling();\n    public void StopProfiling();\n    public void GeneratePerformanceReport();\n    \n    // Hotspot detection\n    public List<PerformanceHotspot> DetectHotspots();\n    public void ShowOptimizationRecommendations();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-variable-usage",children:"Basic Variable Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Create and use a variable\n[SerializeField] private IntVariable playerHealth;\n\nprivate void Start()\n{\n    // Subscribe to changes\n    playerHealth.OnValueChanged += OnHealthChanged;\n    \n    // Use specialized operations\n    playerHealth.Add(25);\n    playerHealth.SetMax(150);\n}\n\nprivate void OnHealthChanged(int newHealth)\n{\n    Debug.Log($"Health changed to: {newHealth}");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"basic-event-usage",children:"Basic Event Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Create and use an event\n[SerializeField] private BoolGameEvent onGamePaused;\n\nprivate void OnEnable()\n{\n    onGamePaused.AddListener(OnGamePausedChanged);\n}\n\nprivate void OnDisable()\n{\n    onGamePaused.RemoveListener(OnGamePausedChanged);\n}\n\nprivate void OnGamePausedChanged(bool isPaused)\n{\n    Time.timeScale = isPaused ? 0f : 1f;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"variable-performance",children:"Variable Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Change Notifications"}),": Only triggered when values actually change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Operations"}),": Disable notifications during bulk updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Usage"}),": Minimal overhead per variable instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Thread Safety"}),": Not thread-safe, use on main thread only"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"event-performance",children:"Event Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Listener Management"}),": Efficient add/remove operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Leaks"}),": Always pair AddListener with RemoveListener"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Frequency"}),": Monitor high-frequency events for performance impact"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"History Tracking"}),": Editor-only feature with no runtime cost"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"variable-best-practices",children:"Variable Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialization"}),": Always set initial values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constraints"}),": Use built-in validation when possible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Change Detection"}),": Subscribe to OnValueChanged for reactive behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Naming"}),": Use descriptive asset names for debugging"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"event-best-practices",children:"Event Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lifecycle Management"}),": Subscribe in OnEnable, unsubscribe in OnDisable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameter Types"}),": Use specific event types for type safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handlers"}),": Keep handlers lightweight and fast"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Add tooltips and descriptions to event assets"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsx)(n.h3,{id:"from-unity-events",children:"From Unity Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Old Unity Event approach\n[SerializeField] private UnityEvent onHealthChanged;\n\n// New SoapKit approach  \n[SerializeField] private IntGameEvent onHealthChanged;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"from-direct-references",children:"From Direct References"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Old direct reference approach\n[SerializeField] private HealthSystem healthSystem;\n\n// New SoapKit approach\n[SerializeField] private IntVariable playerHealth;\n[SerializeField] private IntGameEvent onHealthChanged;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Null References"}),": Always check for null before using ScriptableObject references"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing Listeners"}),": Use OnEnable/OnDisable pattern for reliable subscription"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Leaks"}),": Unsubscribe from events to prevent memory leaks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Monitor listener counts and event frequency"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-tools",children:"Debug Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SoapKit Debug Window"}),": Monitor variables and events in real-time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Analyzer"}),": Identify performance bottlenecks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Visualizer"}),": Understand system relationships"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event History"}),": Track event flow for debugging"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Explore ",(0,s.jsx)(n.a,{href:"./variables",children:"Variable API Reference"})," for detailed variable documentation"]}),"\n",(0,s.jsxs)(n.li,{children:["Check ",(0,s.jsx)(n.a,{href:"./events",children:"Event API Reference"})," for comprehensive event system details"]}),"\n",(0,s.jsxs)(n.li,{children:["Review ",(0,s.jsx)(n.a,{href:"./editor-tools",children:"Editor Tools API"})," for development workflow integration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);