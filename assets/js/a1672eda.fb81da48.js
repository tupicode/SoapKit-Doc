"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[4410],{5795:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"advanced/custom-variables","title":"Custom Variables","description":"Learn how to create your own custom variable types in SoapKit.","source":"@site/docs/advanced/custom-variables.md","sourceDirName":"advanced","slug":"/advanced/custom-variables","permalink":"/SoapKit-Doc/docs/advanced/custom-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/custom-variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Creating Custom Events","permalink":"/SoapKit-Doc/docs/advanced/custom-events"},"next":{"title":"Design Patterns","permalink":"/SoapKit-Doc/docs/advanced/patterns"}}');var s=n(4848),r=n(8453);const i={},l="Custom Variables",o={},c=[{value:"Creating Custom Variable Types",id:"creating-custom-variable-types",level:2},{value:"Basic Custom Variable",id:"basic-custom-variable",level:3},{value:"Custom Operations",id:"custom-operations",level:3},{value:"Validation and Constraints",id:"validation-and-constraints",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Equality Comparison",id:"custom-equality-comparison",level:3},{value:"Editor Integration",id:"editor-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"custom-variables",children:"Custom Variables"})}),"\n",(0,s.jsx)(a.p,{children:"Learn how to create your own custom variable types in SoapKit."}),"\n",(0,s.jsx)(a.h2,{id:"creating-custom-variable-types",children:"Creating Custom Variable Types"}),"\n",(0,s.jsx)(a.p,{children:"SoapKit's architecture allows you to extend the system with your own custom variable types. This is useful when you need to work with data types not covered by the built-in variables."}),"\n",(0,s.jsx)(a.h3,{id:"basic-custom-variable",children:"Basic Custom Variable"}),"\n",(0,s.jsxs)(a.p,{children:["To create a custom variable type, inherit from ",(0,s.jsx)(a.code,{children:"BaseVariable<T>"}),":"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:'using FarmGrowthToolkit.Soap;\nusing UnityEngine;\n\n[CreateAssetMenu(menuName = "SoapKit/Variables/Custom/MyData Variable")]\npublic class MyDataVariable : BaseVariable<MyData>\n{\n    // Your custom implementation here\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"custom-operations",children:"Custom Operations"}),"\n",(0,s.jsx)(a.p,{children:"Add specialized operations for your data type:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "SoapKit/Variables/Custom/MyData Variable")]\npublic class MyDataVariable : BaseVariable<MyData>\n{\n    [ContextMenu("Reset Data")]\n    public void ResetData()\n    {\n        SetValue(new MyData());\n    }\n    \n    public void ModifyProperty(float newValue)\n    {\n        MyData current = Value;\n        current.someProperty = newValue;\n        SetValue(current);\n    }\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"validation-and-constraints",children:"Validation and Constraints"}),"\n",(0,s.jsx)(a.p,{children:"Implement custom validation logic:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:'public class MyDataVariable : BaseVariable<MyData>\n{\n    [SerializeField] private float minValue;\n    [SerializeField] private float maxValue;\n    \n    public override void SetValue(MyData newValue)\n    {\n        if (newValue.someProperty < minValue || newValue.someProperty > maxValue)\n        {\n            Debug.LogWarning($"Value {newValue.someProperty} is outside valid range [{minValue}, {maxValue}]");\n            return;\n        }\n        \n        base.SetValue(newValue);\n    }\n}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(a.h3,{id:"custom-equality-comparison",children:"Custom Equality Comparison"}),"\n",(0,s.jsx)(a.p,{children:"Override equality comparison for complex types:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:"public class MyDataVariable : BaseVariable<MyData>\n{\n    protected override bool AreValuesEqual(MyData a, MyData b)\n    {\n        if (a == null && b == null) return true;\n        if (a == null || b == null) return false;\n        \n        return Mathf.Approximately(a.someProperty, b.someProperty);\n    }\n}\n"})}),"\n",(0,s.jsx)(a.h3,{id:"editor-integration",children:"Editor Integration"}),"\n",(0,s.jsx)(a.p,{children:"Create custom property drawers for enhanced editor experience:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:"#if UNITY_EDITOR\nusing UnityEditor;\n\n[CustomPropertyDrawer(typeof(MyDataVariable))]\npublic class MyDataVariableDrawer : BaseVariablePropertyDrawer\n{\n    // Custom inspector implementation\n}\n#endif\n"})}),"\n",(0,s.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Consistent Naming"}),": Follow the pattern ",(0,s.jsx)(a.code,{children:"[TypeName]Variable"})]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Menu Organization"}),": Use descriptive menu paths in ",(0,s.jsx)(a.code,{children:"CreateAssetMenu"})]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Validation"}),": Always validate input values"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Documentation"}),": Add tooltips and help text"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Testing"}),": Create test cases for your custom variables"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Explore ",(0,s.jsx)(a.a,{href:"./performance",children:"Performance Optimization"})," techniques"]}),"\n",(0,s.jsxs)(a.li,{children:["Learn about ",(0,s.jsx)(a.a,{href:"./patterns",children:"Design Patterns"})," with custom variables"]}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var t=n(6540);const s={},r=t.createContext(s);function i(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);