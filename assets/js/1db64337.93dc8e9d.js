"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[8413],{6785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"overview","title":"SoapKit Overview","description":"Welcome to SoapKit, the professional ScriptableObject Architecture Pattern (SOAP) implementation for Unity. SoapKit provides a complete, production-ready framework for building decoupled, event-driven game systems using Unity\'s powerful ScriptableObject foundation.","source":"@site/docs/overview.md","sourceDirName":".","slug":"/","permalink":"/SoapKit-Doc/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"SoapKit Overview","sidebar_position":1,"slug":"/"},"sidebar":"docsSidebar","next":{"title":"Why Choose SoapKit?","permalink":"/SoapKit-Doc/docs/why-soapkit"}}');var a=t(4848),r=t(8453);const s={title:"SoapKit Overview",sidebar_position:1,slug:"/"},l="SoapKit Documentation",o={},c=[{value:"What is SoapKit?",id:"what-is-soapkit",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Core Features",id:"core-features",level:2},{value:"<strong>Events System</strong>",id:"events-system",level:3},{value:"<strong>Variables System</strong>",id:"variables-system",level:3},{value:"<strong>Professional Editor Tools</strong>",id:"professional-editor-tools",level:3},{value:"Architecture Benefits",id:"architecture-benefits",level:2},{value:"Traditional Approach Problems",id:"traditional-approach-problems",level:3},{value:"SoapKit Approach Benefits",id:"soapkit-approach-benefits",level:3},{value:"Package Structure",id:"package-structure",level:2},{value:"Unity Compatibility",id:"unity-compatibility",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"soapkit-documentation",children:"SoapKit Documentation"})}),"\n",(0,a.jsxs)(n.p,{children:["Welcome to ",(0,a.jsx)(n.strong,{children:"SoapKit"}),", the professional ",(0,a.jsx)(n.strong,{children:"ScriptableObject Architecture Pattern (SOAP)"})," implementation for Unity. SoapKit provides a complete, production-ready framework for building decoupled, event-driven game systems using Unity's powerful ScriptableObject foundation."]}),"\n",(0,a.jsx)(n.h2,{id:"what-is-soapkit",children:"What is SoapKit?"}),"\n",(0,a.jsx)(n.p,{children:"SoapKit is a Unity package that implements the ScriptableObject Architecture Pattern, offering a modern approach to game architecture that emphasizes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decoupling"}),": Reduce dependencies between game systems"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data-Driven Design"}),": Use ScriptableObjects for configuration and communication"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event-Driven Architecture"}),": React to changes without tight coupling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Professional Tooling"}),": Advanced editor tools for debugging and visualization"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Optimized for production games"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:'title="Creating a Health System"',children:'// 1. Create Variables (Create > SoapKit > Variables > Int Variable)\n[SerializeField] private IntVariable playerHealth;\n[SerializeField] private IntVariable maxHealth;\n\n// 2. Create Events (Create > SoapKit > Events > Unit Event)  \n[SerializeField] private UnitGameEvent onPlayerDied;\n\npublic class HealthSystem : MonoBehaviour\n{\n    void Start()\n    {\n        // Subscribe to health changes\n        playerHealth.OnValueChanged += OnHealthChanged;\n        \n        // Set initial values\n        maxHealth.SetValue(100);\n        playerHealth.SetValue(100);\n    }\n    \n    public void TakeDamage(int damage)\n    {\n        // Use built-in operations\n        playerHealth.Subtract(damage);\n        \n        if (playerHealth.Value <= 0)\n        {\n            onPlayerDied.Raise(); // Notify all listeners\n        }\n    }\n    \n    private void OnHealthChanged(int newHealth)\n    {\n        Debug.Log($"Health changed to: {newHealth}");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"core-features",children:"Core Features"}),"\n",(0,a.jsx)(n.h3,{id:"events-system",children:(0,a.jsx)(n.strong,{children:"Events System"})}),"\n",(0,a.jsx)(n.p,{children:"Professional event system with type safety, debugging tools, and performance monitoring."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Create typed events for any data type\n[SerializeField] private BoolGameEvent onGamePaused;\n[SerializeField] private Vector3GameEvent onPlayerMoved;\n[SerializeField] private StringGameEvent onPlayerNameChanged;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"variables-system",children:(0,a.jsx)(n.strong,{children:"Variables System"})}),"\n",(0,a.jsx)(n.p,{children:"Smart variables with constraints, validation, and specialized operations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Variables with built-in operations\nplayerScore.Add(100);           // Add to score\nplayerName.Append(" (VIP)");    // String operations\nplayerPosition.Normalize();     // Vector operations\nplayerColor.SetAlpha(0.5f);     // Color operations\n'})}),"\n",(0,a.jsx)(n.h3,{id:"professional-editor-tools",children:(0,a.jsx)(n.strong,{children:"Professional Editor Tools"})}),"\n",(0,a.jsx)(n.p,{children:"Industry-level debugging and visualization tools."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Debug Window"}),": Real-time monitoring and testing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dependency Visualizer"}),": Interactive system relationship graphs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Analyzer"}),": Bottleneck detection and optimization"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Asset Creator"}),": Batch creation with templates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Hierarchy Overlay"}),": Visual connection indicators"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"architecture-benefits",children:"Architecture Benefits"}),"\n",(0,a.jsx)(n.p,{children:"SoapKit's architecture provides several key advantages over traditional approaches:"}),"\n",(0,a.jsx)(n.h3,{id:"traditional-approach-problems",children:"Traditional Approach Problems"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// \u274c Tight coupling\npublic class PlayerHealth : MonoBehaviour \n{\n    public UIHealthBar healthBar;     // Direct reference\n    public GameManager gameManager;   // Direct reference\n    public AudioSource audioSource;  // Direct reference\n    \n    void TakeDamage(int damage) \n    {\n        health -= damage;\n        healthBar.UpdateHealth(health);     // Tight coupling\n        gameManager.CheckGameOver();        // Tight coupling\n        audioSource.PlayOneShot(hurtSound); // Tight coupling\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"soapkit-approach-benefits",children:"SoapKit Approach Benefits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Decoupled, flexible\npublic class PlayerHealth : MonoBehaviour \n{\n    [SerializeField] private IntVariable health;\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private UnitGameEvent onPlayerDied;\n    \n    void TakeDamage(int damage) \n    {\n        health.Subtract(damage);           // Update data\n        onHealthChanged.Raise(health.Value); // Notify interested systems\n        \n        if (health.Value <= 0)\n            onPlayerDied.Raise();          // Let systems react independently\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"package-structure",children:"Package Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Assets/SoapKit/\n\u251c\u2500\u2500 package.json              # UPM Package Manifest\n\u251c\u2500\u2500 Runtime/\n\u2502   \u251c\u2500\u2500 Events/               # GameEvent<T> implementations\n\u2502   \u2502   \u251c\u2500\u2500 GameEvent.cs      # Base event system\n\u2502   \u2502   \u251c\u2500\u2500 BoolGameEvent.cs  # Typed events\n\u2502   \u2502   \u2514\u2500\u2500 ...               # All Unity types covered\n\u2502   \u2514\u2500\u2500 Variables/            # BaseVariable<T> implementations\n\u2502       \u251c\u2500\u2500 BaseVariable.cs   # Base variable system\n\u2502       \u251c\u2500\u2500 BoolVariable.cs   # Typed variables\n\u2502       \u2514\u2500\u2500 ...               # All Unity types with operations\n\u2514\u2500\u2500 Examples/                 # Production-ready examples\n    \u251c\u2500\u2500 Scripts/              # Complete system implementations\n    \u2514\u2500\u2500 Scenes/               # Demo scenes\n"})}),"\n",(0,a.jsx)(n.h2,{id:"unity-compatibility",children:"Unity Compatibility"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Unity Version"}),": 2022.3 LTS or newer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Unity 6"}),": Full compatibility"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Package Manager"}),": UPM compatible"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Assembly Definition"}),": Clean compilation boundaries"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Platforms"}),": All Unity-supported platforms"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./why-soapkit",children:"Why Choose SoapKit?"})})," - Learn about the benefits and advantages"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./getting-started",children:"Getting Started"})})," - Installation and first steps"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./core-systems/events",children:"Core Systems"})})," - Deep dive into Events and Variables"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./editor-tools/debug-window",children:"Editor Tools"})})," - Professional debugging tools"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./examples/health-system",children:"Examples"})})," - Real-world implementations"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Ready to transform your Unity project architecture? Let's get started! \ud83d\ude80"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);