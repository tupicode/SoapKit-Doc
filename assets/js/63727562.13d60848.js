"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[3061],{202:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-monitor-75ce3fb6284594c3a29a6c77dc00cc8e.png"},1993:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-events-75ce3fb6284594c3a29a6c77dc00cc8e.png"},2195:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-live-testing-75ce3fb6284594c3a29a6c77dc00cc8e.png"},4449:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"editor-tools/debug-window","title":"Debug Window","description":"The SoapKit Debug Window is your mission control center for monitoring, testing, and debugging your SOAP architecture. This professional-grade tool provides real-time insights into your events, variables, and system performance.","source":"@site/docs/editor-tools/debug-window.md","sourceDirName":"editor-tools","slug":"/editor-tools/debug-window","permalink":"/SoapKit-Doc/docs/editor-tools/debug-window","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/editor-tools/debug-window.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Debug Window","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Quick Reference Guide","permalink":"/SoapKit-Doc/docs/core-systems/quick-guide"},"next":{"title":"Asset Creator","permalink":"/SoapKit-Doc/docs/editor-tools/asset-creator"}}');var r=s(4848),t=s(8453);const l={title:"Debug Window",sidebar_position:2},a="SoapKit Debug Window",o={},d=[{value:"Opening the Debug Window",id:"opening-the-debug-window",level:2},{value:"Overview",id:"overview",level:2},{value:"Monitor Tab",id:"monitor-tab",level:2},{value:"Real-Time Dashboard",id:"real-time-dashboard",level:3},{value:"Variable Monitoring",id:"variable-monitoring",level:3},{value:"Event Activity Feed",id:"event-activity-feed",level:3},{value:"Events Tab",id:"events-tab",level:2},{value:"Manual Event Testing",id:"manual-event-testing",level:3},{value:"Event Testing Examples",id:"event-testing-examples",level:3},{value:"Event History",id:"event-history",level:3},{value:"Variables Tab",id:"variables-tab",level:2},{value:"Variable Inspector",id:"variable-inspector",level:3},{value:"Variable Operations",id:"variable-operations",level:3},{value:"Performance Tab",id:"performance-tab",level:2},{value:"System Performance Analysis",id:"system-performance-analysis",level:3},{value:"Performance Insights",id:"performance-insights",level:3},{value:"Performance Recommendations",id:"performance-recommendations",level:3},{value:"Dependencies Tab",id:"dependencies-tab",level:2},{value:"Visual Dependency Mapping",id:"visual-dependency-mapping",level:3},{value:"Dependency Analysis",id:"dependency-analysis",level:3},{value:"Circular Dependency Detection",id:"circular-dependency-detection",level:3},{value:"Live Testing Tab",id:"live-testing-tab",level:2},{value:"Runtime Testing Tools",id:"runtime-testing-tools",level:3},{value:"Automated Test Sequences",id:"automated-test-sequences",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Debug Views",id:"custom-debug-views",level:3},{value:"Export and Logging",id:"export-and-logging",level:3},{value:"Integration with Unit Tests",id:"integration-with-unit-tests",level:3},{value:"Keyboard Shortcuts",id:"keyboard-shortcuts",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Daily Debugging Workflow",id:"daily-debugging-workflow",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Collaborative Debugging",id:"collaborative-debugging",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Window Settings",id:"debug-window-settings",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"soapkit-debug-window",children:"SoapKit Debug Window"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"SoapKit Debug Window"})," is your mission control center for monitoring, testing, and debugging your SOAP architecture. This professional-grade tool provides real-time insights into your events, variables, and system performance."]}),"\n",(0,r.jsx)(n.h2,{id:"opening-the-debug-window",children:"Opening the Debug Window"}),"\n",(0,r.jsx)(n.p,{children:"Access the Debug Window through Unity's menu:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Tools > SoapKit > Debug Window\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or use the keyboard shortcut: ",(0,r.jsx)(n.code,{children:"Ctrl+Shift+D"})," (Windows) / ",(0,r.jsx)(n.code,{children:"Cmd+Shift+D"})," (Mac)"]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Debug Window consists of several tabs, each providing specific debugging capabilities:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udcca Monitor"})," - Real-time variable and event monitoring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83c\udfaf Events"})," - Event testing and history"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udcc8 Variables"})," - Variable inspection and manipulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\u26a1 Performance"})," - Performance analysis and bottleneck detection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83d\udd17 Dependencies"})," - Visual dependency mapping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\ud83c\udfae Live Testing"})," - Runtime testing tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitor-tab",children:"Monitor Tab"}),"\n",(0,r.jsx)(n.h3,{id:"real-time-dashboard",children:"Real-Time Dashboard"}),"\n",(0,r.jsx)(n.p,{children:"The Monitor tab provides a live dashboard of your SOAP systems:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Monitor Tab Screenshot",src:s(202).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variable Values"}),": Live updates of all variable values during gameplay"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Activity"}),": Real-time event firing with frequency indicators"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"System Status"}),": Health indicators for each SOAP system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Metrics"}),": CPU usage, memory allocation, and event throughput"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"variable-monitoring",children:"Variable Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Variables appear automatically in the monitor\npublic class PlayerHealth : MonoBehaviour\n{\n    [SerializeField] private IntVariable health; // Shows in Variables section\n    [SerializeField] private FloatVariable speed; // Shows in Variables section\n    \n    // Values update in real-time during play mode\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Monitor Display:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\ud83d\udcca Variables\n\u251c\u2500\u2500 PlayerHealth (IntVariable): 85/100\n\u251c\u2500\u2500 PlayerSpeed (FloatVariable): 5.2\n\u251c\u2500\u2500 PlayerName (StringVariable): "Hero"\n\u2514\u2500\u2500 IsGamePaused (BoolVariable): false\n'})}),"\n",(0,r.jsx)(n.h3,{id:"event-activity-feed",children:"Event Activity Feed"}),"\n",(0,r.jsx)(n.p,{children:"The activity feed shows recent event firings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ud83c\udfaf Recent Events (Last 50)\n[14:32:15] OnHealthChanged(85) \u2192 3 listeners\n[14:32:14] OnPlayerMoved(Vector3(2,0,3)) \u2192 5 listeners  \n[14:32:12] OnEnemyDied() \u2192 7 listeners\n[14:32:10] OnScoreChanged(1250) \u2192 2 listeners\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event Information:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timestamp"}),": When the event was raised"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Name"}),": The ScriptableObject asset name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),": The value passed to the event"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Listener Count"}),": How many systems are subscribed"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"events-tab",children:"Events Tab"}),"\n",(0,r.jsx)(n.h3,{id:"manual-event-testing",children:"Manual Event Testing"}),"\n",(0,r.jsx)(n.p,{children:"Test any event manually without requiring gameplay triggers:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Events Tab Screenshot",src:s(1993).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event List"}),": All events in your project with current listener counts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameter Input"}),": Type-safe parameter entry for each event type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Raise Button"}),": Fire events manually for testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch Testing"}),": Raise multiple events in sequence"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Templates"}),": Save common test scenarios"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"event-testing-examples",children:"Event Testing Examples"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Testing Health System:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Find ",(0,r.jsx)(n.code,{children:"OnHealthChanged"})," in the Events list"]}),"\n",(0,r.jsxs)(n.li,{children:["Enter test value: ",(0,r.jsx)(n.code,{children:"50"})]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Raise Event"})]}),"\n",(0,r.jsx)(n.li,{children:"Observe UI, audio, and other systems react"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Testing State Changes:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Select ",(0,r.jsx)(n.code,{children:"OnGameStateChanged"})," event"]}),"\n",(0,r.jsxs)(n.li,{children:["Choose state from dropdown: ",(0,r.jsx)(n.code,{children:'"Paused"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Raise Event"})]}),"\n",(0,r.jsx)(n.li,{children:"Verify pause menu appears and game stops"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"event-history",children:"Event History"}),"\n",(0,r.jsx)(n.p,{children:"View detailed history of event activity:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Access event history programmatically\n#if UNITY_EDITOR\nvoid Start()\n{\n    var history = onHealthChanged.GetEventHistory();\n    foreach(var entry in history)\n    {\n        Debug.Log($"Event at {entry.timestamp}: {entry.value}");\n    }\n}\n#endif\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"History Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeline View"}),": Events displayed chronologically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Filtering"}),": Filter by event type, time range, or parameter values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export"}),": Save history to CSV for analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statistics"}),": Event frequency, peak times, and patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"variables-tab",children:"Variables Tab"}),"\n",(0,r.jsx)(n.h3,{id:"variable-inspector",children:"Variable Inspector"}),"\n",(0,r.jsx)(n.p,{children:"Deep inspection and manipulation of variable values:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Variables Tab Screenshot",src:s(7687).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Capabilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Live Editing"}),": Change values during gameplay"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Constraint Visualization"}),": See min/max limits graphically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Change History"}),": Track how values change over time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation Status"}),": See constraint violations and validation errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quick Actions"}),": Reset, randomize, or apply presets"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"variable-operations",children:"Variable Operations"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-Time Value Editing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"// Change values from the Debug Window during gameplay\n// Values update immediately in your game systems\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraint Testing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Min/Max Validation"}),": Test edge cases by setting values at limits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Invalid Values"}),": See how your systems handle constraint violations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Null Testing"}),": Test null GameObject and Transform variables"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance Testing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rapid Changes"}),": Stress test with rapid value changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Monitoring"}),": Watch for memory leaks during value changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Frequency"}),": Monitor how often change events fire"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-tab",children:"Performance Tab"}),"\n",(0,r.jsx)(n.h3,{id:"system-performance-analysis",children:"System Performance Analysis"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Performance Tab Screenshot",src:s(6222).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:"The Performance tab helps identify bottlenecks and optimization opportunities:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Metrics Tracked:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Performance"}),": Time taken for each event dispatch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Listener Performance"}),": CPU time per listener callback"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Usage"}),": Variable and event memory consumption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Allocation Tracking"}),": Garbage collection from SOAP operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-insights",children:"Performance Insights"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event Hotspots:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u26a1 Slowest Events (avg. time per raise)\n1. OnComplexCalculation: 2.3ms (15 listeners)\n2. OnUIUpdate: 1.8ms (8 listeners)\n3. OnPhysicsChanged: 0.9ms (12 listeners)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Memory Hotspots:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ud83d\udcbe Memory Usage\n\u251c\u2500\u2500 Variables: 2.4KB (145 assets)\n\u251c\u2500\u2500 Event History: 1.8KB (500 entries)\n\u251c\u2500\u2500 Listeners: 0.6KB (67 subscriptions)\n\u2514\u2500\u2500 Total SOAP Memory: 4.8KB\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-recommendations",children:"Performance Recommendations"}),"\n",(0,r.jsx)(n.p,{children:"The Debug Window provides actionable optimization advice:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Recommendations:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['"\u26a0\ufe0f ',(0,r.jsx)(n.code,{children:"OnMouseMove"}),' event fires 60x/second - consider throttling"']}),"\n",(0,r.jsxs)(n.li,{children:['"\ud83d\udca1 ',(0,r.jsx)(n.code,{children:"PlayerHealth"}),' has 12 listeners - consider using fewer, more focused events"']}),"\n",(0,r.jsxs)(n.li,{children:['"\ud83d\udd27 ',(0,r.jsx)(n.code,{children:"OnUIUpdate"}),' listeners taking >1ms - profile individual callbacks"']}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"dependencies-tab",children:"Dependencies Tab"}),"\n",(0,r.jsx)(n.h3,{id:"visual-dependency-mapping",children:"Visual Dependency Mapping"}),"\n",(0,r.jsx)(n.p,{children:"Understanding how your SOAP systems connect:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Dependencies Tab Screenshot",src:s(8825).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Visualization Modes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Graph View"}),": Node-based dependency graph"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tree View"}),": Hierarchical dependency tree"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Matrix View"}),": Connection matrix for complex systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flow View"}),": Data flow between systems"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependency-analysis",children:"Dependency Analysis"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variable Readers"}),": Which systems read from which variables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variable Writers"}),": Which systems modify variable values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Raisers"}),": Which systems raise which events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Listeners"}),": Which systems listen to which events"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Dependency Display:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ud83d\udd17 PlayerHealth (IntVariable)\n\u251c\u2500\u2500 \ud83d\udcd6 Readers:\n\u2502   \u251c\u2500\u2500 HealthBar (UI)\n\u2502   \u251c\u2500\u2500 GameOverChecker (Logic)\n\u2502   \u2514\u2500\u2500 HealthEffects (VFX)\n\u251c\u2500\u2500 \u270f\ufe0f Writers:\n\u2502   \u251c\u2500\u2500 DamageSystem (Gameplay)\n\u2502   \u251c\u2500\u2500 HealingSystem (Gameplay)\n\u2502   \u2514\u2500\u2500 CheatConsole (Debug)\n\u2514\u2500\u2500 \ud83d\udce1 Change Listeners:\n    \u251c\u2500\u2500 OnHealthChanged \u2192 HealthUI\n    \u251c\u2500\u2500 OnHealthChanged \u2192 AudioManager\n    \u2514\u2500\u2500 OnPlayerDied \u2192 GameManager\n"})}),"\n",(0,r.jsx)(n.h3,{id:"circular-dependency-detection",children:"Circular Dependency Detection"}),"\n",(0,r.jsx)(n.p,{children:"The tool automatically detects problematic circular dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\u26a0\ufe0f Circular Dependency Detected!\nPlayerHealth \u2192 OnHealthChanged \u2192 HealingSystem \u2192 PlayerHealth\n\n\ud83d\udca1 Suggestion: Break the cycle by using a separate "OnHealingComplete" event\n'})}),"\n",(0,r.jsx)(n.h2,{id:"live-testing-tab",children:"Live Testing Tab"}),"\n",(0,r.jsx)(n.h3,{id:"runtime-testing-tools",children:"Runtime Testing Tools"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Live Testing Screenshot",src:s(2195).A+"",width:"160",height:"160"})}),"\n",(0,r.jsx)(n.p,{children:"Advanced tools for testing your SOAP architecture during gameplay:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Testing Scenarios:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stress Tests"}),": Rapidly fire events to test system resilience"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge Cases"}),": Test with extreme values (null, negative, max values)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sequence Tests"}),": Test specific event/variable change sequences"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Load Tests"}),": Simulate high-frequency event scenarios"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"automated-test-sequences",children:"Automated Test Sequences"}),"\n",(0,r.jsx)(n.p,{children:"Create and run automated test sequences:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Example test sequence in Debug Window\nTest Sequence: "Player Death Scenario"\n1. Set PlayerHealth = 100\n2. Raise OnDamageTaken(25) \xd7 4\n3. Verify PlayerHealth = 0\n4. Verify OnPlayerDied was raised\n5. Verify GameOver UI is active\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regression Testing"}),": Ensure changes don't break existing systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Testing"}),": Test system interactions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Testing"}),": Measure system performance under load"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge Case Testing"}),": Test boundary conditions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"custom-debug-views",children:"Custom Debug Views"}),"\n",(0,r.jsx)(n.p,{children:"Create custom monitoring views for specific systems:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[CustomDebugView("Player Systems")]\npublic class PlayerDebugView\n{\n    [DebugMonitor] public IntVariable health;\n    [DebugMonitor] public IntVariable mana;\n    [DebugMonitor] public Vector3Variable position;\n    \n    [DebugButton("Heal to Full")]\n    void HealToFull() => health.SetValue(health.Max);\n    \n    [DebugButton("Teleport to Spawn")]\n    void TeleportToSpawn() => position.SetValue(Vector3.zero);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"export-and-logging",children:"Export and Logging"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Export Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CSV Export"}),": Event history and performance data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JSON Export"}),": Variable states and system configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unity Console"}),": Integration with Unity's console for logging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Tools"}),": Export data for analysis in external tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-unit-tests",children:"Integration with Unit Tests"}),"\n",(0,r.jsx)(n.p,{children:"The Debug Window data can be used in unit tests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic void TestHealthSystemIntegration()\n{\n    // Arrange - Use Debug Window to set initial state\n    DebugWindow.SetVariable("PlayerHealth", 100);\n    \n    // Act - Trigger damage through Debug Window\n    DebugWindow.RaiseEvent("OnDamageTaken", 50);\n    \n    // Assert - Check results via Debug Window\n    Assert.AreEqual(50, DebugWindow.GetVariable("PlayerHealth"));\n    Assert.IsTrue(DebugWindow.WasEventRaised("OnHealthChanged"));\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"keyboard-shortcuts",children:"Keyboard Shortcuts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Navigation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+1"})," - Monitor Tab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+2"})," - Events Tab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+3"})," - Variables Tab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+4"})," - Performance Tab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+5"})," - Dependencies Tab"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Actions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"F5"})," - Refresh all data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+F"})," - Search/Filter"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+C"})," - Copy selected data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ctrl+E"})," - Export current view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Space"})," - Pause/Resume monitoring"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"daily-debugging-workflow",children:"Daily Debugging Workflow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Morning Check"}),": Open Debug Window, review overnight performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Development"}),": Keep Monitor tab open while coding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": Use Events tab to test new features"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Check Performance tab before committing code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration"}),": Use Dependencies tab when connecting new systems"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'// Set performance thresholds\nDebugWindow.SetPerformanceThreshold("EventDispatch", 1.0f); // 1ms max\nDebugWindow.SetPerformanceThreshold("VariableChange", 0.5f); // 0.5ms max\n\n// Get alerts when thresholds are exceeded\nDebugWindow.OnPerformanceAlert += (system, time) => \n{\n    Debug.LogWarning($"{system} took {time}ms - optimization needed!");\n};\n'})}),"\n",(0,r.jsx)(n.h3,{id:"collaborative-debugging",children:"Collaborative Debugging"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Team Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Views"}),": Export debug configurations for team members"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remote Monitoring"}),": Monitor builds on other machines/devices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Report Generation"}),": Create debug reports for team meetings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Issue Tracking"}),": Link debug data to issue tracking systems"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:'Q: "Debug Window is empty/not showing data"'}),"\nA: Ensure you're in Play Mode and have SOAP assets in your scene"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:'Q: "Performance tab shows no data"'}),"\nA: Enable performance profiling in ",(0,r.jsx)(n.code,{children:"SoapKit Settings > Performance > Enable Profiling"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:'Q: "Can\'t find specific variable/event"'}),"\nA: Use the search/filter box at the top of each tab"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:'Q: "Debug Window is slow/laggy"'}),"\nA: Reduce monitoring frequency in ",(0,r.jsx)(n.code,{children:"SoapKit Settings > Debug > Update Rate"})]}),"\n",(0,r.jsx)(n.h3,{id:"debug-window-settings",children:"Debug Window Settings"}),"\n",(0,r.jsxs)(n.p,{children:["Access settings via: ",(0,r.jsx)(n.code,{children:"Edit > Project Settings > SoapKit > Debug Window"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update Rate"}),": How often the window refreshes (default: 30fps)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"History Size"}),": Number of events/changes to remember (default: 1000)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Profiling"}),": Enable detailed performance tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auto-Save"}),": Automatically save debug sessions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Theme"}),": Light/Dark theme options"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"The Debug Window is your most powerful tool for SOAP development. Master it, and you'll debug and optimize your Unity games like a professional! \ud83d\udd0d\ud83d\ude80"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./asset-creator",children:"Asset Creator"})," - Efficiently create SOAP assets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./dependency-visualizer",children:"Dependency Visualizer"})," - Advanced dependency analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./performance-analyzer",children:"Performance Analyzer"})," - Deep performance optimization"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6222:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-performance-75ce3fb6284594c3a29a6c77dc00cc8e.png"},7687:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-variables-75ce3fb6284594c3a29a6c77dc00cc8e.png"},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},8825:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/debug-dependencies-75ce3fb6284594c3a29a6c77dc00cc8e.png"}}]);