"use strict";(self.webpackChunksoap_kit=self.webpackChunksoap_kit||[]).push([[6563],{2147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"advanced/performance","title":"Performance Optimization","description":"Learn how to optimize SoapKit usage for better performance in your Unity projects.","source":"@site/docs/advanced/performance.md","sourceDirName":"advanced","slug":"/advanced/performance","permalink":"/SoapKit-Doc/docs/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/performance.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Design Patterns","permalink":"/SoapKit-Doc/docs/advanced/patterns"},"next":{"title":"Best Practices","permalink":"/SoapKit-Doc/docs/advanced/best-practices"}}');var i=t(4848),r=t(8453);const s={},o="Performance Optimization",l={},c=[{value:"Event System Performance",id:"event-system-performance",level:2},{value:"Listener Management",id:"listener-management",level:3},{value:"Event Frequency Optimization",id:"event-frequency-optimization",level:3},{value:"Variable System Performance",id:"variable-system-performance",level:2},{value:"Efficient Value Setting",id:"efficient-value-setting",level:3},{value:"Memory-Efficient Collections",id:"memory-efficient-collections",level:3},{value:"Asset Loading Performance",id:"asset-loading-performance",level:2},{value:"Preload Critical Assets",id:"preload-critical-assets",level:3},{value:"Lazy Loading",id:"lazy-loading",level:3},{value:"Profiling and Monitoring",id:"profiling-and-monitoring",level:2},{value:"Built-in Performance Monitoring",id:"built-in-performance-monitoring",level:3},{value:"Custom Performance Metrics",id:"custom-performance-metrics",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Event System",id:"event-system",level:3},{value:"Variable System",id:"variable-system",level:3},{value:"Asset Management",id:"asset-management",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Automated Performance Tests",id:"automated-performance-tests",level:3},{value:"Troubleshooting Performance Issues",id:"troubleshooting-performance-issues",level:2},{value:"Common Performance Problems",id:"common-performance-problems",level:3},{value:"Using SoapKit Performance Analyzer",id:"using-soapkit-performance-analyzer",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"performance-optimization",children:"Performance Optimization"})}),"\n",(0,i.jsx)(n.p,{children:"Learn how to optimize SoapKit usage for better performance in your Unity projects."}),"\n",(0,i.jsx)(n.h2,{id:"event-system-performance",children:"Event System Performance"}),"\n",(0,i.jsx)(n.h3,{id:"listener-management",children:"Listener Management"}),"\n",(0,i.jsx)(n.p,{children:"Efficiently manage event listeners to avoid performance issues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class OptimizedEventListener : MonoBehaviour\n{\n    [SerializeField] private GameEvent targetEvent;\n    \n    private void OnEnable()\n    {\n        // Only subscribe when component is active\n        targetEvent?.AddListener(HandleEvent);\n    }\n    \n    private void OnDisable()\n    {\n        // Always unsubscribe to prevent memory leaks\n        targetEvent?.RemoveListener(HandleEvent);\n    }\n    \n    private void HandleEvent()\n    {\n        // Keep event handlers lightweight\n        StartCoroutine(HandleEventAsync());\n    }\n    \n    private IEnumerator HandleEventAsync()\n    {\n        // Move heavy operations to coroutines\n        yield return null;\n        // Heavy work here\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-frequency-optimization",children:"Event Frequency Optimization"}),"\n",(0,i.jsx)(n.p,{children:"Throttle high-frequency events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class ThrottledHealthSystem : MonoBehaviour\n{\n    [SerializeField] private IntVariable playerHealth;\n    [SerializeField] private IntGameEvent onHealthChanged;\n    [SerializeField] private float updateInterval = 0.1f;\n    \n    private int lastBroadcastHealth;\n    private float lastUpdateTime;\n    \n    private void Update()\n    {\n        if (Time.time - lastUpdateTime >= updateInterval)\n        {\n            CheckHealthChange();\n            lastUpdateTime = Time.time;\n        }\n    }\n    \n    private void CheckHealthChange()\n    {\n        if (playerHealth.Value != lastBroadcastHealth)\n        {\n            lastBroadcastHealth = playerHealth.Value;\n            onHealthChanged.Raise(playerHealth.Value);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"variable-system-performance",children:"Variable System Performance"}),"\n",(0,i.jsx)(n.h3,{id:"efficient-value-setting",children:"Efficient Value Setting"}),"\n",(0,i.jsx)(n.p,{children:"Minimize unnecessary change notifications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class EfficientVariableUpdater : MonoBehaviour\n{\n    [SerializeField] private FloatVariable targetValue;\n    \n    public void UpdateValueEfficiently(float newValue)\n    {\n        // Only update if value actually changed\n        if (!Mathf.Approximately(targetValue.Value, newValue))\n        {\n            targetValue.SetValue(newValue);\n        }\n    }\n    \n    public void BatchUpdateValues(float[] values)\n    {\n        // Temporarily disable notifications for batch operations\n        bool wasNotifying = targetValue.EnableChangeNotification;\n        targetValue.EnableChangeNotification = false;\n        \n        foreach (float value in values)\n        {\n            targetValue.SetValue(value);\n        }\n        \n        // Re-enable and trigger final notification\n        targetValue.EnableChangeNotification = wasNotifying;\n        if (wasNotifying)\n        {\n            targetValue.NotifyValueChanged();\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory-efficient-collections",children:"Memory-Efficient Collections"}),"\n",(0,i.jsx)(n.p,{children:"Use object pooling for frequently created objects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class PooledGameEventManager : MonoBehaviour\n{\n    private static readonly Queue<GameEventArgs> eventArgsPool = new Queue<GameEventArgs>();\n    \n    public static GameEventArgs GetEventArgs()\n    {\n        return eventArgsPool.Count > 0 ? eventArgsPool.Dequeue() : new GameEventArgs();\n    }\n    \n    public static void ReturnEventArgs(GameEventArgs args)\n    {\n        args.Reset();\n        eventArgsPool.Enqueue(args);\n    }\n}\n\npublic class GameEventArgs\n{\n    public float FloatValue { get; set; }\n    public int IntValue { get; set; }\n    public string StringValue { get; set; }\n    \n    public void Reset()\n    {\n        FloatValue = 0f;\n        IntValue = 0;\n        StringValue = string.Empty;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"asset-loading-performance",children:"Asset Loading Performance"}),"\n",(0,i.jsx)(n.h3,{id:"preload-critical-assets",children:"Preload Critical Assets"}),"\n",(0,i.jsx)(n.p,{children:"Load frequently used ScriptableObjects at startup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class AssetPreloader : MonoBehaviour\n{\n    [SerializeField] private ScriptableObject[] criticalAssets;\n    \n    private void Awake()\n    {\n        PreloadAssets();\n    }\n    \n    private void PreloadAssets()\n    {\n        foreach (var asset in criticalAssets)\n        {\n            // Touch the asset to ensure it's loaded\n            _ = asset.name;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lazy-loading",children:"Lazy Loading"}),"\n",(0,i.jsx)(n.p,{children:"Implement lazy loading for non-critical assets:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class LazyAssetLoader : MonoBehaviour\n{\n    private IntVariable _cachedHealth;\n    \n    public IntVariable PlayerHealth\n    {\n        get\n        {\n            if (_cachedHealth == null)\n            {\n                _cachedHealth = Resources.Load<IntVariable>("Variables/PlayerHealth");\n            }\n            return _cachedHealth;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"profiling-and-monitoring",children:"Profiling and Monitoring"}),"\n",(0,i.jsx)(n.h3,{id:"built-in-performance-monitoring",children:"Built-in Performance Monitoring"}),"\n",(0,i.jsx)(n.p,{children:"Use SoapKit's built-in performance tools:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class PerformanceMonitor : MonoBehaviour\n{\n    [SerializeField] private GameEvent[] eventsToMonitor;\n    \n    private void Update()\n    {\n        foreach (var gameEvent in eventsToMonitor)\n        {\n            // Monitor listener count\n            if (gameEvent.ListenerCount > 10)\n            {\n                Debug.LogWarning($"Event {gameEvent.name} has {gameEvent.ListenerCount} listeners");\n            }\n            \n            // Monitor event frequency\n            if (gameEvent.EventsRaisedThisFrame > 5)\n            {\n                Debug.LogWarning($"Event {gameEvent.name} raised {gameEvent.EventsRaisedThisFrame} times this frame");\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-performance-metrics",children:"Custom Performance Metrics"}),"\n",(0,i.jsx)(n.p,{children:"Track your own performance metrics:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public static class SoapKitProfiler\n{\n    private static readonly Dictionary<string, float> metrics = new Dictionary<string, float>();\n    \n    public static void StartTiming(string operation)\n    {\n        metrics[operation] = Time.realtimeSinceStartup;\n    }\n    \n    public static void EndTiming(string operation)\n    {\n        if (metrics.TryGetValue(operation, out float startTime))\n        {\n            float duration = Time.realtimeSinceStartup - startTime;\n            Debug.Log($"{operation} took {duration:F4}ms");\n            metrics.Remove(operation);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"event-system",children:"Event System"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Limit Listeners"}),": Keep listener counts reasonable (< 20 per event)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lightweight Handlers"}),": Keep event handlers fast and simple"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Async Operations"}),": Move heavy work to coroutines or async methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unsubscribe Properly"}),": Always pair AddListener with RemoveListener"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"variable-system",children:"Variable System"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Updates"}),": Group multiple variable changes when possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Before Set"}),": Only update when values actually change"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Appropriate Types"}),": Choose the right variable type for your data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate Constraints"}),": Use built-in constraints instead of manual validation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"asset-management",children:"Asset Management"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Preload Critical Assets"}),": Load important assets at startup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Asset References"}),": Prefer asset references over Resources.Load"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pool Objects"}),": Reuse objects instead of constant allocation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor Memory"}),": Use Unity Profiler to track ScriptableObject memory usage"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(n.h3,{id:"automated-performance-tests",children:"Automated Performance Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[TestFixture]\npublic class SoapKitPerformanceTests\n{\n    [Test]\n    public void EventRaisePerformanceTest()\n    {\n        var gameEvent = ScriptableObject.CreateInstance<GameEvent>();\n        var stopwatch = System.Diagnostics.Stopwatch.StartNew();\n        \n        for (int i = 0; i < 10000; i++)\n        {\n            gameEvent.Raise();\n        }\n        \n        stopwatch.Stop();\n        Assert.Less(stopwatch.ElapsedMilliseconds, 100, "Event raising took too long");\n    }\n    \n    [Test]\n    public void VariableUpdatePerformanceTest()\n    {\n        var variable = ScriptableObject.CreateInstance<IntVariable>();\n        var stopwatch = System.Diagnostics.Stopwatch.StartNew();\n        \n        for (int i = 0; i < 10000; i++)\n        {\n            variable.SetValue(i);\n        }\n        \n        stopwatch.Stop();\n        Assert.Less(stopwatch.ElapsedMilliseconds, 50, "Variable updates took too long");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting-performance-issues",children:"Troubleshooting Performance Issues"}),"\n",(0,i.jsx)(n.h3,{id:"common-performance-problems",children:"Common Performance Problems"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Too Many Listeners"}),": Check listener counts in the SoapKit Debug Window"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frequent Events"}),": Monitor event frequency using built-in tools"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Leaks"}),": Use Unity Profiler to detect growing memory usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blocking Operations"}),": Profile event handlers for long-running code"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"using-soapkit-performance-analyzer",children:"Using SoapKit Performance Analyzer"}),"\n",(0,i.jsx)(n.p,{children:"The SoapKit Performance Analyzer provides real-time monitoring:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Open ",(0,i.jsx)(n.strong,{children:"Window > SoapKit > Performance Analyzer"})]}),"\n",(0,i.jsx)(n.li,{children:"Monitor hotspots in real-time"}),"\n",(0,i.jsx)(n.li,{children:"Get optimization recommendations"}),"\n",(0,i.jsx)(n.li,{children:"Track system health over time"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);